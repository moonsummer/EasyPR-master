!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLXMLClearTag	thirdparty/xmlParser/xmlParser.cpp	/^typedef struct { XMLCSTR lpszOpen; int openTagLen; XMLCSTR lpszClose;} ALLXMLClearTag;$/;"	t	typeref:struct:__anon2	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	399;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	402;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	406;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	408;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	410;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	414;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	417;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	420;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	425;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	428;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	431;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	435;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	391;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	394;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	397;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	403;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	405;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	412;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	415;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	420;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	423;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	426;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	430;"	d	file:
AnnChTrain	include/easypr/train/annCh_train.h	/^class AnnChTrain : public ITrain {$/;"	c	namespace:easypr
AnnChTrain	src/train/annCh_train.cpp	/^  AnnChTrain::AnnChTrain(const char* chars_folder, const char* xml)$/;"	f	class:easypr::AnnChTrain
AnnTrain	include/easypr/train/ann_train.h	/^class AnnTrain : public ITrain {$/;"	c	namespace:easypr
AnnTrain	src/train/ann_train.cpp	/^AnnTrain::AnnTrain(const char* chars_folder, const char* xml)$/;"	f	class:easypr::AnnTrain
Attrib	thirdparty/xmlParser/xmlParser.cpp	/^typedef enum Attrib$/;"	g	file:
Attrib	thirdparty/xmlParser/xmlParser.cpp	/^} Attrib;$/;"	t	typeref:enum:Attrib	file:
BASE64DECODE_READ_NEXT_CHAR	thirdparty/xmlParser/xmlParser.cpp	2906;"	d	file:
BASE64DECODE_READ_NEXT_CHAR	thirdparty/xmlParser/xmlParser.cpp	2955;"	d	file:
BLUE	include/easypr/config.h	/^  enum Color { BLUE, YELLOW, WHITE, UNKNOWN };$/;"	e	enum:easypr::Color
BlockedRange	thirdparty/svm/precomp.hpp	/^	typedef tbb::blocked_range<int> BlockedRange;$/;"	t	namespace:cv
BoostTreeParams	thirdparty/svm/precomp.hpp	/^    struct BoostTreeParams$/;"	s	namespace:cv::ml
C	thirdparty/svm/corrected_svm.cpp	/^        double C[2];  \/\/ C[0] == Cn, C[1] == Cp$/;"	m	class:cv::ml::SVMImpl::Solver	file:
C	thirdparty/svm/corrected_svm.cpp	/^    double      C;$/;"	m	struct:cv::ml::SvmParams	file:
CCharacter	include/easypr/core/character.hpp	/^    CCharacter()$/;"	f	class:easypr::CCharacter
CCharacter	include/easypr/core/character.hpp	/^    CCharacter(const CCharacter& other)$/;"	f	class:easypr::CCharacter
CCharacter	include/easypr/core/character.hpp	/^  class CCharacter {$/;"	c	namespace:easypr
CCharsRecognise	include/easypr/core/chars_recognise.h	/^class CCharsRecognise {$/;"	c	namespace:easypr
CCharsRecognise	src/core/chars_recognise.cpp	/^CCharsRecognise::CCharsRecognise() { m_charsSegment = new CCharsSegment(); }$/;"	f	class:easypr::CCharsRecognise
CCharsSegment	include/easypr/core/chars_segment.h	/^class CCharsSegment {$/;"	c	namespace:easypr
CCharsSegment	src/core/chars_segment.cpp	/^CCharsSegment::CCharsSegment() {$/;"	f	class:easypr::CCharsSegment
CHAR_SIZE	include/easypr/core/chars_segment.h	/^  static const int CHAR_SIZE = 20;$/;"	m	class:easypr::CCharsSegment
CHECK_GRID	thirdparty/svm/corrected_svm.cpp	1650;"	d	file:
CHECK_SUM	include/easypr/network/networkConfig.hpp	/^	char CHECK_SUM;$/;"	m	struct:senddata
CLASS_COUNT	thirdparty/svm/corrected_svm.cpp	45;"	d	file:
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/linux\/EasyPR-master\/build$/;"	m
CMAKE_BINARY_DIR	build/thirdparty/Makefile	/^CMAKE_BINARY_DIR = \/home\/linux\/EasyPR-master\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/thirdparty/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/linux\/EasyPR-master$/;"	m
CMAKE_SOURCE_DIR	build/thirdparty/Makefile	/^CMAKE_SOURCE_DIR = \/home\/linux\/EasyPR-master$/;"	m
CMSER	include/easypr/config.h	/^  enum LocateType { SOBEL, COLOR, CMSER, OTHER };$/;"	e	enum:easypr::LocateType
COLOR	include/easypr/config.h	/^  enum LocateType { SOBEL, COLOR, CMSER, OTHER };$/;"	e	enum:easypr::LocateType
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	14;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	150;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	210;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	219;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	237;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	262;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	265;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	268;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	37;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	45;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	75;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	96;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	221;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	224;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	257;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	260;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	263;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	172;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	225;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	247;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	252;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	68;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	91;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	242;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	106;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	120;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	20;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	240;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	248;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	39;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	47;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	54;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	69;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	92;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	197;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	248;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	100;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	121;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	159;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	188;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	199;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	215;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	227;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	232;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	241;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	254;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	48;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	93;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	204;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	234;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	249;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	206;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
CParams	include/easypr/core/params.h	/^    CParams() {$/;"	f	class:easypr::CParams
CParams	include/easypr/core/params.h	/^    CParams(const CParams& other) {$/;"	f	class:easypr::CParams
CParams	include/easypr/core/params.h	/^  class CParams {$/;"	c	namespace:easypr
CPlate	include/easypr/core/plate.hpp	/^    CPlate() { $/;"	f	class:easypr::CPlate
CPlate	include/easypr/core/plate.hpp	/^    CPlate(const CPlate& other) {$/;"	f	class:easypr::CPlate
CPlate	include/easypr/core/plate.hpp	/^  class CPlate {$/;"	c	namespace:easypr
CPlateDetect	include/easypr/core/plate_detect.h	/^class CPlateDetect {$/;"	c	namespace:easypr
CPlateDetect	src/core/plate_detect.cpp	/^  CPlateDetect::CPlateDetect() {$/;"	f	class:easypr::CPlateDetect
CPlateLocate	include/easypr/core/plate_locate.h	/^class CPlateLocate {$/;"	c	namespace:easypr
CPlateLocate	src/core/plate_locate.cpp	/^CPlateLocate::CPlateLocate() {$/;"	f	class:easypr::CPlateLocate
CPlateRecognize	include/easypr/core/plate_recognize.h	/^  class CPlateRecognize : public CPlateDetect, public CCharsRecognise {$/;"	c	namespace:easypr
CPlateRecognize	src/core/plate_recognize.cpp	/^CPlateRecognize::CPlateRecognize() { $/;"	f	class:easypr::CPlateRecognize
CVFolds	thirdparty/svm/precomp.hpp	/^        int   CVFolds;$/;"	m	struct:cv::ml::TreeParams
CV_BADARG_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADARG_ERR = -49,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADCHANNELS_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADCHANNELS_ERR = -47,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADCOEF_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADCOEF_ERR = -10,$/;"	e	enum:CvStatus
CV_BADCONVERGENCE_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADCONVERGENCE_ERR = -109,$/;"	e	enum:CvStatus
CV_BADDEPTH_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADDEPTH_ERR = -107,$/;"	e	enum:CvStatus
CV_BADFACTOR_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADFACTOR_ERR = -7,$/;"	e	enum:CvStatus
CV_BADFLAG_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADFLAG_ERR = -12,$/;"	e	enum:CvStatus
CV_BADHEADER_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADHEADER_ERR = -105,$/;"	e	enum:CvStatus
CV_BADMEMBLOCK_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADMEMBLOCK_ERR = -113,$/;"	e	enum:CvStatus
CV_BADPOINT_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADPOINT_ERR = -6,$/;"	e	enum:CvStatus
CV_BADRANGE_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADRANGE_ERR = -44,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADROI_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADROI_ERR = -106,$/;"	e	enum:CvStatus
CV_BADSCALE_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADSCALE_ERR = -4,$/;"	e	enum:CvStatus
CV_BADSIZE_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADSIZE_ERR = -1,$/;"	e	enum:CvStatus
CV_BADSTEP_ERR	thirdparty/svm/precomp.hpp	/^	CV_BADSTEP_ERR = -29,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_DIV_BY_ZERO_ERR	thirdparty/svm/precomp.hpp	/^	CV_DIV_BY_ZERO_ERR = -11, \/\/ipp comp$/;"	e	enum:CvStatus
CV_DTREE_CAT_DIR	thirdparty/svm/precomp.hpp	274;"	d
CV_HELP_IMPL_PROPERTY	thirdparty/svm/precomp.hpp	171;"	d
CV_HELP_WRAP_PROPERTY	thirdparty/svm/precomp.hpp	175;"	d
CV_IMPL_PROPERTY	thirdparty/svm/precomp.hpp	179;"	d
CV_IMPL_PROPERTY_RO	thirdparty/svm/precomp.hpp	168;"	d
CV_IMPL_PROPERTY_S	thirdparty/svm/precomp.hpp	180;"	d
CV_INPLACE_NOT_SUPPORTED_ERR	thirdparty/svm/precomp.hpp	/^	CV_INPLACE_NOT_SUPPORTED_ERR = -112,$/;"	e	enum:CvStatus
CV_IPP_CHECK	thirdparty/svm/precomp.hpp	189;"	d
CV_IPP_CHECK_COND	thirdparty/svm/precomp.hpp	188;"	d
CV_LOG2PI	thirdparty/svm/precomp.hpp	266;"	d
CV_MALLOC_ALIGN	thirdparty/svm/precomp.hpp	136;"	d
CV_NOTDEFINED_ERR	thirdparty/svm/precomp.hpp	/^	CV_NOTDEFINED_ERR = -48,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_NOTFOUND_ERR	thirdparty/svm/precomp.hpp	/^	CV_NOTFOUND_ERR = -110,$/;"	e	enum:CvStatus
CV_NO_ERR	thirdparty/svm/precomp.hpp	/^	CV_NO_ERR = 0,$/;"	e	enum:CvStatus
CV_NULLPTR_ERR	thirdparty/svm/precomp.hpp	/^	CV_NULLPTR_ERR = -2,$/;"	e	enum:CvStatus
CV_OK	thirdparty/svm/precomp.hpp	/^	CV_OK = CV_NO_ERR$/;"	e	enum:CvStatus
CV_OUTOFMEM_ERR	thirdparty/svm/precomp.hpp	/^	CV_OUTOFMEM_ERR = -3,$/;"	e	enum:CvStatus
CV_TOGGLE_DBL	thirdparty/svm/precomp.hpp	140;"	d
CV_TOGGLE_FLT	thirdparty/svm/precomp.hpp	139;"	d
CV_UNMATCHED_FORMATS_ERR	thirdparty/svm/precomp.hpp	/^	CV_UNMATCHED_FORMATS_ERR = -104,$/;"	e	enum:CvStatus
CV_UNMATCHED_ROI_ERR	thirdparty/svm/precomp.hpp	/^	CV_UNMATCHED_ROI_ERR = -111,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_CHANNELS_ERR	thirdparty/svm/precomp.hpp	/^	CV_UNSUPPORTED_CHANNELS_ERR = -102,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_COI_ERR	thirdparty/svm/precomp.hpp	/^	CV_UNSUPPORTED_COI_ERR = -103,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_DEPTH_ERR	thirdparty/svm/precomp.hpp	/^	CV_UNSUPPORTED_DEPTH_ERR = -101,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_FORMAT_ERR	thirdparty/svm/precomp.hpp	/^	CV_UNSUPPORTED_FORMAT_ERR = -100,$/;"	e	enum:CvStatus
CV_VERSION_ID	include/easypr/version.h	3;"	d
CV_VERSION_THREE_TWO	include/easypr/config.h	5;"	d
CV_WRAP_PROPERTY	thirdparty/svm/precomp.hpp	182;"	d
CV_WRAP_PROPERTY_S	thirdparty/svm/precomp.hpp	183;"	d
CV_WRAP_SAME_PROPERTY	thirdparty/svm/precomp.hpp	185;"	d
CV_WRAP_SAME_PROPERTY_S	thirdparty/svm/precomp.hpp	186;"	d
CalcRho	thirdparty/svm/corrected_svm.cpp	/^        typedef void (Solver::*CalcRho)( double& rho, double& r );$/;"	t	class:cv::ml::SVMImpl::Solver	file:
Callback	thirdparty/textDetect/erfilter.hpp	/^    class CV_EXPORTS_W Callback$/;"	c	class:cv::text::ERFilter
CharSearchDirection	include/easypr/config.h	/^  enum CharSearchDirection { LEFT, RIGHT };$/;"	g	namespace:easypr
CharsIdentify	include/easypr/core/chars_identify.h	/^class CharsIdentify {$/;"	c	namespace:easypr
CharsIdentify	src/core/chars_identify.cpp	/^CharsIdentify::CharsIdentify() {$/;"	f	class:easypr::CharsIdentify
Color	include/easypr/config.h	/^  enum Color { BLUE, YELLOW, WHITE, UNKNOWN };$/;"	g	namespace:easypr
CompHistory	thirdparty/mser/mser2.cpp	/^      CompHistory()$/;"	f	struct:cv::MSER_Impl2::CompHistory
CompHistory	thirdparty/mser/mser2.cpp	/^    struct CompHistory$/;"	s	class:cv::MSER_Impl2	file:
ConcurrentRectVector	thirdparty/svm/precomp.hpp	/^	typedef tbb::concurrent_vector<Rect> ConcurrentRectVector;$/;"	t	namespace:cv
Config	test/config.hpp	/^      Config() {$/;"	f	class:easypr::demo::Config
Config	test/config.hpp	/^      Config(const Config& other) {$/;"	f	class:easypr::demo::Config
Config	test/config.hpp	/^    class Config {$/;"	c	namespace:easypr::demo
ConnectedComp	thirdparty/mser/mser2.cpp	/^      ConnectedComp()$/;"	f	struct:cv::MSER_Impl2::ConnectedComp
ConnectedComp	thirdparty/mser/mser2.cpp	/^    struct ConnectedComp$/;"	s	class:cv::MSER_Impl2	file:
CountLinesAndColumns	thirdparty/xmlParser/xmlParser.cpp	/^static void CountLinesAndColumns(XMLCSTR lpXML, int nUpto, XMLResults *pResults)$/;"	f	file:
CreateXMLStringR	thirdparty/xmlParser/xmlParser.cpp	/^int XMLNode::CreateXMLStringR(XMLNodeData *pEntry, XMLSTR lpszMarker, int nFormat)$/;"	f	class:XMLNode
CutTheRect	src/core/core_func.cpp	/^  Mat CutTheRect(Mat &in, Rect &rect) {$/;"	f	namespace:easypr
CvStatus	thirdparty/svm/precomp.hpp	/^CvStatus;$/;"	t	typeref:enum:CvStatus
CvStatus	thirdparty/svm/precomp.hpp	/^typedef enum CvStatus$/;"	g
DATA_LENGTH	include/easypr/network/networkConfig.hpp	/^	char DATA_LENGTH;$/;"	m	struct:senddata
DATA_OFFSET	include/easypr/network/networkConfig.hpp	/^	char DATA_OFFSET;$/;"	m	struct:senddata
DATA_TYPE	include/easypr/network/networkConfig.hpp	/^	char DATA_TYPE;$/;"	m	struct:senddata
DEC	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	439;"	d	file:
DEC	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	434;"	d	file:
DEFAULT_ANGLE	include/easypr/core/plate_locate.h	/^  static const int DEFAULT_ANGLE = 60;  \/\/ 30$/;"	m	class:easypr::CPlateLocate
DEFAULT_ASPECT	src/core/plate_locate.cpp	/^const float DEFAULT_ASPECT = 3.75f;  \/\/ 3.75$/;"	m	namespace:easypr	file:
DEFAULT_BLUEPERCEMT	src/core/chars_segment.cpp	/^const float DEFAULT_BLUEPERCEMT = 0.3f;$/;"	m	namespace:easypr	file:
DEFAULT_COLORTHRESHOLD	include/easypr/core/chars_segment.h	/^  static const int DEFAULT_COLORTHRESHOLD = 150;$/;"	m	class:easypr::CCharsSegment
DEFAULT_DEBUG	include/easypr/core/chars_segment.h	/^  static const int DEFAULT_DEBUG = 1;$/;"	m	class:easypr::CCharsSegment
DEFAULT_DEBUG	include/easypr/core/plate_locate.h	/^  static const int DEFAULT_DEBUG = 1;$/;"	m	class:easypr::CPlateLocate
DEFAULT_ERROR	src/core/plate_locate.cpp	/^const float DEFAULT_ERROR = 0.9f;    \/\/ 0.6$/;"	m	namespace:easypr	file:
DEFAULT_GAUSSIANBLUR_SIZE	include/easypr/core/plate_locate.h	/^  static const int DEFAULT_GAUSSIANBLUR_SIZE = 5;$/;"	m	class:easypr::CPlateLocate
DEFAULT_LIUDING_SIZE	include/easypr/core/chars_segment.h	/^  static const int DEFAULT_LIUDING_SIZE = 7;$/;"	m	class:easypr::CCharsSegment
DEFAULT_MAT_WIDTH	include/easypr/core/chars_segment.h	/^  static const int DEFAULT_MAT_WIDTH = 136;$/;"	m	class:easypr::CCharsSegment
DEFAULT_MORPH_SIZE_HEIGHT	include/easypr/core/plate_locate.h	/^  static const int DEFAULT_MORPH_SIZE_HEIGHT = 3;  \/\/ 3$/;"	m	class:easypr::CPlateLocate
DEFAULT_MORPH_SIZE_WIDTH	include/easypr/core/plate_locate.h	/^  static const int DEFAULT_MORPH_SIZE_WIDTH = 17;  \/\/ 17$/;"	m	class:easypr::CPlateLocate
DEFAULT_VERIFY_MAX	include/easypr/core/plate_locate.h	/^  static const int DEFAULT_VERIFY_MAX = 24;  \/\/ 20$/;"	m	class:easypr::CPlateLocate
DEFAULT_VERIFY_MIN	include/easypr/core/plate_locate.h	/^  static const int DEFAULT_VERIFY_MIN = 1;   \/\/ 3$/;"	m	class:easypr::CPlateLocate
DEFAULT_WHITEPERCEMT	src/core/chars_segment.cpp	/^const float DEFAULT_WHITEPERCEMT = 0.1f;$/;"	m	namespace:easypr	file:
DEPRECATED	include/easypr/util/program_options.h	22;"	d
DEPRECATED	include/easypr/util/program_options.h	24;"	d
DIR_SHIFT	thirdparty/mser/mser2.cpp	/^    enum { DIR_SHIFT = 29, NEXT_MASK = ((1 << DIR_SHIFT) - 1) };$/;"	e	enum:cv::MSER_Impl2::__anon1	file:
DISABLE_ASSIGN_AND_COPY	include/easypr/config.h	115;"	d
DTreesImpl	thirdparty/svm/precomp.hpp	/^    class DTreesImpl : public DTrees$/;"	c	namespace:cv::ml
D_	thirdparty/textDetect/erfilter.cpp	1660;"	d	file:
DecisionFunc	thirdparty/svm/corrected_svm.cpp	/^        DecisionFunc() : rho(0.), ofs(0) {}$/;"	f	struct:cv::ml::SVMImpl::DecisionFunc
DecisionFunc	thirdparty/svm/corrected_svm.cpp	/^        DecisionFunc(double _rho, int _ofs) : rho(_rho), ofs(_ofs) {}$/;"	f	struct:cv::ml::SVMImpl::DecisionFunc
DecisionFunc	thirdparty/svm/corrected_svm.cpp	/^    struct DecisionFunc$/;"	s	class:cv::ml::SVMImpl	file:
EASYPR_ACCURACY_HPP	test/accuracy.hpp	2;"	d
EASYPR_API_HPP	include/easypr/api.hpp	5;"	d
EASYPR_CHARS_HPP	test/chars.hpp	2;"	d
EASYPR_CONFIG_HPP	test/config.hpp	2;"	d
EASYPR_CONFIG_H_	include/easypr/config.h	2;"	d
EASYPR_CORE_CHARACTER_H_	include/easypr/core/character.hpp	11;"	d
EASYPR_CORE_CHARSIDENTIFY_H_	include/easypr/core/chars_identify.h	2;"	d
EASYPR_CORE_CHARSRECOGNISE_H_	include/easypr/core/chars_recognise.h	13;"	d
EASYPR_CORE_CHARSSEGMENT_H_	include/easypr/core/chars_segment.h	2;"	d
EASYPR_CORE_COREFUNC_H_	include/easypr/core/core_func.h	2;"	d
EASYPR_CORE_FEATURE_H_	include/easypr/core/feature.h	2;"	d
EASYPR_CORE_PARAMS_H_	include/easypr/core/params.h	11;"	d
EASYPR_CORE_PLATEDETECT_H_	include/easypr/core/plate_detect.h	2;"	d
EASYPR_CORE_PLATEJUDGE_H_	include/easypr/core/plate_judge.h	2;"	d
EASYPR_CORE_PLATELOCATE_H_	include/easypr/core/plate_locate.h	15;"	d
EASYPR_CORE_PLATERECOGNIZE_H_	include/easypr/core/plate_recognize.h	13;"	d
EASYPR_CORE_PLATE_H_	include/easypr/core/plate.hpp	11;"	d
EASYPR_CREATE_DATA_H_	include/easypr/train/create_data.h	2;"	d
EASYPR_EASYPR_H	include/easypr.h	2;"	d
EASYPR_PLATE_HPP	test/plate.hpp	2;"	d
EASYPR_RESULT_HPP	test/result.hpp	2;"	d
EASYPR_TRAIN_ANNCHTRAIN_H_	include/easypr/train/annCh_train.h	2;"	d
EASYPR_TRAIN_ANNTRAIN_H_	include/easypr/train/ann_train.h	2;"	d
EASYPR_TRAIN_SVMTRAIN_H_	include/easypr/train/svm_train.h	2;"	d
EASYPR_TRAIN_TRAIN_H_	include/easypr/train/train.h	2;"	d
EASYPR_UTIL_KV_H_	include/easypr/util/kv.h	2;"	d
EASYPR_UTIL_UTIL_H_	include/easypr/util/util.h	2;"	d
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/thirdparty/Makefile	/^EQUALS = =$/;"	m
ERClassifierNM1	thirdparty/textDetect/erfilter.cpp	/^    ERClassifierNM1::ERClassifierNM1(const string& filename)$/;"	f	class:cv::text::ERClassifierNM1
ERClassifierNM1	thirdparty/textDetect/erfilter.cpp	/^    class CV_EXPORTS ERClassifierNM1 : public ERFilter::Callback$/;"	c	namespace:cv::text	file:
ERClassifierNM2	thirdparty/textDetect/erfilter.cpp	/^    ERClassifierNM2::ERClassifierNM2(const string& filename)$/;"	f	class:cv::text::ERClassifierNM2
ERClassifierNM2	thirdparty/textDetect/erfilter.cpp	/^    class CV_EXPORTS ERClassifierNM2 : public ERFilter::Callback$/;"	c	namespace:cv::text	file:
ERDummyClassifier	thirdparty/textDetect/erfilter.cpp	/^      ERDummyClassifier() {}$/;"	f	class:cv::text::ERDummyClassifier
ERDummyClassifier	thirdparty/textDetect/erfilter.cpp	/^    class ERDummyClassifier : public ERFilter::Callback$/;"	c	namespace:cv::text	file:
ERFILTER_NM_IHSGrad	thirdparty/textDetect/erfilter.hpp	/^       ERFILTER_NM_IHSGrad$/;"	e	enum:cv::text::__anon5
ERFILTER_NM_RGBLGrad	thirdparty/textDetect/erfilter.hpp	/^enum { ERFILTER_NM_RGBLGrad,$/;"	e	enum:cv::text::__anon5
ERFeatures	thirdparty/textDetect/erfilter.cpp	/^    struct ERFeatures$/;"	s	namespace:cv::text	file:
ERFilter	thirdparty/textDetect/erfilter.hpp	/^class CV_EXPORTS_W ERFilter : public Algorithm$/;"	c	namespace:cv::text
ERFilterNM	thirdparty/textDetect/erfilter.cpp	/^    ERFilterNM::ERFilterNM()$/;"	f	class:cv::text::ERFilterNM
ERFilterNM	thirdparty/textDetect/erfilter.cpp	/^    class CV_EXPORTS ERFilterNM : public ERFilter$/;"	c	namespace:cv::text	file:
ERGROUPING_ORIENTATION_ANY	thirdparty/textDetect/erfilter.hpp	/^    ERGROUPING_ORIENTATION_ANY$/;"	e	enum:cv::text::erGrouping_Modes
ERGROUPING_ORIENTATION_HORIZ	thirdparty/textDetect/erfilter.hpp	/^    ERGROUPING_ORIENTATION_HORIZ,$/;"	e	enum:cv::text::erGrouping_Modes
ERStat	thirdparty/textDetect/erfilter.cpp	/^    ERStat::ERStat(int init_level, int init_pixel, int init_x, int init_y) : pixel(init_pixel),$/;"	f	class:cv::text::ERStat
ERStat	thirdparty/textDetect/erfilter.hpp	/^struct CV_EXPORTS ERStat$/;"	s	namespace:cv::text
FALSE	thirdparty/xmlParser/xmlParser.h	148;"	d
FOR_IN_GRID	thirdparty/svm/corrected_svm.cpp	1772;"	d	file:
Field	include/easypr/util/program_options.h	/^  enum Field { kShort, kLong, kDefault, kDescription };$/;"	g	class:program_options::Row
Find	thirdparty/textDetect/erfilter.cpp	/^      int_fast32_t Find(int_fast32_t idx) const$/;"	f	class:cv::text::union_find
G_vec	thirdparty/svm/corrected_svm.cpp	/^        vector<double> G_vec;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
Generator	include/easypr/util/program_options.h	/^class Generator {$/;"	c	namespace:program_options
Generator	src/util/program_options.cpp	/^Generator::Generator() : parser_(nullptr) {$/;"	f	class:program_options::Generator
GetCenterRect	src/core/core_func.cpp	/^  Rect GetCenterRect(Mat &in) {$/;"	f	namespace:easypr
GetChineseRect	src/core/chars_segment.cpp	/^Rect CCharsSegment::GetChineseRect(const Rect rectSpe) {$/;"	f	class:easypr::CCharsSegment
GetChineseRect	src/core/core_func.cpp	/^  Rect GetChineseRect(const Rect rectSpe) {$/;"	f	namespace:easypr
GetNextToken	thirdparty/xmlParser/xmlParser.cpp	/^static NextToken GetNextToken(XML *pXML, int *pcbToken, enum XMLTokenTypeTag *pType)$/;"	f	file:
GetRow	thirdparty/svm/corrected_svm.cpp	/^        typedef Qfloat* (Solver::*GetRow)( int i, Qfloat* row, Qfloat* dst, bool existed );$/;"	t	class:cv::ml::SVMImpl::Solver	file:
GetSpecificRect	src/core/chars_segment.cpp	/^int CCharsSegment::GetSpecificRect(const vector<Rect>& vecRect) {$/;"	f	class:easypr::CCharsSegment
HAVE_TBB	thirdparty/svm/precomp.hpp	69;"	d
HCluster	thirdparty/textDetect/erfilter.cpp	/^    struct HCluster{$/;"	s	namespace:cv::text	file:
HEIGHT	include/easypr/core/plate_locate.h	/^  static const int HEIGHT = 36;$/;"	m	class:easypr::CPlateLocate
HEX	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	450;"	d	file:
HEX	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	445;"	d	file:
HORIZONTAL	include/easypr/core/chars_segment.h	/^  static const int HORIZONTAL = 1;$/;"	m	class:easypr::CCharsSegment
HORIZONTAL	src/core/core_func.cpp	564;"	d	file:
ID_VOID_MAIN	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
INDENTCHAR	thirdparty/xmlParser/xmlParser.cpp	115;"	d	file:
IPPI_CALL	thirdparty/svm/precomp.hpp	192;"	d
ITrain	include/easypr/train/train.h	/^class ITrain {$/;"	c	namespace:easypr
ITrain	src/train/train.cpp	/^ITrain::ITrain() {}$/;"	f	class:easypr::ITrain
KernelRow	thirdparty/svm/corrected_svm.cpp	/^            KernelRow() { idx = -1; prev = next = 0; }$/;"	f	struct:cv::ml::SVMImpl::Solver::KernelRow
KernelRow	thirdparty/svm/corrected_svm.cpp	/^            KernelRow(int _idx, int _prev, int _next) : idx(_idx), prev(_prev), next(_next) {}$/;"	f	struct:cv::ml::SVMImpl::Solver::KernelRow
KernelRow	thirdparty/svm/corrected_svm.cpp	/^        struct KernelRow$/;"	s	class:cv::ml::SVMImpl::Solver	file:
Kv	include/easypr/util/kv.h	/^class Kv {$/;"	c	namespace:easypr
Kv	src/util/kv.cpp	/^Kv::Kv() { }$/;"	f	class:easypr::Kv
LEFT	include/easypr/config.h	/^  enum CharSearchDirection { LEFT, RIGHT };$/;"	e	enum:easypr::CharSearchDirection
LENSTR	thirdparty/xmlParser/xmlParser.cpp	1929;"	d	file:
LENSTR	thirdparty/xmlParser/xmlParser.cpp	2157;"	d	file:
LOAD_ANN_MODEL	include/easypr/config.h	138;"	d
LOAD_ANN_MODEL	include/easypr/config.h	143;"	d
LOAD_SVM_MODEL	include/easypr/config.h	136;"	d
LOAD_SVM_MODEL	include/easypr/config.h	141;"	d
LoadANN	src/core/plate_recognize.cpp	/^void CPlateRecognize::LoadANN(std::string path) {$/;"	f	class:easypr::CPlateRecognize
LoadChineseANN	src/core/plate_recognize.cpp	/^void CPlateRecognize::LoadChineseANN(std::string path) {$/;"	f	class:easypr::CPlateRecognize
LoadChineseMapping	src/core/chars_identify.cpp	/^void CharsIdentify::LoadChineseMapping(std::string path) {$/;"	f	class:easypr::CharsIdentify
LoadChineseMapping	src/core/plate_recognize.cpp	/^void CPlateRecognize::LoadChineseMapping(std::string path) {$/;"	f	class:easypr::CPlateRecognize
LoadChineseModel	src/core/chars_identify.cpp	/^void CharsIdentify::LoadChineseModel(std::string path) {$/;"	f	class:easypr::CharsIdentify
LoadGrayChANN	src/core/chars_identify.cpp	/^void CharsIdentify::LoadGrayChANN(std::string path) {$/;"	f	class:easypr::CharsIdentify
LoadGrayChANN	src/core/plate_recognize.cpp	/^void CPlateRecognize::LoadGrayChANN(std::string path) {$/;"	f	class:easypr::CPlateRecognize
LoadModel	src/core/chars_identify.cpp	/^void CharsIdentify::LoadModel(std::string path) {$/;"	f	class:easypr::CharsIdentify
LoadModel	src/core/plate_judge.cpp	/^  void PlateJudge::LoadModel(std::string path) {$/;"	f	class:easypr::PlateJudge
LoadSVM	src/core/plate_detect.cpp	/^  void CPlateDetect::LoadSVM(std::string path) {$/;"	f	class:easypr::CPlateDetect
LoadSVM	src/core/plate_recognize.cpp	/^void CPlateRecognize::LoadSVM(std::string path) {$/;"	f	class:easypr::CPlateRecognize
LocateType	include/easypr/config.h	/^  enum LocateType { SOBEL, COLOR, CMSER, OTHER };$/;"	g	namespace:easypr
MAX_CACHE_SIZE	thirdparty/svm/corrected_svm.cpp	/^        enum { MIN_CACHE_SIZE = (40 << 20) \/* 40Mb *\/, MAX_CACHE_SIZE = (500 << 20) \/* 500Mb *\/ };$/;"	e	enum:cv::ml::SVMImpl::Solver::__anon7	file:
MAX_GROUP_ELEMENTS	thirdparty/textDetect/erfilter.cpp	1518;"	d	file:
MAX_INDEX	thirdparty/textDetect/erfilter.cpp	1532;"	d	file:
MAX_INDEX	thirdparty/textDetect/erfilter.cpp	1534;"	d	file:
MEMORYINCREASE	thirdparty/xmlParser/xmlParser.cpp	1141;"	d	file:
METHOD_METR_AVERAGE	thirdparty/textDetect/erfilter.cpp	/^      METHOD_METR_AVERAGE = 1$/;"	e	enum:cv::text::method_codes	file:
METHOD_METR_SINGLE	thirdparty/textDetect/erfilter.cpp	/^      METHOD_METR_SINGLE = 0,$/;"	e	enum:cv::text::method_codes	file:
METRIC_CITYBLOCK	thirdparty/textDetect/erfilter.cpp	/^      METRIC_CITYBLOCK = 1,$/;"	e	enum:cv::text::__anon6	file:
METRIC_EUCLIDEAN	thirdparty/textDetect/erfilter.cpp	/^      METRIC_EUCLIDEAN = 0,$/;"	e	enum:cv::text::__anon6	file:
METRIC_SEUCLIDEAN	thirdparty/textDetect/erfilter.cpp	/^      METRIC_SEUCLIDEAN = 2,$/;"	e	enum:cv::text::__anon6	file:
METRIC_SQEUCLIDEAN	thirdparty/textDetect/erfilter.cpp	/^      METRIC_SQEUCLIDEAN = 3$/;"	e	enum:cv::text::__anon6	file:
MIN_CACHE_SIZE	thirdparty/svm/corrected_svm.cpp	/^        enum { MIN_CACHE_SIZE = (40 << 20) \/* 40Mb *\/, MAX_CACHE_SIZE = (500 << 20) \/* 500Mb *\/ };$/;"	e	enum:cv::ml::SVMImpl::Solver::__anon7	file:
MSER2	thirdparty/mser/mser2.hpp	/^  class CV_EXPORTS_W MSER2$/;"	c	namespace:cv
MSER_Impl2	thirdparty/mser/mser2.cpp	/^    explicit MSER_Impl2(const Params& _params) : params(_params) {}$/;"	f	class:cv::MSER_Impl2
MSER_Impl2	thirdparty/mser/mser2.cpp	/^  class MSER_Impl2 : public MSER2$/;"	c	namespace:cv	file:
MSERsToERStats	thirdparty/textDetect/erfilter.cpp	/^    void MSERsToERStats(InputArray image, vector<vector<Point> > &contours, vector<vector<ERStat> > &mser_regions)$/;"	f	namespace:cv::text
MST_linkage_core_vector	thirdparty/textDetect/erfilter.cpp	/^    static void MST_linkage_core_vector(const int_fast32_t N,$/;"	f	namespace:cv::text
M_LN10	thirdparty/textDetect/erfilter.cpp	1329;"	d	file:
MaxMeaningfulClustering	thirdparty/textDetect/erfilter.cpp	/^    MaxMeaningfulClustering::MaxMeaningfulClustering(unsigned char _method, unsigned char _metric, vector<ERFeatures> &_regions,$/;"	f	class:cv::text::MaxMeaningfulClustering
MaxMeaningfulClustering	thirdparty/textDetect/erfilter.cpp	/^    class MaxMeaningfulClustering$/;"	c	namespace:cv::text	file:
Minibox	thirdparty/textDetect/erfilter.cpp	/^    Minibox::Minibox()$/;"	f	class:cv::text::Minibox
Minibox	thirdparty/textDetect/erfilter.cpp	/^    class Minibox {$/;"	c	namespace:cv::text	file:
N	thirdparty/textDetect/erfilter.cpp	/^      int_fast32_t N;$/;"	m	class:cv::text::dissimilarity	file:
NETWORK_CONFIG_HPP	include/easypr/network/networkConfig.hpp	2;"	d
NETWORK_TYPE	include/easypr/network/networkConfig.hpp	/^	char NETWORK_TYPE;$/;"	m	struct:senddata
NEXT_MASK	thirdparty/mser/mser2.cpp	/^    enum { DIR_SHIFT = 29, NEXT_MASK = ((1 << DIR_SHIFT) - 1) };$/;"	e	enum:cv::MSER_Impl2::__anon1	file:
NFA	thirdparty/textDetect/erfilter.cpp	/^    static double NFA(int n, int k, double p, double logNT)$/;"	f	namespace:cv::text
NMS	src/core/plate_judge.cpp	/^  void NMS(std::vector<CPlate> &inVec, std::vector<CPlate> &resultVec, double overlap) {$/;"	f	namespace:easypr
NMSfor1D	include/easypr/core/core_func.h	/^void NMSfor1D(const vector<T>& arr, vector<int>& index) {$/;"	f	namespace:easypr
NMStoCharacter	src/core/core_func.cpp	/^  void NMStoCharacter(std::vector<CCharacter> &inVec, double overlap) {$/;"	f	namespace:easypr
NMStoCharacterByRatio	src/core/chars_segment.cpp	/^void NMStoCharacterByRatio(std::vector<CCharacter> &inVec, double overlap, const Rect groundRect) {$/;"	f	namespace:easypr
NextToken	thirdparty/xmlParser/xmlParser.cpp	/^} NextToken;$/;"	t	typeref:struct:__anon4	file:
OS_LINUX	include/easypr/util/util.h	15;"	d
OS_UNIX	include/easypr/util/util.h	13;"	d
OS_WINDOWS	include/easypr/util/util.h	11;"	d
OTHER	include/easypr/config.h	/^  enum LocateType { SOBEL, COLOR, CMSER, OTHER };$/;"	e	enum:easypr::LocateType
Order	include/easypr/util/program_options.h	/^  typedef std::initializer_list<Field> Order;$/;"	t	class:program_options::Row
PAIR_MAX_AB_DIST	thirdparty/textDetect/erfilter.cpp	3145;"	d	file:
PAIR_MAX_CENTROID_ANGLE	thirdparty/textDetect/erfilter.cpp	3141;"	d	file:
PAIR_MAX_INTENSITY_DIST	thirdparty/textDetect/erfilter.cpp	3144;"	d	file:
PAIR_MAX_REGION_DIST	thirdparty/textDetect/erfilter.cpp	3143;"	d	file:
PAIR_MIN_CENTROID_ANGLE	thirdparty/textDetect/erfilter.cpp	3140;"	d	file:
PAIR_MIN_HEIGHT_RATIO	thirdparty/textDetect/erfilter.cpp	3139;"	d	file:
PAIR_MIN_REGION_DIST	thirdparty/textDetect/erfilter.cpp	3142;"	d	file:
PATH_DELIMITER	src/util/util.cpp	23;"	d	file:
PATH_DELIMITER	src/util/util.cpp	8;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	293;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	299;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	305;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	308;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	314;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	317;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	320;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	323;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	326;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	329;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	332;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	338;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	341;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	344;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	347;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	350;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	353;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	356;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	359;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	362;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	365;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	369;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	378;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	381;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	385;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	300;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	303;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	306;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	312;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	315;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	318;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	321;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	339;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	345;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	348;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	354;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	357;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	360;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	364;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	367;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	370;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	373;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	376;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	380;"	d	file:
PPixel	thirdparty/mser/mser2.cpp	/^    typedef int PPixel;$/;"	t	class:cv::MSER_Impl2	file:
PROGRAM_OPTIONS_SWITCH_HPP_	include/easypr/util/switch.hpp	2;"	d
PROTOCOL_HEAD	include/easypr/network/networkConfig.hpp	/^	char PROTOCOL_HEAD;$/;"	m	struct:senddata
PR_DETECT_CMSER	include/easypr/config.h	/^    PR_DETECT_CMSER = 0x04,  \/**Character detect type, using mser  *\/$/;"	e	enum:easypr::__anon9
PR_DETECT_COLOR	include/easypr/config.h	/^    PR_DETECT_COLOR = 0x02,  \/**Color detect type   *\/$/;"	e	enum:easypr::__anon9
PR_DETECT_SOBEL	include/easypr/config.h	/^    PR_DETECT_SOBEL = 0x01,  \/**Sobel detect type, using twice Sobel  *\/$/;"	e	enum:easypr::__anon9
PR_MODE_CAMERPOHNE	include/easypr/config.h	/^    PR_MODE_CAMERPOHNE,$/;"	e	enum:easypr::__anon8
PR_MODE_HIGHWAY	include/easypr/config.h	/^    PR_MODE_HIGHWAY$/;"	e	enum:easypr::__anon8
PR_MODE_PARKING	include/easypr/config.h	/^    PR_MODE_PARKING,$/;"	e	enum:easypr::__anon8
PR_MODE_UNCONSTRAINED	include/easypr/config.h	/^    PR_MODE_UNCONSTRAINED,$/;"	e	enum:easypr::__anon8
ParameterList	include/easypr/util/program_options.h	/^  typedef std::vector<std::string> ParameterList;$/;"	t	class:program_options::Parser
Params	test/result.hpp	/^        Params() {$/;"	f	class:easypr::demo::Result::Params
Params	test/result.hpp	/^        Params(const Params& other) {$/;"	f	class:easypr::demo::Result::Params
Params	test/result.hpp	/^      class Params {$/;"	c	class:easypr::demo::Result
Params	thirdparty/mser/mser2.cpp	/^      Params(bool _useOpt = false, bool _subPath = false, bool _realMSER = false, bool _usePrune = false,$/;"	f	struct:cv::MSER_Impl2::Params
Params	thirdparty/mser/mser2.cpp	/^    struct Params$/;"	s	class:cv::MSER_Impl2	file:
ParseError	include/easypr/util/program_options.h	/^class ParseError : public std::exception {$/;"	c	namespace:program_options
ParseError	src/util/program_options.cpp	/^ParseError::ParseError(const std::string& msg) : _msg(msg) {}$/;"	f	class:program_options::ParseError
ParseItem	include/easypr/util/program_options.h	/^class ParseItem {$/;"	c	namespace:program_options
ParseItem	src/util/program_options.cpp	/^ParseItem::ParseItem(const std::string& value) : value_(value) {}$/;"	f	class:program_options::ParseItem
ParseResult	include/easypr/util/program_options.h	/^  typedef std::map<std::string, ParseItem*> ParseResult;$/;"	t	class:program_options::Parser
ParseXMLElement	thirdparty/xmlParser/xmlParser.cpp	/^int XMLNode::ParseXMLElement(void *pa)$/;"	f	class:XMLNode
Parser	include/easypr/util/program_options.h	/^class Parser {$/;"	c	namespace:program_options
Parser	src/util/program_options.cpp	/^Parser::Parser() : subroutines_(nullptr), pr_(nullptr) {}$/;"	f	class:program_options::Parser
Pixel	thirdparty/mser/mser2.cpp	/^      Pixel() : val(0) {}$/;"	f	struct:cv::MSER_Impl2::Pixel
Pixel	thirdparty/mser/mser2.cpp	/^      Pixel(int _val) : val(_val) {}$/;"	f	struct:cv::MSER_Impl2::Pixel
Pixel	thirdparty/mser/mser2.cpp	/^    struct Pixel$/;"	s	class:cv::MSER_Impl2	file:
PlateJudge	include/easypr/core/plate_judge.h	/^class PlateJudge {$/;"	c	namespace:easypr
PlateJudge	src/core/plate_judge.cpp	/^  PlateJudge::PlateJudge() { $/;"	f	class:easypr::PlateJudge
PredictBody	thirdparty/svm/corrected_svm.cpp	/^        PredictBody( const SVMImpl* _svm, const Mat& _samples, Mat& _results, bool _returnDFVal )$/;"	f	struct:cv::ml::SVMImpl::PredictBody
PredictBody	thirdparty/svm/corrected_svm.cpp	/^    struct PredictBody : ParallelLoopBody$/;"	s	class:cv::ml::SVMImpl	file:
ProjectedHistogram	src/core/core_func.cpp	/^  Mat ProjectedHistogram(Mat img, int t, int threshold) {$/;"	f	namespace:easypr
QFLOAT_TYPE	thirdparty/svm/corrected_svm.cpp	/^const int QFLOAT_TYPE = DataDepth<Qfloat>::value;$/;"	m	namespace:cv::ml	file:
Qfloat	thirdparty/svm/corrected_svm.cpp	/^typedef float Qfloat;$/;"	t	namespace:cv::ml	file:
RELATIVE_ERROR_FACTOR	thirdparty/textDetect/erfilter.cpp	1332;"	d	file:
RIGHT	include/easypr/config.h	/^  enum CharSearchDirection { LEFT, RIGHT };$/;"	e	enum:easypr::CharSearchDirection
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/thirdparty/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RTreeParams	thirdparty/svm/precomp.hpp	/^    struct RTreeParams$/;"	s	namespace:cv::ml
RebuildRect	src/core/chars_segment.cpp	/^int CCharsSegment::RebuildRect(const vector<Rect>& vecRect,$/;"	f	class:easypr::CCharsSegment
Reflections	include/easypr/util/switch.hpp	/^  typedef std::map<const Ty, Scope> Reflections;$/;"	t	class:program_options::Switch
Result	test/result.hpp	/^      Result() {$/;"	f	class:easypr::demo::Result
Result	test/result.hpp	/^      Result(const Result& other) {$/;"	f	class:easypr::demo::Result
Result	test/result.hpp	/^    class Result {$/;"	c	namespace:easypr::demo
Row	include/easypr/util/program_options.h	/^class Row {$/;"	c	namespace:program_options
Row	src/util/program_options.cpp	/^Row::Row() : require_value(true) {}$/;"	f	class:program_options::Row
SAFE_RELEASE	include/easypr/util/util.h	19;"	d
SENSOR_ADDR	include/easypr/network/networkConfig.hpp	/^	char SENSOR_ADDR[2];$/;"	m	struct:senddata
SENSOR_TYPE	include/easypr/network/networkConfig.hpp	/^	char SENSOR_TYPE;$/;"	m	struct:senddata
SEQUENCE_MAX_TRIPLET_DIST	thirdparty/textDetect/erfilter.cpp	3150;"	d	file:
SEQUENCE_MIN_LENGHT	thirdparty/textDetect/erfilter.cpp	3151;"	d	file:
SET_DEBUG	include/easypr/config.h	121;"	d
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/thirdparty/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHOW_IMAGE	include/easypr/config.h	125;"	d
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	162;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
SOBEL	include/easypr/config.h	/^  enum LocateType { SOBEL, COLOR, CMSER, OTHER };$/;"	e	enum:easypr::LocateType
SOBEL_DDEPTH	include/easypr/core/plate_locate.h	/^  static const int SOBEL_DDEPTH = CV_16S;$/;"	m	class:easypr::CPlateLocate
SOBEL_DELTA	include/easypr/core/plate_locate.h	/^  static const int SOBEL_DELTA = 0;$/;"	m	class:easypr::CPlateLocate
SOBEL_SCALE	include/easypr/core/plate_locate.h	/^  static const int SOBEL_SCALE = 1;$/;"	m	class:easypr::CPlateLocate
SOBEL_X_WEIGHT	include/easypr/core/plate_locate.h	/^  static const int SOBEL_X_WEIGHT = 1;$/;"	m	class:easypr::CPlateLocate
SOBEL_Y_WEIGHT	include/easypr/core/plate_locate.h	/^  static const int SOBEL_Y_WEIGHT = 0;$/;"	m	class:easypr::CPlateLocate
STRINGIFY	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	289;"	d	file:
STRINGIFY	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	284;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/thirdparty/Makefile	/^SUFFIXES =$/;"	m
SVMImpl	thirdparty/svm/corrected_svm.cpp	/^    SVMImpl()$/;"	f	class:cv::ml::SVMImpl
SVMImpl	thirdparty/svm/corrected_svm.cpp	/^class SVMImpl : public SVM$/;"	c	namespace:cv::ml	file:
SVMKernelImpl	thirdparty/svm/corrected_svm.cpp	/^    SVMKernelImpl( const SvmParams& _params = SvmParams() )$/;"	f	class:cv::ml::SVMKernelImpl
SVMKernelImpl	thirdparty/svm/corrected_svm.cpp	/^class SVMKernelImpl : public SVM::Kernel$/;"	c	namespace:cv::ml	file:
Scope	include/easypr/util/switch.hpp	/^  typedef std::function<void(void)> Scope;$/;"	t	class:program_options::Switch
SelectWorkingSet	thirdparty/svm/corrected_svm.cpp	/^        typedef bool (Solver::*SelectWorkingSet)( int& i, int& j );$/;"	t	class:cv::ml::SVMImpl::Solver	file:
SolutionInfo	thirdparty/svm/corrected_svm.cpp	/^            SolutionInfo() { obj = rho = upper_bound_p = upper_bound_n = r = 0; }$/;"	f	struct:cv::ml::SVMImpl::Solver::SolutionInfo
SolutionInfo	thirdparty/svm/corrected_svm.cpp	/^        struct SolutionInfo$/;"	s	class:cv::ml::SVMImpl::Solver	file:
Solver	thirdparty/svm/corrected_svm.cpp	/^        Solver( const Mat& _samples, const vector<schar>& _y,$/;"	f	class:cv::ml::SVMImpl::Solver
Solver	thirdparty/svm/corrected_svm.cpp	/^    class Solver$/;"	c	class:cv::ml::SVMImpl	file:
Split	thirdparty/svm/precomp.hpp	/^	typedef tbb::split Split;$/;"	t	namespace:cv
Subroutine	include/easypr/util/program_options.h	/^class Subroutine {$/;"	c	namespace:program_options
Subroutine	src/util/program_options.cpp	/^Subroutine::Subroutine() : first_line_("") {}$/;"	f	class:program_options::Subroutine
Subroutine	src/util/program_options.cpp	/^Subroutine::Subroutine(const char* name, const char* description)$/;"	f	class:program_options::Subroutine
SubroutineCollection	include/easypr/util/program_options.h	/^  typedef std::map<std::string, Subroutine*> SubroutineCollection;$/;"	t	class:program_options::Generator
SvmLabel	include/easypr/config.h	/^} SvmLabel;$/;"	t	namespace:easypr	typeref:enum:easypr::__anon10
SvmParams	thirdparty/svm/corrected_svm.cpp	/^    SvmParams( int _svmType, int _kernelType,$/;"	f	struct:cv::ml::SvmParams
SvmParams	thirdparty/svm/corrected_svm.cpp	/^    SvmParams()$/;"	f	struct:cv::ml::SvmParams
SvmParams	thirdparty/svm/corrected_svm.cpp	/^struct SvmParams$/;"	s	namespace:cv::ml	file:
SvmTrain	include/easypr/train/svm_train.h	/^class SvmTrain : public ITrain {$/;"	c	namespace:easypr
SvmTrain	src/train/svm_train.cpp	/^SvmTrain::SvmTrain(const char* plates_folder, const char* xml)$/;"	f	class:easypr::SvmTrain
Switch	include/easypr/util/switch.hpp	/^  Switch() : has_others_scope_(false) {}$/;"	f	class:program_options::Switch
Switch	include/easypr/util/switch.hpp	/^  explicit Switch(const Ty& target)$/;"	f	class:program_options::Switch
Switch	include/easypr/util/switch.hpp	/^class Switch {$/;"	c	namespace:program_options
TABSIZE	thirdparty/textDetect/erfilter.cpp	1400;"	d	file:
TRIPLET_MAX_DIST	thirdparty/textDetect/erfilter.cpp	3147;"	d	file:
TRIPLET_MAX_SLOPE	thirdparty/textDetect/erfilter.cpp	3148;"	d	file:
TRUE	thirdparty/xmlParser/xmlParser.h	151;"	d
TYPE	include/easypr/core/plate_locate.h	/^  static const int TYPE = CV_8UC3;$/;"	m	class:easypr::CPlateLocate
TemplateValue	include/easypr/util/program_options.h	/^  typedef std::initializer_list<const char*> TemplateValue;$/;"	t	class:program_options::Subroutine
TemplateValues	include/easypr/util/program_options.h	/^  typedef std::vector<TemplateValue> TemplateValues;$/;"	t	class:program_options::Subroutine
ThresholdOtsu	src/core/core_func.cpp	/^  int ThresholdOtsu(Mat mat) {$/;"	f	namespace:easypr
Tn	thirdparty/svm/precomp.hpp	/^            double Tn;$/;"	m	struct:cv::ml::DTreesImpl::WNode
ToXMLStringTool	thirdparty/xmlParser/xmlParser.h	/^    ToXMLStringTool(): buf(NULL),buflen(0){}$/;"	f	struct:ToXMLStringTool
ToXMLStringTool	thirdparty/xmlParser/xmlParser.h	/^typedef struct XMLDLLENTRY ToXMLStringTool$/;"	s
ToXMLStringTool	thirdparty/xmlParser/xmlParser.h	/^} ToXMLStringTool;$/;"	t	typeref:struct:ToXMLStringTool
TrainItem	include/easypr/train/svm_train.h	/^  } TrainItem;$/;"	t	class:easypr::SvmTrain	typeref:struct:easypr::SvmTrain::__anon11
TreeParams	thirdparty/svm/precomp.hpp	/^    struct TreeParams$/;"	s	namespace:cv::ml
UNKNOWN	include/easypr/config.h	/^  enum Color { BLUE, YELLOW, WHITE, UNKNOWN };$/;"	e	enum:easypr::Color
UTIL_PROGRAM_OPTIONS_H	include/easypr/util/program_options.h	8;"	d
Union	thirdparty/textDetect/erfilter.cpp	/^      void Union(const int_fast32_t node1, const int_fast32_t node2)$/;"	f	class:cv::text::union_find
Usages	include/easypr/util/program_options.h	/^  typedef std::vector<Row> Usages;$/;"	t	class:program_options::Subroutine
Utils	include/easypr/util/util.h	/^class Utils {$/;"	c	namespace:easypr
V	thirdparty/textDetect/erfilter.cpp	/^      double * V;$/;"	m	class:cv::text::dissimilarity	file:
VALID_DATA	include/easypr/network/networkConfig.hpp	/^	char VALID_DATA[16];$/;"	m	struct:senddata
VERTICAL	include/easypr/core/chars_segment.h	/^  static const int VERTICAL = 0;$/;"	m	class:easypr::CCharsSegment
VERTICAL	src/core/core_func.cpp	565;"	d	file:
V_data	thirdparty/textDetect/erfilter.cpp	/^      const double * V_data;$/;"	m	class:cv::text::dissimilarity	file:
WHITE	include/easypr/config.h	/^  enum Color { BLUE, YELLOW, WHITE, UNKNOWN };$/;"	e	enum:easypr::Color
WIDTH	include/easypr/core/plate_locate.h	/^  static const int WIDTH = 136;$/;"	m	class:easypr::CPlateLocate
WIN32_LEAN_AND_MEAN	thirdparty/xmlParser/xmlParser.cpp	60;"	d	file:
WNode	thirdparty/svm/precomp.hpp	/^            WNode()$/;"	f	struct:cv::ml::DTreesImpl::WNode
WNode	thirdparty/svm/precomp.hpp	/^        struct WNode$/;"	s	class:cv::ml::DTreesImpl
WParams	thirdparty/mser/mser2.cpp	/^    struct WParams$/;"	s	class:cv::MSER_Impl2	file:
WSplit	thirdparty/svm/precomp.hpp	/^            WSplit()$/;"	f	struct:cv::ml::DTreesImpl::WSplit
WSplit	thirdparty/svm/precomp.hpp	/^        struct WSplit$/;"	s	class:cv::ml::DTreesImpl
WorkData	thirdparty/svm/precomp.hpp	/^        struct WorkData$/;"	s	class:cv::ml::DTreesImpl
X	thirdparty/textDetect/erfilter.cpp	/^      inline double X(const int_fast32_t i, const int_fast32_t j) const$/;"	f	class:cv::text::dissimilarity
XML	thirdparty/xmlParser/xmlParser.cpp	/^typedef struct XML$/;"	s	file:
XML	thirdparty/xmlParser/xmlParser.cpp	/^} XML;$/;"	t	typeref:struct:XML	file:
XMLAttribute	thirdparty/xmlParser/xmlParser.h	/^typedef struct XMLAttribute {$/;"	s
XMLAttribute	thirdparty/xmlParser/xmlParser.h	/^} XMLAttribute;$/;"	t	typeref:struct:XMLAttribute
XMLCHAR	thirdparty/xmlParser/xmlParser.h	140;"	d
XMLCHAR	thirdparty/xmlParser/xmlParser.h	145;"	d
XMLCSTR	thirdparty/xmlParser/xmlParser.h	138;"	d
XMLCSTR	thirdparty/xmlParser/xmlParser.h	143;"	d
XMLCharEncoding	thirdparty/xmlParser/xmlParser.h	/^    typedef enum XMLCharEncoding$/;"	g	struct:XMLNode
XMLCharEncoding	thirdparty/xmlParser/xmlParser.h	/^    } XMLCharEncoding;$/;"	t	struct:XMLNode	typeref:enum:XMLNode::XMLCharEncoding
XMLCharacterEntity	thirdparty/xmlParser/xmlParser.cpp	/^typedef struct { XMLCSTR s; int l; XMLCHAR c;} XMLCharacterEntity;$/;"	t	typeref:struct:__anon3	file:
XMLClear	thirdparty/xmlParser/xmlParser.h	/^typedef struct XMLClear {$/;"	s
XMLClear	thirdparty/xmlParser/xmlParser.h	/^} XMLClear;$/;"	t	typeref:struct:XMLClear
XMLClearTags	thirdparty/xmlParser/xmlParser.cpp	/^static ALLXMLClearTag XMLClearTags[] =$/;"	v	file:
XMLDLLENTRY	thirdparty/xmlParser/xmlParser.h	105;"	d
XMLDLLENTRY	thirdparty/xmlParser/xmlParser.h	109;"	d
XMLDLLENTRY	thirdparty/xmlParser/xmlParser.h	111;"	d
XMLDLLENTRY	thirdparty/xmlParser/xmlParser.h	114;"	d
XMLDLLENTRY	thirdparty/xmlParser/xmlParser.h	128;"	d
XMLDLLENTRY	thirdparty/xmlParser/xmlParser.h	730;"	d
XMLElementPosition	thirdparty/xmlParser/xmlParser.h	/^typedef int XMLElementPosition;$/;"	t
XMLElementType	thirdparty/xmlParser/xmlParser.h	/^typedef enum XMLElementType$/;"	g
XMLElementType	thirdparty/xmlParser/xmlParser.h	/^} XMLElementType;$/;"	t	typeref:enum:XMLElementType
XMLEntities	thirdparty/xmlParser/xmlParser.cpp	/^static XMLCharacterEntity XMLEntities[] =$/;"	v	file:
XMLError	thirdparty/xmlParser/xmlParser.h	/^typedef enum XMLError$/;"	g
XMLError	thirdparty/xmlParser/xmlParser.h	/^} XMLError;$/;"	t	typeref:enum:XMLError
XMLNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode::XMLNode(XMLNodeData *pParent, XMLSTR lpszName, char isDeclaration)$/;"	f	class:XMLNode
XMLNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode::XMLNode(const XMLNode &A)$/;"	f	class:XMLNode
XMLNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode::XMLNode(struct XMLNodeDataTag *p){ d=p; (p->ref_count)++; }$/;"	f	class:XMLNode
XMLNode	thirdparty/xmlParser/xmlParser.h	/^    XMLNode(): d(NULL){};$/;"	f	struct:XMLNode
XMLNode	thirdparty/xmlParser/xmlParser.h	/^typedef struct XMLDLLENTRY XMLNode$/;"	s
XMLNode	thirdparty/xmlParser/xmlParser.h	/^} XMLNode;$/;"	t	typeref:struct:XMLNode
XMLNodeContents	thirdparty/xmlParser/xmlParser.h	/^typedef struct XMLNodeContents$/;"	s
XMLNodeContents	thirdparty/xmlParser/xmlParser.h	/^} XMLNodeContents;$/;"	t	typeref:struct:XMLNodeContents
XMLNodeData	thirdparty/xmlParser/xmlParser.h	/^      } XMLNodeData;$/;"	t	struct:XMLNode	typeref:struct:XMLNode::XMLNodeDataTag
XMLNodeDataTag	thirdparty/xmlParser/xmlParser.h	/^      typedef struct XMLNodeDataTag \/\/ to allow shallow copy and "intelligent\/smart" pointers (automatic delete):$/;"	s	struct:XMLNode
XMLParserBase64Tool	thirdparty/xmlParser/xmlParser.h	/^    XMLParserBase64Tool(): buf(NULL),buflen(0){}$/;"	f	struct:XMLParserBase64Tool
XMLParserBase64Tool	thirdparty/xmlParser/xmlParser.h	/^typedef struct XMLDLLENTRY XMLParserBase64Tool$/;"	s
XMLParserBase64Tool	thirdparty/xmlParser/xmlParser.h	/^}XMLParserBase64Tool;$/;"	t	typeref:struct:XMLParserBase64Tool
XMLResults	thirdparty/xmlParser/xmlParser.h	/^typedef struct XMLResults$/;"	s
XMLResults	thirdparty/xmlParser/xmlParser.h	/^} XMLResults;$/;"	t	typeref:struct:XMLResults
XMLSTR	thirdparty/xmlParser/xmlParser.h	139;"	d
XMLSTR	thirdparty/xmlParser/xmlParser.h	144;"	d
XMLStatus	thirdparty/xmlParser/xmlParser.cpp	/^typedef enum XMLStatus$/;"	g	file:
XMLStatus	thirdparty/xmlParser/xmlParser.cpp	/^} XMLStatus;$/;"	t	typeref:enum:XMLStatus	file:
XMLTokenType	thirdparty/xmlParser/xmlParser.cpp	/^} XMLTokenType;$/;"	t	typeref:enum:XMLTokenTypeTag	file:
XMLTokenTypeTag	thirdparty/xmlParser/xmlParser.cpp	/^typedef enum XMLTokenTypeTag$/;"	g	file:
XML_ByteTable	thirdparty/xmlParser/xmlParser.cpp	/^static const char *XML_ByteTable=(const char *)XML_utf8ByteTable; \/\/ the default is "characterEncoding=XMLNode::encoding_UTF8"$/;"	v	file:
XML_gb2312ByteTable	thirdparty/xmlParser/xmlParser.cpp	/^static const char XML_gb2312ByteTable[256] =$/;"	v	file:
XML_gbk_big5_ByteTable	thirdparty/xmlParser/xmlParser.cpp	/^static const char XML_gbk_big5_ByteTable[256] =$/;"	v	file:
XML_isSPACECHAR	thirdparty/xmlParser/xmlParser.cpp	2802;"	d	file:
XML_isSPACECHAR	thirdparty/xmlParser/xmlParser.cpp	904;"	d	file:
XML_legacyByteTable	thirdparty/xmlParser/xmlParser.cpp	/^static const char XML_legacyByteTable[256] =$/;"	v	file:
XML_sjisByteTable	thirdparty/xmlParser/xmlParser.cpp	/^static const char XML_sjisByteTable[256] =$/;"	v	file:
XML_utf8ByteTable	thirdparty/xmlParser/xmlParser.cpp	/^static const char XML_utf8ByteTable[256] =$/;"	v	file:
Xa	thirdparty/textDetect/erfilter.cpp	/^      double * Xa;$/;"	m	class:cv::text::dissimilarity	file:
Xb	thirdparty/textDetect/erfilter.cpp	/^      inline bool Xb(const int_fast32_t i, const int_fast32_t j) const$/;"	f	class:cv::text::dissimilarity
Xnew	thirdparty/textDetect/erfilter.cpp	/^      auto_array_ptr<double> Xnew;$/;"	m	class:cv::text::dissimilarity	file:
Xptr	thirdparty/textDetect/erfilter.cpp	/^      inline double * Xptr(const int_fast32_t i, const int_fast32_t j) const$/;"	f	class:cv::text::dissimilarity
YELLOW	include/easypr/config.h	/^  enum Color { BLUE, YELLOW, WHITE, UNKNOWN };$/;"	e	enum:easypr::Color
Z	thirdparty/textDetect/erfilter.cpp	/^      auto_array_ptr<node> Z;$/;"	m	class:cv::text::cluster_result	file:
Z	thirdparty/textDetect/erfilter.cpp	/^      double * Z;$/;"	m	class:cv::text::linkage_output	file:
Z_	thirdparty/textDetect/erfilter.cpp	1662;"	d	file:
_CRT_SECURE_NO_DEPRECATE	thirdparty/xmlParser/xmlParser.cpp	52;"	d	file:
_CXML	thirdparty/xmlParser/xmlParser.h	137;"	d
_CXML	thirdparty/xmlParser/xmlParser.h	142;"	d
_SERVER_SOCKET_H	include/easypr/network/server_socket.hpp	9;"	d
_XMLWIDECHAR	thirdparty/xmlParser/xmlParser.h	122;"	d
_XMLWINDOWS	thirdparty/xmlParser/xmlParser.h	101;"	d
_XMLWINDOWS	thirdparty/xmlParser/xmlParser.h	121;"	d
__HELPER_HPP__	thirdparty/LBP/helper.hpp	21;"	d
__INCLUDE_XML_NODE__	thirdparty/xmlParser/xmlParser.h	86;"	d
__LBP_HPP__	thirdparty/LBP/lbp.hpp	20;"	d
__OPENCV_BUILD	thirdparty/svm/precomp.hpp	247;"	d
__OPENCV_BUILD	thirdparty/svm/precomp.hpp	49;"	d
__OPENCV_ML_PRECOMP_HPP__	thirdparty/svm/precomp.hpp	42;"	d
__OPENCV_PRECOMP_H__	thirdparty/mser/mser2.cpp	48;"	d	file:
__OPENCV_PRECOMP_H__	thirdparty/mser/mser2.hpp	2;"	d
__OPENCV_TEXT_ERFILTER_HPP__	thirdparty/textDetect/erfilter.hpp	45;"	d
__STDC_LIMIT_MACROS	thirdparty/textDetect/erfilter.cpp	53;"	d	file:
_isClassifier	thirdparty/svm/precomp.hpp	/^        bool _isClassifier;$/;"	m	class:cv::ml::DTreesImpl
_msg	include/easypr/util/program_options.h	/^  std::string _msg;$/;"	m	class:program_options::ParseError
_strnicmp	thirdparty/xmlParser/xmlParser.cpp	/^    static inline int _strnicmp(const char *c1,const char *c2, int l) { return strncasecmp(c1,c2,l);}$/;"	f	file:
a	thirdparty/textDetect/erfilter.cpp	/^      Vec2i a;$/;"	m	struct:cv::text::region_pair	file:
a	thirdparty/textDetect/erfilter.cpp	/^      Vec2i a;$/;"	m	struct:cv::text::region_triplet	file:
accuracyCharRecognizeTest	test/accuracy.hpp	/^    int accuracyCharRecognizeTest(const char* test_path) {$/;"	f	namespace:easypr::demo
accuracyTest	test/accuracy.hpp	/^    int accuracyTest(const char* test_path, Result& result, bool useParams = false) {$/;"	f	namespace:easypr::demo
accuracyTestMain	test/main.cpp	/^int accuracyTestMain() {$/;"	f	namespace:easypr::demo
accuracyTestMain	test/main2.cpp	/^int accuracyTestMain() {$/;"	f	namespace:easypr::demo
adaptive_charrect_from_rect	src/core/core_func.cpp	/^  Rect adaptive_charrect_from_rect(const Rect &rect, int maxwidth, int maxheight, bool useExtendHeight) {$/;"	f	namespace:easypr
adaptive_image_from_points	src/core/core_func.cpp	/^  Mat adaptive_image_from_points(const std::vector<Point> &points,$/;"	f	namespace:easypr
add	src/util/kv.cpp	/^void Kv::add(const std::string &key, const std::string &value) {$/;"	f	class:easypr::Kv
addAttribute	thirdparty/xmlParser/xmlParser.cpp	/^XMLAttribute *XMLNode::addAttribute(XMLCSTR lpszName, XMLCSTR lpszValue)$/;"	f	class:XMLNode
addAttribute_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLAttribute *XMLNode::addAttribute_WOSD(XMLSTR lpszName, XMLSTR lpszValuev)$/;"	f	class:XMLNode
addAttribute_priv	thirdparty/xmlParser/xmlParser.cpp	/^XMLAttribute *XMLNode::addAttribute_priv(int memoryIncrease,XMLSTR lpszName, XMLSTR lpszValuev)$/;"	f	class:XMLNode
addChild	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode       XMLNode::addChild(XMLCSTR lpszName, char isDeclaration, XMLElementPosition pos)$/;"	f	class:XMLNode
addChild	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::addChild(XMLNode childNode, int pos)$/;"	f	class:XMLNode
addChild_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode       XMLNode::addChild_WOSD(XMLSTR lpszName, char isDeclaration, XMLElementPosition pos)$/;"	f	class:XMLNode
addChild_priv	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::addChild_priv(int memoryIncrease, XMLSTR lpszName, char isDeclaration, int pos)$/;"	f	class:XMLNode
addClear	thirdparty/xmlParser/xmlParser.cpp	/^XMLClear     *XMLNode::addClear(XMLCSTR lpszValue, XMLCSTR lpszOpen, XMLCSTR lpszClose, XMLElementPosition pos)$/;"	f	class:XMLNode
addClear_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLClear     *XMLNode::addClear_WOSD(XMLSTR lpszValue, XMLCSTR lpszOpen, XMLCSTR lpszClose, XMLElementPosition pos)$/;"	f	class:XMLNode
addClear_priv	thirdparty/xmlParser/xmlParser.cpp	/^XMLClear *XMLNode::addClear_priv(int memoryIncrease, XMLSTR lpszValue, XMLCSTR lpszOpen, XMLCSTR lpszClose, int pos)$/;"	f	class:XMLNode
addMserCharacter	include/easypr/core/plate.hpp	/^    inline void addMserCharacter(CCharacter param) { m_mserCharVec.push_back(param); }$/;"	f	class:easypr::CPlate
addReutCharacter	include/easypr/core/plate.hpp	/^    inline void addReutCharacter(CCharacter param) { m_reutCharVec.push_back(param); }$/;"	f	class:easypr::CPlate
addText	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR       XMLNode::addText(XMLCSTR lpszValue, XMLElementPosition pos)$/;"	f	class:XMLNode
addText_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR       XMLNode::addText_WOSD(XMLSTR lpszValue, XMLElementPosition pos)$/;"	f	class:XMLNode
addText_priv	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR XMLNode::addText_priv(int memoryIncrease, XMLSTR lpszValue, int pos)$/;"	f	class:XMLNode
addToOrder	thirdparty/xmlParser/xmlParser.cpp	/^void *XMLNode::addToOrder(int memoryIncrease,int *_pos, int nc, void *p, int size, XMLElementType xtype)$/;"	f	class:XMLNode
add_subroutine	src/util/program_options.cpp	/^Generator& Generator::add_subroutine(const char* name) {$/;"	f	class:program_options::Generator
add_subroutine	src/util/program_options.cpp	/^Generator& Generator::add_subroutine(const char* name,$/;"	f	class:program_options::Generator
add_usage_line	include/easypr/util/program_options.h	/^  inline void add_usage_line(const Row& row) { usages_.push_back(row); }$/;"	f	class:program_options::Subroutine
add_usage_line	include/easypr/util/program_options.h	/^  inline void add_usage_line(const TemplateValue& row) {$/;"	f	class:program_options::Subroutine
add_usage_line	src/util/program_options.cpp	/^bool Generator::add_usage_line(const char* option, const char* default_value,$/;"	f	class:program_options::Generator
affine	src/core/plate_locate.cpp	/^void CPlateLocate::affine(const Mat &in, Mat &out, const double slope) {$/;"	f	class:easypr::CPlateLocate
alloc	thirdparty/xmlParser/xmlParser.cpp	/^void XMLParserBase64Tool::alloc(int newsize)$/;"	f	class:XMLParserBase64Tool
alpha	thirdparty/svm/precomp.hpp	/^            double alpha;$/;"	m	struct:cv::ml::DTreesImpl::WNode
alpha_count	thirdparty/svm/corrected_svm.cpp	/^        int alpha_count;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
alpha_status_vec	thirdparty/svm/corrected_svm.cpp	/^        vector<schar> alpha_status_vec;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
alpha_vec	thirdparty/svm/corrected_svm.cpp	/^        vector<double>* alpha_vec;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
annCallback	include/easypr/core/feature.h	/^typedef void (*annCallback)(const cv::Mat& image, cv::Mat& features);$/;"	t	namespace:easypr
annChinese_	include/easypr/core/chars_identify.h	/^  cv::Ptr<cv::ml::ANN_MLP> annChinese_;$/;"	m	class:easypr::CharsIdentify
annGray_	include/easypr/core/chars_identify.h	/^  cv::Ptr<cv::ml::ANN_MLP> annGray_;$/;"	m	class:easypr::CharsIdentify
ann_	include/easypr/core/chars_identify.h	/^  cv::Ptr<cv::ml::ANN_MLP> ann_;$/;"	m	class:easypr::CharsIdentify
ann_	include/easypr/train/annCh_train.h	/^  cv::Ptr<cv::ml::ANN_MLP> ann_;$/;"	m	class:easypr::AnnChTrain
ann_	include/easypr/train/ann_train.h	/^  cv::Ptr<cv::ml::ANN_MLP> ann_;$/;"	m	class:easypr::AnnTrain
ann_xml_	include/easypr/train/annCh_train.h	/^  const char* ann_xml_;$/;"	m	class:easypr::AnnChTrain
ann_xml_	include/easypr/train/ann_train.h	/^  const char* ann_xml_;$/;"	m	class:easypr::AnnTrain
api	include/easypr/api.hpp	/^namespace api {$/;"	n	namespace:easypr
append	thirdparty/textDetect/erfilter.cpp	/^      void append(const int_fast32_t node1, const int_fast32_t node2, const double dist)$/;"	f	class:cv::text::cluster_result
append	thirdparty/textDetect/erfilter.cpp	/^      void append(const int_fast32_t node1, const int_fast32_t node2, const double dist, const double size)$/;"	f	class:cv::text::linkage_output
area	thirdparty/textDetect/erfilter.cpp	/^      int area;$/;"	m	struct:cv::text::ERFeatures	file:
area	thirdparty/textDetect/erfilter.hpp	/^    int area;$/;"	m	struct:cv::text::ERStat
areaThreshold	thirdparty/mser/mser2.cpp	/^      double areaThreshold;$/;"	m	struct:cv::MSER_Impl2::Params	file:
argc_	include/easypr/util/program_options.h	/^  int argc_;$/;"	m	class:program_options::Parser
args_	include/easypr/util/program_options.h	/^  ParameterList args_;$/;"	m	class:program_options::Parser
argsort	thirdparty/LBP/helper.cpp	/^Mat libfacerec::argsort(InputArray _src, bool ascending) {$/;"	f	class:libfacerec
arr	thirdparty/svm/precomp.hpp	/^        const _Tp* arr;$/;"	m	struct:cv::ml::cmp_lt_idx
as	include/easypr/util/program_options.h	/^  T as() {$/;"	f	class:program_options::ParseItem
asColumnMatrix	thirdparty/LBP/helper.cpp	/^Mat libfacerec::asColumnMatrix(InputArrayOfArrays src, int rtype, double alpha, double beta) {$/;"	f	class:libfacerec
asRowMatrix	thirdparty/LBP/helper.cpp	/^Mat libfacerec::asRowMatrix(InputArrayOfArrays src, int rtype, double alpha, double beta) {$/;"	f	class:libfacerec
at	include/easypr/util/program_options.h	/^  inline Row& at(size_t i) { return usages_.at(i); }$/;"	f	class:program_options::Subroutine
attrib	thirdparty/xmlParser/xmlParser.h	/^    XMLAttribute attrib;$/;"	m	struct:XMLNodeContents
auto_array_ptr	thirdparty/textDetect/erfilter.cpp	/^      auto_array_ptr() { ptr = NULL; }$/;"	f	class:cv::text::auto_array_ptr
auto_array_ptr	thirdparty/textDetect/erfilter.cpp	/^      auto_array_ptr(index const size) { init(size); }$/;"	f	class:cv::text::auto_array_ptr
auto_array_ptr	thirdparty/textDetect/erfilter.cpp	/^      auto_array_ptr(index const size, value const val) { init(size, val); }$/;"	f	class:cv::text::auto_array_ptr
auto_array_ptr	thirdparty/textDetect/erfilter.cpp	/^    class auto_array_ptr {$/;"	c	namespace:cv::text	file:
axial_ratio	thirdparty/textDetect/erfilter.cpp	/^      double axial_ratio;$/;"	m	struct:cv::text::ERFeatures	file:
b	thirdparty/textDetect/erfilter.cpp	/^      Vec2i b;$/;"	m	struct:cv::text::region_pair	file:
b	thirdparty/textDetect/erfilter.cpp	/^      Vec2i b;$/;"	m	struct:cv::text::region_triplet	file:
bFindLeftRightBound	src/core/core_func.cpp	/^  bool bFindLeftRightBound(Mat &bound_threshold, int &posLeft, int &posRight) {$/;"	f	namespace:easypr
bFindLeftRightBound1	src/core/core_func.cpp	/^  bool bFindLeftRightBound1(Mat &bound_threshold, int &posLeft, int &posRight) {$/;"	f	namespace:easypr
bFindLeftRightBound2	src/core/core_func.cpp	/^  bool bFindLeftRightBound2(Mat &bound_threshold, int &posLeft, int &posRight) {$/;"	f	namespace:easypr
b_vec	thirdparty/svm/corrected_svm.cpp	/^        vector<double> b_vec;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
base64DecodeTable	thirdparty/xmlParser/xmlParser.cpp	/^const unsigned char base64DecodeTable[] = {$/;"	v
base64EncodeTable	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR base64EncodeTable=_CXML("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/");$/;"	v
base64Fillchar	thirdparty/xmlParser/xmlParser.cpp	/^static const char base64Fillchar = _CXML('='); \/\/ used to mark partial words at the end$/;"	v	file:
bboxvec	thirdparty/mser/mser2.cpp	/^      vector<Rect>* bboxvec;$/;"	m	struct:cv::MSER_Impl2::WParams	file:
begin	include/easypr/util/program_options.h	/^  inline Usages::iterator begin() { return usages_.begin(); }$/;"	f	class:program_options::Subroutine
boost	thirdparty/textDetect/erfilter.cpp	/^      Ptr<Boost> boost;$/;"	m	class:cv::text::ERClassifierNM1	file:
boost	thirdparty/textDetect/erfilter.cpp	/^      Ptr<Boost> boost;$/;"	m	class:cv::text::ERClassifierNM2	file:
boostType	thirdparty/svm/precomp.hpp	/^        int boostType;$/;"	m	struct:cv::ml::BoostTreeParams
bottom1_a0	thirdparty/textDetect/erfilter.cpp	/^      float bottom1_a0;$/;"	m	struct:cv::text::line_estimates	file:
bottom1_a1	thirdparty/textDetect/erfilter.cpp	/^      float bottom1_a1;$/;"	m	struct:cv::text::line_estimates	file:
bottom2_a0	thirdparty/textDetect/erfilter.cpp	/^      float bottom2_a0;$/;"	m	struct:cv::text::line_estimates	file:
bottom2_a1	thirdparty/textDetect/erfilter.cpp	/^      float bottom2_a1;$/;"	m	struct:cv::text::line_estimates	file:
boundary_intensity_mean	thirdparty/textDetect/erfilter.cpp	/^      float boundary_intensity_mean;  \/\/\/< mean intensity of the boundary of the region$/;"	m	struct:cv::text::ERFeatures	file:
boundary_intensity_std	thirdparty/textDetect/erfilter.cpp	/^      float boundary_intensity_std;  \/\/\/< intensity standard deviation of the boundary of the region$/;"	m	struct:cv::text::ERFeatures	file:
broadcast_data	src/network/server_socket.cpp	/^void broadcast_data(const char *buf, size_t size)$/;"	f
buf	thirdparty/svm/corrected_svm.cpp	/^        vector<Qfloat> buf[2];$/;"	m	class:cv::ml::SVMImpl::Solver	file:
buf	thirdparty/xmlParser/xmlParser.h	/^    XMLSTR buf;$/;"	m	struct:ToXMLStringTool
buf	thirdparty/xmlParser/xmlParser.h	/^    void *buf;$/;"	m	struct:XMLParserBase64Tool
buflen	thirdparty/xmlParser/xmlParser.h	/^    int buflen;$/;"	m	struct:ToXMLStringTool
buflen	thirdparty/xmlParser/xmlParser.h	/^    int buflen;$/;"	m	struct:XMLParserBase64Tool
build_merge_info	thirdparty/textDetect/erfilter.cpp	/^    void MaxMeaningfulClustering::build_merge_info(double *Z, double *X, int N, int dim,$/;"	f	class:cv::text::MaxMeaningfulClustering
c	thirdparty/svm/precomp.hpp	/^            float c;$/;"	m	struct:cv::ml::DTreesImpl::WSplit
c	thirdparty/textDetect/erfilter.cpp	/^      Vec2i c;$/;"	m	struct:cv::text::region_triplet	file:
c	thirdparty/xmlParser/xmlParser.cpp	/^typedef struct { XMLCSTR s; int l; XMLCHAR c;} XMLCharacterEntity;$/;"	m	struct:__anon3	file:
c_str	include/easypr/util/program_options.h	/^  inline const char* c_str() const { return value_.c_str(); }$/;"	f	class:program_options::ParseItem
cache_size	thirdparty/svm/corrected_svm.cpp	/^        int cache_size;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
calc	thirdparty/svm/corrected_svm.cpp	/^    void calc( int vcount, int var_count, const float* vecs,$/;"	f	class:cv::ml::SVMKernelImpl
calcSafeRect	src/core/core_func.cpp	/^  bool calcSafeRect(const RotatedRect &roi_rect, const Mat &src,$/;"	f	namespace:easypr
calcSafeRect	src/core/core_func.cpp	/^  bool calcSafeRect(const RotatedRect &roi_rect, const int width, const int height,$/;"	f	namespace:easypr
calcVarImportance	thirdparty/svm/precomp.hpp	/^        bool calcVarImportance;$/;"	m	struct:cv::ml::RTreeParams
calc_chi2	thirdparty/svm/corrected_svm.cpp	/^    void calc_chi2( int vcount, int var_count, const float* vecs,$/;"	f	class:cv::ml::SVMKernelImpl
calc_intersec	thirdparty/svm/corrected_svm.cpp	/^    void calc_intersec( int vcount, int var_count, const float* vecs,$/;"	f	class:cv::ml::SVMKernelImpl
calc_linear	thirdparty/svm/corrected_svm.cpp	/^    void calc_linear( int vcount, int var_count, const float* vecs,$/;"	f	class:cv::ml::SVMKernelImpl
calc_non_rbf_base	thirdparty/svm/corrected_svm.cpp	/^    void calc_non_rbf_base( int vcount, int var_count, const float* vecs,$/;"	f	class:cv::ml::SVMKernelImpl
calc_poly	thirdparty/svm/corrected_svm.cpp	/^    void calc_poly( int vcount, int var_count, const float* vecs,$/;"	f	class:cv::ml::SVMKernelImpl
calc_rbf	thirdparty/svm/corrected_svm.cpp	/^    void calc_rbf( int vcount, int var_count, const float* vecs,$/;"	f	class:cv::ml::SVMKernelImpl
calc_rho	thirdparty/svm/corrected_svm.cpp	/^        void calc_rho( double& rho, double& r )$/;"	f	class:cv::ml::SVMImpl::Solver
calc_rho_func	thirdparty/svm/corrected_svm.cpp	/^        CalcRho calc_rho_func;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
calc_rho_nu_svm	thirdparty/svm/corrected_svm.cpp	/^        void calc_rho_nu_svm( double& rho, double& r )$/;"	f	class:cv::ml::SVMImpl::Solver
calc_sigmoid	thirdparty/svm/corrected_svm.cpp	/^    void calc_sigmoid( int vcount, int var_count, const float* vecs,$/;"	f	class:cv::ml::SVMKernelImpl
catMap	thirdparty/svm/precomp.hpp	/^        vector<int> catMap;$/;"	m	class:cv::ml::DTreesImpl
catOfs	thirdparty/svm/precomp.hpp	/^        vector<Vec2i> catOfs;$/;"	m	class:cv::ml::DTreesImpl
cat_responses	thirdparty/svm/precomp.hpp	/^            vector<int> cat_responses;$/;"	m	struct:cv::ml::DTreesImpl::WorkData
cbEndTag	thirdparty/xmlParser/xmlParser.cpp	/^    int                    cbEndTag;$/;"	m	struct:XML	file:
cbNewElement	thirdparty/xmlParser/xmlParser.cpp	/^    int                    cbNewElement;$/;"	m	struct:XML	file:
center	thirdparty/textDetect/erfilter.cpp	/^      Point center;$/;"	m	struct:cv::text::ERFeatures	file:
central_moments	thirdparty/textDetect/erfilter.hpp	/^    double central_moments[3]; \/\/!< order 2 central moments to construct the covariance matrix$/;"	m	struct:cv::text::ERStat
charFeatures	src/core/feature.cpp	/^Mat charFeatures(Mat in, int sizeData) {$/;"	f	namespace:easypr
charFeatures2	src/core/feature.cpp	/^Mat charFeatures2(Mat in, int sizeData) {$/;"	f	namespace:easypr
charProjectFeatures	src/core/feature.cpp	/^Mat charProjectFeatures(const Mat& in, int sizeData) {$/;"	f	namespace:easypr
char_encoding_Big5	thirdparty/xmlParser/xmlParser.h	/^        char_encoding_Big5=5,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_GB2312	thirdparty/xmlParser/xmlParser.h	/^        char_encoding_GB2312=4,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_GBK	thirdparty/xmlParser/xmlParser.h	/^        char_encoding_GBK=6     \/\/ this is actually the same as Big5$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_ShiftJIS	thirdparty/xmlParser/xmlParser.h	/^        char_encoding_ShiftJIS=3,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_UTF8	thirdparty/xmlParser/xmlParser.h	/^        char_encoding_UTF8=1,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_error	thirdparty/xmlParser/xmlParser.h	/^        char_encoding_error=0,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_legacy	thirdparty/xmlParser/xmlParser.h	/^        char_encoding_legacy=2,$/;"	e	enum:XMLNode::XMLCharEncoding
characterEncoding	thirdparty/xmlParser/xmlParser.cpp	/^static XMLNode::XMLCharEncoding characterEncoding=XMLNode::char_encoding_UTF8;$/;"	v	file:
charmemset	thirdparty/xmlParser/xmlParser.cpp	/^static inline void charmemset(XMLSTR dest,XMLCHAR c,int l) { while (l--) *(dest++)=c; }$/;"	f	file:
charsRecognise	src/core/chars_recognise.cpp	/^int CCharsRecognise::charsRecognise(CPlate& plate, std::string& plateLicense) {$/;"	f	class:easypr::CCharsRecognise
charsRecognise	src/core/chars_recognise.cpp	/^int CCharsRecognise::charsRecognise(Mat plate, std::string& plateLicense) {$/;"	f	class:easypr::CCharsRecognise
charsSegment	src/core/chars_segment.cpp	/^int CCharsSegment::charsSegment(Mat input, vector<Mat>& resultVec, Color color) {$/;"	f	class:easypr::CCharsSegment
charsSegmentUsingMSER	src/core/chars_segment.cpp	/^int CCharsSegment::charsSegmentUsingMSER(Mat input, vector<Mat>& resultVec, vector<Mat>& grayChars, Color color) {$/;"	f	class:easypr::CCharsSegment
charsSegmentUsingOSTU	src/core/chars_segment.cpp	/^int CCharsSegment::charsSegmentUsingOSTU(Mat input, vector<Mat>& resultVec, vector<Mat>& grayChars, Color color) {$/;"	f	class:easypr::CCharsSegment
chars_folder_	include/easypr/train/annCh_train.h	/^  const char* chars_folder_;$/;"	m	class:easypr::AnnChTrain
chars_folder_	include/easypr/train/ann_train.h	/^  const char* chars_folder_;$/;"	m	class:easypr::AnnTrain
checkAndCapture	thirdparty/mser/mser2.cpp	/^      void checkAndCapture(WParams& wp)$/;"	f	struct:cv::MSER_Impl2::CompHistory
checkParamGrid	thirdparty/svm/corrected_svm.cpp	/^static void checkParamGrid(const ParamGrid& pg)$/;"	f	namespace:cv::ml
checkParams	thirdparty/svm/corrected_svm.cpp	/^    void checkParams()$/;"	f	class:cv::ml::SVMImpl
check_in	thirdparty/textDetect/erfilter.cpp	/^    void Minibox::check_in(vector<float> *p)$/;"	f	class:cv::text::Minibox
check_opencv_version	configure.py	/^def check_opencv_version():$/;"	f
checked	thirdparty/mser/mser2.cpp	/^      bool checked;$/;"	m	struct:cv::MSER_Impl2::CompHistory	file:
child	thirdparty/textDetect/erfilter.hpp	/^    ERStat* child;$/;"	m	struct:cv::text::ERStat
child	thirdparty/xmlParser/xmlParser.h	/^    XMLNode child;$/;"	m	struct:XMLNodeContents
child_	thirdparty/mser/mser2.cpp	/^      CompHistory* child_;$/;"	m	struct:cv::MSER_Impl2::CompHistory	file:
cityblock	thirdparty/textDetect/erfilter.cpp	/^      double cityblock(const int_fast32_t i, const int_fast32_t j) const$/;"	f	class:cv::text::dissimilarity	file:
classLabels	thirdparty/svm/precomp.hpp	/^        vector<int> classLabels;$/;"	m	class:cv::ml::DTreesImpl
classWeights	thirdparty/svm/corrected_svm.cpp	/^    Mat         classWeights;$/;"	m	struct:cv::ml::SvmParams	file:
class_idx	thirdparty/svm/precomp.hpp	/^            int class_idx;$/;"	m	struct:cv::ml::DTreesImpl::WNode
class_labels	thirdparty/svm/corrected_svm.cpp	/^    Mat class_labels;$/;"	m	class:cv::ml::SVMImpl	file:
classifier	thirdparty/textDetect/erfilter.cpp	/^      Ptr<ERFilter::Callback> classifier;$/;"	m	class:cv::text::ERFilterNM	file:
classify	src/core/chars_identify.cpp	/^int CharsIdentify::classify(cv::Mat f, float& maxVal, bool isChinses, bool isAlphabet){$/;"	f	class:easypr::CharsIdentify
classify	src/core/chars_identify.cpp	/^void CharsIdentify::classify(cv::Mat featureRows, std::vector<int>& out_maxIndexs,$/;"	f	class:easypr::CharsIdentify
classify	src/core/chars_identify.cpp	/^void CharsIdentify::classify(std::vector<CCharacter>& charVec){$/;"	f	class:easypr::CharsIdentify
classifyChinese	src/core/chars_identify.cpp	/^void CharsIdentify::classifyChinese(std::vector<CCharacter>& charVec){$/;"	f	class:easypr::CharsIdentify
classifyChineseGray	src/core/chars_identify.cpp	/^void CharsIdentify::classifyChineseGray(std::vector<CCharacter>& charVec){$/;"	f	class:easypr::CharsIdentify
cleanup	src/util/program_options.cpp	/^void Parser::cleanup() {$/;"	f	class:program_options::Parser
clear	src/util/kv.cpp	/^void Kv::clear() {$/;"	f	class:easypr::Kv
clear	thirdparty/svm/corrected_svm.cpp	/^        void clear()$/;"	f	class:cv::ml::SVMImpl::Solver
clear	thirdparty/svm/corrected_svm.cpp	/^    void clear()$/;"	f	class:cv::ml::SVMImpl
clear	thirdparty/xmlParser/xmlParser.h	/^    XMLClear clear;$/;"	m	struct:XMLNodeContents
clearBorder	src/core/core_func.cpp	/^void clearBorder(const Mat &img, Rect& cropRect) {$/;"	f	namespace:easypr
clearLiuDing	src/core/core_func.cpp	/^  bool clearLiuDing(Mat &img) {$/;"	f	namespace:easypr
clearLiuDing	src/core/core_func.cpp	/^  void clearLiuDing(Mat mask, int &top, int &bottom) {$/;"	f	namespace:easypr
clearLiuDingAndBorder	src/core/chars_segment.cpp	/^Mat clearLiuDingAndBorder(const Mat& grayImage, Color color) {$/;"	f	namespace:easypr
clearLiuDingOnly	src/core/core_func.cpp	/^  void clearLiuDingOnly(Mat &img) {$/;"	f	namespace:easypr
cli	configure.py	/^def cli():$/;"	f
cluster_result	thirdparty/textDetect/erfilter.cpp	/^      cluster_result(const int_fast32_t size) : Z(size)$/;"	f	class:cv::text::cluster_result
cluster_result	thirdparty/textDetect/erfilter.cpp	/^    class cluster_result {$/;"	c	namespace:cv::text	file:
cmp_lt_idx	thirdparty/svm/precomp.hpp	/^        cmp_lt_idx(const _Tp* _arr) : arr(_arr) {}$/;"	f	struct:cv::ml::cmp_lt_idx
cmp_lt_idx	thirdparty/svm/precomp.hpp	/^    template<typename _Tp> struct cmp_lt_idx$/;"	s	namespace:cv::ml
cmp_lt_ptr	thirdparty/svm/precomp.hpp	/^        cmp_lt_ptr() {}$/;"	f	struct:cv::ml::cmp_lt_ptr
cmp_lt_ptr	thirdparty/svm/precomp.hpp	/^    template<typename _Tp> struct cmp_lt_ptr$/;"	s	namespace:cv::ml
coef0	thirdparty/svm/corrected_svm.cpp	/^    double      coef0;$/;"	m	struct:cv::ml::SvmParams	file:
colorMatch	src/core/core_func.cpp	/^  Mat colorMatch(const Mat &src, Mat &match, const Color r,$/;"	f	namespace:easypr
colorSearch	src/core/plate_locate.cpp	/^int CPlateLocate::colorSearch(const Mat &src, const Color r, Mat &out,$/;"	f	class:easypr::CPlateLocate
combine	include/easypr/util/switch.hpp	/^  inline Switch& combine(const Switch& _switch) {$/;"	f	class:program_options::Switch
command_line_handler	test/main.cpp	/^void command_line_handler(int argc, const char* argv[]) {$/;"	f
command_line_handler	test/main2.cpp	/^void command_line_handler(int argc, const char* argv[]) {$/;"	f
compVarIdx	thirdparty/svm/precomp.hpp	/^        vector<int> compVarIdx;$/;"	m	class:cv::ml::DTreesImpl
compareCharRect	src/core/core_func.cpp	/^  bool compareCharRect(const CCharacter &character1, const CCharacter &character2) {$/;"	f	namespace:easypr
complexity	thirdparty/svm/precomp.hpp	/^            int complexity;$/;"	m	struct:cv::ml::DTreesImpl::WNode
computeIOU	src/core/core_func.cpp	/^  bool computeIOU(const Rect &rect1, const Rect &rect2, const float thresh, float &result) {$/;"	f	namespace:easypr
computeIOU	src/core/core_func.cpp	/^  bool computeIOU(const RotatedRect &rrect1, const RotatedRect &rrect2, const int width, const int height,$/;"	f	namespace:easypr
computeIOU	src/core/core_func.cpp	/^  float computeIOU(const Rect &rect1, const Rect &rect2) {$/;"	f	namespace:easypr
computeIOU	src/core/core_func.cpp	/^  float computeIOU(const RotatedRect &rrect1, const RotatedRect &rrect2, const int width, const int height) {$/;"	f	namespace:easypr
computeNMChannels	thirdparty/textDetect/erfilter.cpp	/^    void computeNMChannels(InputArray _src, CV_OUT OutputArrayOfArrays _channels, int _mode)$/;"	f	namespace:cv::text
configure	configure.py	/^def configure():$/;"	f
configure_demo	configure.py	/^def configure_demo(buffer):$/;"	f
configure_libeasypr	configure.py	/^def configure_libeasypr(buffer):$/;"	f
convex_hull_ratio	thirdparty/textDetect/erfilter.cpp	/^      double convex_hull_ratio;$/;"	m	struct:cv::text::ERFeatures	file:
convex_hull_ratio	thirdparty/textDetect/erfilter.hpp	/^    float convex_hull_ratio;$/;"	m	struct:cv::text::ERStat
convexities	thirdparty/textDetect/erfilter.cpp	/^      int convexities;$/;"	m	struct:cv::text::ERFeatures	file:
countOfBigValue	src/core/core_func.cpp	/^  float countOfBigValue(Mat &mat, int iValue) {$/;"	f	namespace:easypr
crc8	src/network/networkConfig.cpp	/^uint8_t crc8(uint8_t *data, uint8_t length)$/;"	f
create	thirdparty/mser/mser2.cpp	/^  Ptr<MSER2> MSER2::create(int _delta, int _min_area, int _max_area, bool useBetter,$/;"	f	class:cv::MSER2
create	thirdparty/svm/corrected_svm.cpp	/^Ptr<SVM> SVM::create()$/;"	f	class:cv::ml::SVM
createERFilterNM1	thirdparty/textDetect/erfilter.cpp	/^    Ptr<ERFilter> createERFilterNM1(const Ptr<ERFilter::Callback>& cb, int thresholdDelta,$/;"	f	namespace:cv::text
createERFilterNM2	thirdparty/textDetect/erfilter.cpp	/^    Ptr<ERFilter> createERFilterNM2(const Ptr<ERFilter::Callback>& cb, float minProbability)$/;"	f	namespace:cv::text
createXMLString	thirdparty/xmlParser/xmlParser.cpp	/^XMLSTR XMLNode::createXMLString(int nFormat, int *pnSize) const$/;"	f	class:XMLNode
createXMLTopNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::createXMLTopNode(XMLCSTR lpszName, char isDeclaration) { return XMLNode(NULL,stringDup(lpszName),isDeclaration); }$/;"	f	class:XMLNode
createXMLTopNode_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::createXMLTopNode_WOSD(XMLSTR lpszName, char isDeclaration) { return XMLNode(NULL,lpszName,isDeclaration); }$/;"	f	class:XMLNode
cropImg	src/train/create_data.cpp	/^  Mat cropImg(Mat src, int x, int y, int shift, int bk){$/;"	f	namespace:easypr
crossings	thirdparty/textDetect/erfilter.hpp	/^    std::deque<int> *crossings;\/\/!< horizontal crossings$/;"	m	struct:cv::text::ERStat
current_subroutine_	include/easypr/util/program_options.h	/^  std::string current_subroutine_;$/;"	m	class:program_options::Generator
cv	thirdparty/mser/mser2.cpp	/^namespace cv$/;"	n	file:
cv	thirdparty/mser/mser2.hpp	/^namespace cv$/;"	n
cv	thirdparty/svm/corrected_svm.cpp	/^namespace cv { namespace ml {$/;"	n	file:
cv	thirdparty/svm/precomp.hpp	/^namespace cv$/;"	n
cv	thirdparty/textDetect/erfilter.cpp	/^namespace cv$/;"	n	file:
cv	thirdparty/textDetect/erfilter.hpp	/^namespace cv$/;"	n
cvAlign	thirdparty/svm/precomp.hpp	/^static inline int cvAlign(int size, int align)$/;"	f
cvAlignPtr	thirdparty/svm/precomp.hpp	/^static inline void* cvAlignPtr(const void* ptr, int align = 32)$/;"	f
cvGetMatSize	thirdparty/svm/precomp.hpp	/^static inline cv::Size cvGetMatSize(const CvMat* mat)$/;"	f
cvLIB	include/easypr/version.h	6;"	d
cvLIB	include/easypr/version.h	8;"	d
cv_Tn	thirdparty/svm/precomp.hpp	/^            vector<double> cv_Tn;$/;"	m	struct:cv::ml::DTreesImpl::WorkData
cv_labels	thirdparty/svm/precomp.hpp	/^            vector<int> cv_labels;$/;"	m	struct:cv::ml::DTreesImpl::WorkData
cv_node_error	thirdparty/svm/precomp.hpp	/^            vector<double> cv_node_error;$/;"	m	struct:cv::ml::DTreesImpl::WorkData
cv_node_risk	thirdparty/svm/precomp.hpp	/^            vector<double> cv_node_risk;$/;"	m	struct:cv::ml::DTreesImpl::WorkData
d	thirdparty/xmlParser/xmlParser.h	/^      XMLNodeData *d;$/;"	m	struct:XMLNode
data	thirdparty/svm/precomp.hpp	/^            Ptr<TrainData> data;$/;"	m	struct:cv::ml::DTreesImpl::WorkData
dataInit	src/network/networkConfig.cpp	/^void dataInit(void)$/;"	f
data_	include/easypr/util/kv.h	/^  std::map<std::string, std::string> data_;$/;"	m	class:easypr::Kv
decision_func	thirdparty/svm/corrected_svm.cpp	/^    vector<DecisionFunc> decision_func;$/;"	m	class:cv::ml::SVMImpl	file:
decode	thirdparty/xmlParser/xmlParser.cpp	/^unsigned char *XMLParserBase64Tool::decode(XMLCSTR data, int *outlen, XMLError *xe)$/;"	f	class:XMLParserBase64Tool
decode	thirdparty/xmlParser/xmlParser.cpp	/^unsigned char XMLParserBase64Tool::decode(XMLCSTR data, unsigned char *buf, int len, XMLError *xe)$/;"	f	class:XMLParserBase64Tool
decodeSize	thirdparty/xmlParser/xmlParser.cpp	/^unsigned int XMLParserBase64Tool::decodeSize(XMLCSTR data,XMLError *xe)$/;"	f	class:XMLParserBase64Tool
deepCopy	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::deepCopy() const$/;"	f	class:XMLNode
defaultDir	thirdparty/svm/precomp.hpp	/^            int defaultDir;$/;"	m	struct:cv::ml::DTreesImpl::WNode
default_value	include/easypr/util/program_options.h	/^  std::string default_value;$/;"	m	class:program_options::Row
degree	thirdparty/svm/corrected_svm.cpp	/^    double      degree;$/;"	m	struct:cv::ml::SvmParams	file:
deleteAttribute	thirdparty/xmlParser/xmlParser.cpp	/^void XMLNode::deleteAttribute(XMLAttribute *a){ if (a) deleteAttribute(a->lpszName); }$/;"	f	class:XMLNode
deleteAttribute	thirdparty/xmlParser/xmlParser.cpp	/^void XMLNode::deleteAttribute(XMLCSTR lpszName)$/;"	f	class:XMLNode
deleteAttribute	thirdparty/xmlParser/xmlParser.cpp	/^void XMLNode::deleteAttribute(int i)$/;"	f	class:XMLNode
deleteClear	thirdparty/xmlParser/xmlParser.cpp	/^void XMLNode::deleteClear(XMLCSTR lpszValue) { deleteClear(indexClear(lpszValue)); }$/;"	f	class:XMLNode
deleteClear	thirdparty/xmlParser/xmlParser.cpp	/^void XMLNode::deleteClear(XMLClear *a) { if (a) deleteClear(a->lpszValue); }$/;"	f	class:XMLNode
deleteClear	thirdparty/xmlParser/xmlParser.cpp	/^void XMLNode::deleteClear(int i)$/;"	f	class:XMLNode
deleteERStatTree	thirdparty/textDetect/erfilter.cpp	/^    static void deleteERStatTree(ERStat* root) {$/;"	f	namespace:cv::text
deleteNodeContent	thirdparty/xmlParser/xmlParser.cpp	/^void XMLNode::deleteNodeContent()$/;"	f	class:XMLNode
deleteNotArea	src/core/plate_locate.cpp	/^void deleteNotArea(Mat &inmat, Color color = UNKNOWN) {$/;"	f	namespace:easypr
deleteText	thirdparty/xmlParser/xmlParser.cpp	/^void XMLNode::deleteText(XMLCSTR lpszValue) { deleteText(indexText(lpszValue)); }$/;"	f	class:XMLNode
deleteText	thirdparty/xmlParser/xmlParser.cpp	/^void XMLNode::deleteText(int i)$/;"	f	class:XMLNode
delta	thirdparty/mser/mser2.cpp	/^      int delta;$/;"	m	struct:cv::MSER_Impl2::Params	file:
demo	test/accuracy.hpp	/^  namespace demo {$/;"	n	namespace:easypr
demo	test/chars.hpp	/^namespace demo {$/;"	n	namespace:easypr
demo	test/config.hpp	/^  namespace demo {$/;"	n	namespace:easypr
demo	test/main.cpp	/^namespace demo {$/;"	n	namespace:easypr	file:
demo	test/main2.cpp	/^namespace demo {$/;"	n	namespace:easypr	file:
demo	test/plate.hpp	/^namespace demo {$/;"	n	namespace:easypr
demo	test/result.hpp	/^  namespace demo {$/;"	n	namespace:easypr
depth	thirdparty/svm/precomp.hpp	/^            int depth;$/;"	m	struct:cv::ml::DTreesImpl::WNode
desc	include/easypr/util/program_options.h	/^  inline std::string desc() const { return description; }$/;"	f	class:program_options::Row
desc	include/easypr/util/program_options.h	/^  inline void desc(const std::string& desc) { description = desc; }$/;"	f	class:program_options::Row
description	include/easypr/util/program_options.h	/^  std::string description;$/;"	m	class:program_options::Row
description_	include/easypr/util/program_options.h	/^  const char* description_;$/;"	m	class:program_options::Subroutine
deskew	src/core/plate_locate.cpp	/^int CPlateLocate::deskew(const Mat &src, const Mat &src_b,$/;"	f	class:easypr::CPlateLocate
detachFromParent	thirdparty/xmlParser/xmlParser.cpp	/^int XMLNode::detachFromParent(XMLNodeData *d)$/;"	f	class:XMLNode
detectRegions	thirdparty/mser/mser2.cpp	/^  void MSER_Impl2::detectRegions(InputArray _src, vector<vector<Point>>& msers, vector<Rect>& bboxes, int type)$/;"	f	class:cv::MSER_Impl2
detectRegions	thirdparty/mser/mser2.cpp	/^  void MSER_Impl2::detectRegions(InputArray _src, vector<vector<Point>>& msers_blue, vector<Rect>& bboxes_blue,$/;"	f	class:cv::MSER_Impl2
detectRegions	thirdparty/textDetect/erfilter.cpp	/^    void detectRegions(InputArray image, const Ptr<ERFilter>& er_filter1, const Ptr<ERFilter>& er_filter2, CV_OUT vector< vector<Point> >& regions)$/;"	f	namespace:cv::text
df_alpha	thirdparty/svm/corrected_svm.cpp	/^    vector<double> df_alpha;$/;"	m	class:cv::ml::SVMImpl	file:
df_index	thirdparty/svm/corrected_svm.cpp	/^    vector<int> df_index;$/;"	m	class:cv::ml::SVMImpl	file:
dim	thirdparty/textDetect/erfilter.cpp	/^      ptrdiff_t dim; \/\/ size_t saves many statis_cast<> in products$/;"	m	class:cv::text::dissimilarity	file:
dissimilarity	thirdparty/textDetect/erfilter.cpp	/^      dissimilarity(double * const _Xa, int _Num, int _dim,$/;"	f	class:cv::text::dissimilarity
dissimilarity	thirdparty/textDetect/erfilter.cpp	/^    class dissimilarity {$/;"	c	namespace:cv::text	file:
dist	thirdparty/textDetect/erfilter.cpp	/^      double dist;$/;"	m	struct:cv::text::node	file:
dist	thirdparty/textDetect/erfilter.cpp	/^      float dist;             \/\/ distance of the merge$/;"	m	struct:cv::text::HCluster	file:
dist_ext	thirdparty/textDetect/erfilter.cpp	/^      float dist_ext;         \/\/ distamce where this merge will merge with another$/;"	m	struct:cv::text::HCluster	file:
distanceLinesEstimates	thirdparty/textDetect/erfilter.cpp	/^    float distanceLinesEstimates(line_estimates &a, line_estimates &b)$/;"	f	namespace:cv::text
distfn	thirdparty/textDetect/erfilter.cpp	/^      double (dissimilarity::*distfn) (const int_fast32_t, const int_fast32_t) const;$/;"	m	class:cv::text::dissimilarity	file:
do_train	thirdparty/svm/corrected_svm.cpp	/^    bool do_train( const Mat& _samples, const Mat& _responses )$/;"	f	class:cv::ml::SVMImpl
done	include/easypr/util/switch.hpp	/^  inline void done() {$/;"	f	class:program_options::Switch
double_equal	thirdparty/textDetect/erfilter.cpp	/^    static int double_equal(double a, double b)$/;"	f	namespace:cv::text
doubly_linked_list	thirdparty/textDetect/erfilter.cpp	/^      doubly_linked_list(const int_fast32_t size) : succ(size + 1), pred(size + 1)$/;"	f	class:cv::text::doubly_linked_list
doubly_linked_list	thirdparty/textDetect/erfilter.cpp	/^    class doubly_linked_list {$/;"	c	namespace:cv::text	file:
dropWhiteSpace	thirdparty/xmlParser/xmlParser.cpp	/^static char guessWideCharChars=1, dropWhiteSpace=1, removeCommentsInMiddleOfText=1;$/;"	v	file:
eAttribEquals	thirdparty/xmlParser/xmlParser.cpp	/^    eAttribEquals,$/;"	e	enum:Attrib	file:
eAttribName	thirdparty/xmlParser/xmlParser.cpp	/^    eAttribName = 0,$/;"	e	enum:Attrib	file:
eAttribValue	thirdparty/xmlParser/xmlParser.cpp	/^    eAttribValue$/;"	e	enum:Attrib	file:
eInsideTag	thirdparty/xmlParser/xmlParser.cpp	/^    eInsideTag = 0,$/;"	e	enum:XMLStatus	file:
eNodeAttribute	thirdparty/xmlParser/xmlParser.h	/^    eNodeAttribute=1,$/;"	e	enum:XMLElementType
eNodeChild	thirdparty/xmlParser/xmlParser.h	/^    eNodeChild=0,$/;"	e	enum:XMLElementType
eNodeClear	thirdparty/xmlParser/xmlParser.h	/^    eNodeClear=3,$/;"	e	enum:XMLElementType
eNodeNULL	thirdparty/xmlParser/xmlParser.h	/^    eNodeNULL=4$/;"	e	enum:XMLElementType
eNodeText	thirdparty/xmlParser/xmlParser.h	/^    eNodeText=2,$/;"	e	enum:XMLElementType
eOutsideTag	thirdparty/xmlParser/xmlParser.cpp	/^    eOutsideTag$/;"	e	enum:XMLStatus	file:
eTokenClear	thirdparty/xmlParser/xmlParser.cpp	/^    eTokenClear,$/;"	e	enum:XMLTokenTypeTag	file:
eTokenCloseTag	thirdparty/xmlParser/xmlParser.cpp	/^    eTokenCloseTag,         \/* ">"            *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenDeclaration	thirdparty/xmlParser/xmlParser.cpp	/^    eTokenDeclaration,      \/* "<?"           *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenEquals	thirdparty/xmlParser/xmlParser.cpp	/^    eTokenEquals,           \/* "="            *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenError	thirdparty/xmlParser/xmlParser.cpp	/^    eTokenError$/;"	e	enum:XMLTokenTypeTag	file:
eTokenQuotedText	thirdparty/xmlParser/xmlParser.cpp	/^    eTokenQuotedText,$/;"	e	enum:XMLTokenTypeTag	file:
eTokenShortHandClose	thirdparty/xmlParser/xmlParser.cpp	/^    eTokenShortHandClose,   \/* "\/>"           *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenTagEnd	thirdparty/xmlParser/xmlParser.cpp	/^    eTokenTagEnd,           \/* "<\/"           *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenTagStart	thirdparty/xmlParser/xmlParser.cpp	/^    eTokenTagStart,         \/* "<"            *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenText	thirdparty/xmlParser/xmlParser.cpp	/^    eTokenText = 0,$/;"	e	enum:XMLTokenTypeTag	file:
eXMLErrorBase64DataSizeIsNotMultipleOf4	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorBase64DataSizeIsNotMultipleOf4,$/;"	e	enum:XMLError
eXMLErrorBase64DecodeBufferTooSmall	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorBase64DecodeBufferTooSmall$/;"	e	enum:XMLError
eXMLErrorBase64DecodeIllegalCharacter	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorBase64DecodeIllegalCharacter,$/;"	e	enum:XMLError
eXMLErrorBase64DecodeTruncatedData	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorBase64DecodeTruncatedData,$/;"	e	enum:XMLError
eXMLErrorCannotOpenWriteFile	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorCannotOpenWriteFile,$/;"	e	enum:XMLError
eXMLErrorCannotWriteFile	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorCannotWriteFile,$/;"	e	enum:XMLError
eXMLErrorCharConversionError	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorCharConversionError,$/;"	e	enum:XMLError
eXMLErrorCharacterCodeAbove255	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorCharacterCodeAbove255,$/;"	e	enum:XMLError
eXMLErrorEmpty	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorEmpty,$/;"	e	enum:XMLError
eXMLErrorFileNotFound	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorFileNotFound,$/;"	e	enum:XMLError
eXMLErrorFirstTagNotFound	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorFirstTagNotFound,$/;"	e	enum:XMLError
eXMLErrorMissingEndTag	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorMissingEndTag,$/;"	e	enum:XMLError
eXMLErrorMissingEndTagName	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorMissingEndTagName,$/;"	e	enum:XMLError
eXMLErrorMissingTagName	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorMissingTagName,$/;"	e	enum:XMLError
eXMLErrorNoElements	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorNoElements,$/;"	e	enum:XMLError
eXMLErrorNoXMLTagFound	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorNoXMLTagFound,$/;"	e	enum:XMLError
eXMLErrorNone	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorNone = 0,$/;"	e	enum:XMLError
eXMLErrorUnexpectedToken	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorUnexpectedToken,$/;"	e	enum:XMLError
eXMLErrorUnknownCharacterEntity	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorUnknownCharacterEntity,$/;"	e	enum:XMLError
eXMLErrorUnmatchedEndClearTag	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorUnmatchedEndClearTag,$/;"	e	enum:XMLError
eXMLErrorUnmatchedEndTag	thirdparty/xmlParser/xmlParser.h	/^    eXMLErrorUnmatchedEndTag,$/;"	e	enum:XMLError
easypr	include/easypr/api.hpp	/^namespace easypr {$/;"	n
easypr	include/easypr/config.h	/^namespace easypr {$/;"	n
easypr	include/easypr/core/character.hpp	/^namespace easypr {$/;"	n
easypr	include/easypr/core/chars_identify.h	/^namespace easypr {$/;"	n
easypr	include/easypr/core/chars_recognise.h	/^namespace easypr {$/;"	n
easypr	include/easypr/core/chars_segment.h	/^namespace easypr {$/;"	n
easypr	include/easypr/core/core_func.h	/^namespace easypr {$/;"	n
easypr	include/easypr/core/feature.h	/^namespace easypr {$/;"	n
easypr	include/easypr/core/params.h	/^namespace easypr {$/;"	n
easypr	include/easypr/core/plate.hpp	/^namespace easypr {$/;"	n
easypr	include/easypr/core/plate_detect.h	/^namespace easypr {$/;"	n
easypr	include/easypr/core/plate_judge.h	/^namespace easypr {$/;"	n
easypr	include/easypr/core/plate_locate.h	/^namespace easypr {$/;"	n
easypr	include/easypr/core/plate_recognize.h	/^namespace easypr {$/;"	n
easypr	include/easypr/train/annCh_train.h	/^namespace easypr {$/;"	n
easypr	include/easypr/train/ann_train.h	/^namespace easypr {$/;"	n
easypr	include/easypr/train/create_data.h	/^namespace easypr {$/;"	n
easypr	include/easypr/train/svm_train.h	/^namespace easypr {$/;"	n
easypr	include/easypr/train/train.h	/^namespace easypr {$/;"	n
easypr	include/easypr/util/kv.h	/^namespace easypr {$/;"	n
easypr	include/easypr/util/util.h	/^namespace easypr {$/;"	n
easypr	src/core/chars_identify.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/core/chars_recognise.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/core/chars_segment.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/core/core_func.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/core/feature.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/core/params.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/core/plate_detect.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/core/plate_judge.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/core/plate_locate.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/core/plate_recognize.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/train/annCh_train.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/train/ann_train.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/train/create_data.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/train/svm_train.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/train/train.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/util/kv.cpp	/^namespace easypr {$/;"	n	file:
easypr	src/util/util.cpp	/^namespace easypr {$/;"	n	file:
easypr	test/accuracy.hpp	/^namespace easypr {$/;"	n
easypr	test/chars.hpp	/^namespace easypr {$/;"	n
easypr	test/config.hpp	/^namespace easypr {$/;"	n
easypr	test/main.cpp	/^namespace easypr {$/;"	n	file:
easypr	test/main2.cpp	/^namespace easypr {$/;"	n	file:
easypr	test/plate.hpp	/^namespace easypr {$/;"	n
easypr	test/result.hpp	/^namespace easypr {$/;"	n
edgeBlurSize	thirdparty/mser/mser2.cpp	/^      int edgeBlurSize;$/;"	m	struct:cv::MSER_Impl2::Params	file:
edge_begin	thirdparty/textDetect/erfilter.cpp	/^      vector<float> edge_begin;$/;"	m	class:cv::text::Minibox	file:
edge_comp	thirdparty/textDetect/erfilter.cpp	/^    static bool edge_comp(Vec4f i, Vec4f j)$/;"	f	namespace:cv::text
edge_end	thirdparty/textDetect/erfilter.cpp	/^      vector<float> edge_end;$/;"	m	class:cv::text::Minibox	file:
elbp	thirdparty/LBP/lbp.cpp	/^Mat libfacerec::elbp(InputArray src, int radius, int neighbors) {$/;"	f	class:libfacerec
elbp	thirdparty/LBP/lbp.cpp	/^void libfacerec::elbp(InputArray src, OutputArray dst, int radius, int neighbors) {$/;"	f	class:libfacerec
elbp0	thirdparty/LBP/lbp.cpp	/^    inline void elbp0(const Mat& src, Mat& dst, int radius, int neighbors) {$/;"	f	namespace:libfacerec
elbp0	thirdparty/LBP/lbp.cpp	/^void libfacerec::elbp0(const Mat& src, Mat& dst, int radius, int neighbors) {$/;"	f	class:libfacerec
elbp_	thirdparty/LBP/lbp.cpp	/^    inline void elbp_(InputArray _src, OutputArray _dst, int radius, int neighbors) {$/;"	f	namespace:libfacerec
elements	thirdparty/textDetect/erfilter.cpp	/^      vector<int> elements;   \/\/ elements (contour ID)$/;"	m	struct:cv::text::HCluster	file:
emptyNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode       XMLNode::emptyNode       (     )       { return XMLNode::emptyXMLNode; }$/;"	f	class:XMLNode
emptyTheNode	thirdparty/xmlParser/xmlParser.cpp	/^void XMLNode::emptyTheNode(char force)$/;"	f	class:XMLNode
emptyXMLAttribute	thirdparty/xmlParser/xmlParser.cpp	/^XMLAttribute XMLNode::emptyXMLAttribute={ NULL, NULL};$/;"	m	class:XMLNode	file:
emptyXMLAttribute	thirdparty/xmlParser/xmlParser.h	/^    static XMLAttribute emptyXMLAttribute;$/;"	m	struct:XMLNode
emptyXMLClear	thirdparty/xmlParser/xmlParser.cpp	/^XMLClear XMLNode::emptyXMLClear={ NULL, NULL, NULL};$/;"	m	class:XMLNode	file:
emptyXMLClear	thirdparty/xmlParser/xmlParser.h	/^    static XMLClear emptyXMLClear;$/;"	m	struct:XMLNode
emptyXMLNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::emptyXMLNode;$/;"	m	class:XMLNode	file:
emptyXMLNode	thirdparty/xmlParser/xmlParser.h	/^    static XMLNode emptyXMLNode;$/;"	m	struct:XMLNode
encode	thirdparty/xmlParser/xmlParser.cpp	/^XMLSTR XMLParserBase64Tool::encode(unsigned char *inbuf, unsigned int inlen, char formatted)$/;"	f	class:XMLParserBase64Tool
encodeLength	thirdparty/xmlParser/xmlParser.cpp	/^int XMLParserBase64Tool::encodeLength(int inlen, char formatted)$/;"	f	class:XMLParserBase64Tool
end	include/easypr/util/program_options.h	/^  inline Usages::iterator end() { return usages_.end(); }$/;"	f	class:program_options::Subroutine
enumContents	thirdparty/xmlParser/xmlParser.cpp	/^XMLNodeContents XMLNode::enumContents(int i) const$/;"	f	class:XMLNode
eps	thirdparty/svm/corrected_svm.cpp	/^        double eps;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
erGrouping	thirdparty/textDetect/erfilter.cpp	/^    void erGrouping(InputArray image, InputArray channel, vector<vector<Point> > contours, CV_OUT std::vector<Rect> &groups_rects, int method, const String& filename, float minProbability)$/;"	f	namespace:cv::text
erGrouping	thirdparty/textDetect/erfilter.cpp	/^    void erGrouping(InputArray image, InputArrayOfArrays channels, vector<vector<ERStat> > &regions, vector<vector<Vec2i> > &groups, vector<Rect> &groups_rects, int method, const string& filename, float minProbability)$/;"	f	namespace:cv::text
erGroupingGK	thirdparty/textDetect/erfilter.cpp	/^    static void erGroupingGK(InputArray _image, InputArrayOfArrays _src, vector<vector<ERStat> > &regions, vector<vector<Vec2i> > &groups, vector<Rect> &text_boxes, const string& filename, float minProbability)$/;"	f	namespace:cv::text
erGroupingNM	thirdparty/textDetect/erfilter.cpp	/^    void erGroupingNM(InputArray _img, InputArrayOfArrays _src, vector< vector<ERStat> >& regions,$/;"	f	namespace:cv::text
erGrouping_Modes	thirdparty/textDetect/erfilter.hpp	/^enum erGrouping_Modes {$/;"	g	namespace:cv::text
er_add_pixel	thirdparty/textDetect/erfilter.cpp	/^    void ERFilterNM::er_add_pixel(ERStat *parent, int x, int y, int non_border_neighbours,$/;"	f	class:cv::text::ERFilterNM
er_merge	thirdparty/textDetect/erfilter.cpp	/^    void ERFilterNM::er_merge(ERStat *parent, ERStat *child)$/;"	f	class:cv::text::ERFilterNM
er_save	thirdparty/textDetect/erfilter.cpp	/^    ERStat* ERFilterNM::er_save(ERStat *er, ERStat *parent, ERStat *prev)$/;"	f	class:cv::text::ERFilterNM
er_tree_extract	thirdparty/textDetect/erfilter.cpp	/^    void ERFilterNM::er_tree_extract(InputArray image)$/;"	f	class:cv::text::ERFilterNM
er_tree_filter	thirdparty/textDetect/erfilter.cpp	/^    ERStat* ERFilterNM::er_tree_filter(InputArray image, ERStat * stat, ERStat *parent, ERStat *prev)$/;"	f	class:cv::text::ERFilterNM
er_tree_nonmax_suppression	thirdparty/textDetect/erfilter.cpp	/^    ERStat* ERFilterNM::er_tree_nonmax_suppression(ERStat * stat, ERStat *parent, ERStat *prev)$/;"	f	class:cv::text::ERFilterNM
error	thirdparty/xmlParser/xmlParser.cpp	/^    enum XMLError          error;$/;"	m	struct:XML	typeref:enum:XML::XMLError	file:
error	thirdparty/xmlParser/xmlParser.h	/^    enum XMLError error;$/;"	m	struct:XMLResults	typeref:enum:XMLResults::XMLError
estimates	thirdparty/textDetect/erfilter.cpp	/^      line_estimates estimates;$/;"	m	struct:cv::text::region_triplet	file:
etype	thirdparty/xmlParser/xmlParser.h	/^    enum XMLElementType etype;$/;"	m	struct:XMLNodeContents	typeref:enum:XMLNodeContents::XMLElementType
euler	thirdparty/textDetect/erfilter.hpp	/^    int euler;                 \/\/!< euler number$/;"	m	struct:cv::text::ERStat
eval	thirdparty/textDetect/erfilter.cpp	/^      double eval(const ERStat& s) { if (s.area == 0) return (double)0.0; return (double)1.0; }$/;"	f	class:cv::text::ERDummyClassifier
eval	thirdparty/textDetect/erfilter.cpp	/^    double ERClassifierNM1::eval(const ERStat& stat)$/;"	f	class:cv::text::ERClassifierNM1
eval	thirdparty/textDetect/erfilter.cpp	/^    double ERClassifierNM2::eval(const ERStat& stat)$/;"	f	class:cv::text::ERClassifierNM2
exactMemory	thirdparty/xmlParser/xmlParser.cpp	/^void XMLNode::exactMemory(XMLNodeData *d)$/;"	f	class:XMLNode
extractFeature	include/easypr/core/chars_identify.h	/^  annCallback extractFeature;$/;"	m	class:easypr::CharsIdentify
extractFeature	include/easypr/core/plate_judge.h	/^  svmCallback extractFeature;$/;"	m	class:easypr::PlateJudge
extractFeature	include/easypr/train/annCh_train.h	/^  annCallback extractFeature;$/;"	m	class:easypr::AnnChTrain
extractFeature	include/easypr/train/svm_train.h	/^  svmCallback extractFeature;$/;"	m	class:easypr::SvmTrain
extract_features	thirdparty/textDetect/erfilter.cpp	/^    float extract_features(Mat &grey, Mat& channel, vector<ERStat> &regions, vector<ERFeatures> &features)$/;"	f	namespace:cv::text
features	build/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
file	include/easypr/train/svm_train.h	/^    std::string file;$/;"	m	struct:easypr::SvmTrain::__anon11
findPosition	thirdparty/xmlParser/xmlParser.cpp	/^XMLElementPosition XMLNode::findPosition(XMLNodeData *d, int index, XMLElementType xxtype)$/;"	f	class:XMLNode
find_vertex	thirdparty/textDetect/erfilter.cpp	/^    static int find_vertex(vector<vector<Point> > &forest, Point &p)$/;"	f	namespace:cv::text
first_line_	include/easypr/util/program_options.h	/^  const char* first_line_;$/;"	m	class:program_options::Subroutine
fitLine	thirdparty/textDetect/erfilter.cpp	/^    void fitLine(Point p1, Point p2, float &a0, float &a1)$/;"	f	namespace:cv::text
fitLineEstimates	thirdparty/textDetect/erfilter.cpp	/^    bool fitLineEstimates(vector< vector<ERStat> > &regions, region_triplet &triplet)$/;"	f	namespace:cv::text
fitLineLMS	thirdparty/textDetect/erfilter.cpp	/^    float fitLineLMS(Point p1, Point p2, Point p3, float &a0, float &a1)$/;"	f	namespace:cv::text
fitLineOLS	thirdparty/textDetect/erfilter.cpp	/^    void fitLineOLS(Point p1, Point p2, Point p3, float &a0, float &a1)$/;"	f	namespace:cv::text
found	include/easypr/util/switch.hpp	/^  Switch& found(const Ty& _case, const Scope& callback) {$/;"	f	class:program_options::Switch
free	thirdparty/textDetect/erfilter.cpp	/^      void free() {$/;"	f	class:cv::text::auto_array_ptr
freeBuffer	thirdparty/xmlParser/xmlParser.cpp	/^void ToXMLStringTool::freeBuffer(){ if (buf) free(buf); buf=NULL; buflen=0; }$/;"	f	class:ToXMLStringTool
freeBuffer	thirdparty/xmlParser/xmlParser.cpp	/^void XMLParserBase64Tool::freeBuffer(){ if (buf) free(buf); buf=NULL; buflen=0; }$/;"	f	class:XMLParserBase64Tool
freeXMLString	thirdparty/xmlParser/xmlParser.cpp	/^void freeXMLString(XMLSTR t){if(t)free(t);}$/;"	f
fromXMLString	thirdparty/xmlParser/xmlParser.cpp	/^XMLSTR fromXMLString(XMLCSTR s, int lo, XML *pXML)$/;"	f
gamma	thirdparty/svm/corrected_svm.cpp	/^    double      gamma;$/;"	m	struct:cv::ml::SvmParams	file:
generateSyntheticImage	src/train/create_data.cpp	/^  Mat generateSyntheticImage(const Mat& image, int use_swap) {$/;"	f	namespace:easypr
generate_dendrogram	thirdparty/textDetect/erfilter.cpp	/^    static void generate_dendrogram(double * const Z, cluster_result & Z2, const int_fast32_t N)$/;"	f	namespace:cv::text
get	src/util/kv.cpp	/^std::string Kv::get(const std::string &key) {$/;"	f	class:easypr::Kv
get	src/util/program_options.cpp	/^ParseItem* Parser::get(const std::string& key) {$/;"	f	class:program_options::Parser
getAngleABC	thirdparty/textDetect/erfilter.cpp	/^    static int getAngleABC(Point a, Point b, Point c)$/;"	f	namespace:cv::text
getAttribute	thirdparty/xmlParser/xmlParser.cpp	/^XMLAttribute XMLNode::getAttribute     (int i) const { if ((!d)||(i>=d->nAttribute)) return emptyXMLAttribute; return d->pAttribute[i]; }$/;"	f	class:XMLNode
getAttribute	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR XMLNode::getAttribute(XMLCSTR lpszAttrib, int *j) const$/;"	f	class:XMLNode
getAttribute	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR XMLNode::getAttribute(XMLCSTR name, int j) const$/;"	f	class:XMLNode
getAttributeName	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR      XMLNode::getAttributeName (int i) const { if ((!d)||(i>=d->nAttribute)) return NULL;              return d->pAttribute[i].lpszName;  }$/;"	f	class:XMLNode
getAttributeValue	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR      XMLNode::getAttributeValue(int i) const { if ((!d)||(i>=d->nAttribute)) return NULL;              return d->pAttribute[i].lpszValue; }$/;"	f	class:XMLNode
getAvgSeconds	test/result.hpp	/^      inline float getAvgSeconds() const { return m_avgSeconds; }$/;"	f	class:easypr::demo::Result
getBluePercent	include/easypr/core/chars_recognise.h	/^  inline float getBluePercent() const {$/;"	f	class:easypr::CCharsRecognise
getBluePercent	include/easypr/core/chars_segment.h	/^  inline float getBluePercent() const { return m_BluePercent; }$/;"	f	class:easypr::CCharsSegment
getBoderColor	src/train/create_data.cpp	/^  int getBoderColor(Mat img) {$/;"	f	namespace:easypr
getCVFolds	thirdparty/svm/precomp.hpp	/^        inline int getCVFolds() const { return CVFolds; }$/;"	f	struct:cv::ml::TreeParams
getCatCount	thirdparty/svm/precomp.hpp	/^        int getCatCount(int vi) const { return catOfs[vi][1] - catOfs[vi][0]; }$/;"	f	class:cv::ml::DTreesImpl
getCenterPoint	include/easypr/core/character.hpp	/^    inline Point getCenterPoint() const { return m_center; }$/;"	f	class:easypr::CCharacter
getCharacterGrayMat	include/easypr/core/character.hpp	/^    inline Mat getCharacterGrayMat() const { return m_characterGrayMat; }$/;"	f	class:easypr::CCharacter
getCharacterMat	include/easypr/core/character.hpp	/^    inline Mat getCharacterMat() const { return m_characterMat; }$/;"	f	class:easypr::CCharacter
getCharacterPos	include/easypr/core/character.hpp	/^    inline Rect getCharacterPos() const { return m_characterPos; }$/;"	f	class:easypr::CCharacter
getCharacterScore	include/easypr/core/character.hpp	/^    inline double getCharacterScore() const { return m_score; }$/;"	f	class:easypr::CCharacter
getCharacterStr	include/easypr/core/character.hpp	/^    inline String getCharacterStr() const { return m_characterStr; }$/;"	f	class:easypr::CCharacter
getChildNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode      XMLNode::getChildNode     (int i) const { if ((!d)||(i>=d->nChild    )) return emptyXMLNode;      return d->pChild[i];     }$/;"	f	class:XMLNode
getChildNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::getChildNode(XMLCSTR name, int *j) const$/;"	f	class:XMLNode
getChildNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::getChildNode(XMLCSTR name, int j) const$/;"	f	class:XMLNode
getChildNodeByPath	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::getChildNodeByPath(XMLCSTR _path, char createMissing, XMLCHAR sep)$/;"	f	class:XMLNode
getChildNodeByPathNonConst	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::getChildNodeByPathNonConst(XMLSTR path, char createIfMissing, XMLCHAR sep)$/;"	f	class:XMLNode
getChildNodeWithAttribute	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::getChildNodeWithAttribute(XMLCSTR name,XMLCSTR attributeName,XMLCSTR attributeValue, int *k) const$/;"	f	class:XMLNode
getChineseKey	include/easypr/core/plate.hpp	/^    inline String getChineseKey() const { return m_chineseKey; }$/;"	f	class:easypr::CPlate
getChineseMat	include/easypr/core/plate.hpp	/^    inline Mat getChineseMat() const { return m_chineseMat; }$/;"	f	class:easypr::CPlate
getChinesePreciese	test/result.hpp	/^      inline float getChinesePreciese() const { return m_chinesePrecise; }$/;"	f	class:easypr::demo::Result
getClear	thirdparty/xmlParser/xmlParser.cpp	/^XMLClear     XMLNode::getClear         (int i) const { if ((!d)||(i>=d->nClear    )) return emptyXMLClear;     return d->pClear[i];     }$/;"	f	class:XMLNode
getColorFeatures	src/core/feature.cpp	/^void getColorFeatures(const Mat& src, Mat& features) {$/;"	f	namespace:easypr
getCopyOfMserCharacters	include/easypr/core/plate.hpp	/^    inline std::vector<CCharacter> getCopyOfMserCharacters() { return m_mserCharVec; }$/;"	f	class:easypr::CPlate
getCopyOfReutCharacters	include/easypr/core/plate.hpp	/^    inline std::vector<CCharacter> getCopyOfReutCharacters() { return m_reutCharVec; }$/;"	f	class:easypr::CPlate
getDebug	include/easypr/core/chars_segment.h	/^  inline int getDebug() { return m_debug; }$/;"	f	class:easypr::CCharsSegment
getDebug	include/easypr/core/plate_locate.h	/^  inline bool getDebug() { return m_debug; }$/;"	f	class:easypr::CPlateLocate
getDecisionFunction	thirdparty/svm/corrected_svm.cpp	/^    double getDecisionFunction(int i, OutputArray _alpha, OutputArray _svidx ) const$/;"	f	class:cv::ml::SVMImpl
getDefaultGrid	thirdparty/svm/corrected_svm.cpp	/^ParamGrid SVM::getDefaultGrid( int param_id )$/;"	f	class:cv::ml::SVM
getDefaultName	thirdparty/svm/corrected_svm.cpp	/^    String getDefaultName() const$/;"	f	class:cv::ml::SVMImpl
getDefaultName	thirdparty/svm/precomp.hpp	/^        String getDefaultName() const { return "opencv_ml_dtree"; }$/;"	f	class:cv::ml::DTreesImpl
getDelta	thirdparty/mser/mser2.cpp	/^    int getDelta() const { return params.delta; }$/;"	f	class:cv::MSER_Impl2
getDetectFscore	test/result.hpp	/^      inline float getDetectFscore() const { return m_detectFscore; }$/;"	f	class:easypr::demo::Result
getDetectPrecise	test/result.hpp	/^      inline float getDetectPrecise() const { return m_detectPrecise; }$/;"	f	class:easypr::demo::Result
getDetectRate	test/result.hpp	/^      inline float getDetectRate() const { return m_detectRate; }$/;"	f	class:easypr::demo::Result
getDetectRecall	test/result.hpp	/^      inline float getDetectRecall() const { return m_detectRecall; }$/;"	f	class:easypr::demo::Result
getDetectShow	include/easypr/core/plate_detect.h	/^  inline bool getDetectShow() const { return m_showDetect; }$/;"	f	class:easypr::CPlateDetect
getDir	thirdparty/mser/mser2.cpp	/^      int getDir() const { return (int)((unsigned)val >> DIR_SHIFT); }$/;"	f	struct:cv::MSER_Impl2::Pixel
getError	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR XMLNode::getError(XMLError xerror)$/;"	f	class:XMLNode
getFileName	src/util/util.cpp	/^std::string Utils::getFileName(const std::string &path,$/;"	f	class:easypr::Utils
getFiles	src/util/util.cpp	/^std::vector<std::string> Utils::getFiles(const std::string &folder,$/;"	f	class:easypr::Utils
getGaussianBlurSize	include/easypr/core/plate_detect.h	/^  inline int getGaussianBlurSize() const {$/;"	f	class:easypr::CPlateDetect
getGaussianBlurSize	include/easypr/core/plate_locate.h	/^  inline int getGaussianBlurSize() const { return m_GaussianBlurSize; }$/;"	f	class:easypr::CPlateLocate
getGray	thirdparty/mser/mser2.cpp	/^      int getGray(const Pixel* ptr0, const uchar* imgptr0, int mask) const$/;"	f	struct:cv::MSER_Impl2::Pixel
getGrayCharFeatures	src/core/feature.cpp	/^void getGrayCharFeatures(const Mat& grayChar, Mat& features) {$/;"	f	namespace:easypr
getGrayPlusLBP	src/core/feature.cpp	/^void getGrayPlusLBP(const Mat& grayChar, Mat& features)$/;"	f	namespace:easypr
getGrayPlusProject	src/core/feature.cpp	/^void getGrayPlusProject(const Mat& grayChar, Mat& features)$/;"	f	namespace:easypr
getGroundTruth	test/accuracy.hpp	/^    int getGroundTruth(map<string, vector<CPlate>>& xmlMap, const char* path) {$/;"	f	namespace:easypr::demo
getHOGFeatures	src/core/feature.cpp	/^void getHOGFeatures(const Mat& image, Mat& features) {$/;"	f	namespace:easypr
getHSVHistFeatures	src/core/feature.cpp	/^void getHSVHistFeatures(const Mat& image, Mat& features) {$/;"	f	namespace:easypr
getHistogram	src/core/feature.cpp	/^Mat getHistogram(Mat in) {$/;"	f	namespace:easypr
getHistogramFeatures	src/core/feature.cpp	/^void getHistogramFeatures(const Mat& image, Mat& features) {$/;"	f	namespace:easypr
getHistomPlusColoFeatures	src/core/feature.cpp	/^void getHistomPlusColoFeatures(const Mat& image, Mat& features) {$/;"	f	namespace:easypr
getIndex	include/easypr/core/character.hpp	/^    inline int getIndex() const { return m_index; }$/;"	f	class:easypr::CCharacter
getIsChinese	include/easypr/core/character.hpp	/^    inline bool getIsChinese() const { return m_isChinese; }$/;"	f	class:easypr::CCharacter
getIsLittle	include/easypr/core/character.hpp	/^    inline bool getIsLittle() const { return m_score < 0.5; }$/;"	f	class:easypr::CCharacter
getIsStrong	include/easypr/core/character.hpp	/^    inline bool getIsStrong() const { return m_score >= 0.9; }$/;"	f	class:easypr::CCharacter
getIsUpdate	include/easypr/core/params.h	/^    inline bool getIsUpdate() const { return m_isUpdate; }$/;"	f	class:easypr::CParams
getIsWeak	include/easypr/core/character.hpp	/^    inline bool getIsWeak() const { return m_score < 0.9 && m_score >= 0.5; }$/;"	f	class:easypr::CCharacter
getKernelType	thirdparty/svm/corrected_svm.cpp	/^    int getKernelType() const$/;"	f	class:cv::ml::SVMImpl
getLBPFeatures	src/core/feature.cpp	/^void getLBPFeatures(const Mat& image, Mat& features) {$/;"	f	namespace:easypr
getLBPplusHistFeatures	src/core/feature.cpp	/^void getLBPplusHistFeatures(const Mat& image, Mat& features) {$/;"	f	namespace:easypr
getMaxArea	thirdparty/mser/mser2.cpp	/^    int getMaxArea() const { return params.maxArea; }$/;"	f	class:cv::MSER_Impl2
getMaxCategories	thirdparty/svm/precomp.hpp	/^        inline int getMaxCategories() const { return maxCategories; }$/;"	f	struct:cv::ml::TreeParams
getMaxDepth	thirdparty/svm/precomp.hpp	/^        inline int getMaxDepth() const { return maxDepth; }$/;"	f	struct:cv::ml::TreeParams
getMaxPlates	include/easypr/core/plate_detect.h	/^  inline int getMaxPlates() const { return m_maxPlates; }$/;"	f	class:easypr::CPlateDetect
getMinArea	thirdparty/mser/mser2.cpp	/^    int getMinArea() const { return params.minArea; }$/;"	f	class:cv::MSER_Impl2
getMinSampleCount	thirdparty/svm/precomp.hpp	/^        inline int getMinSampleCount() const { return minSampleCount; }$/;"	f	struct:cv::ml::TreeParams
getMorphSizeHeight	include/easypr/core/plate_detect.h	/^  inline int getMorphSizeHeight() const {$/;"	f	class:easypr::CPlateDetect
getMorphSizeHeight	include/easypr/core/plate_locate.h	/^  inline int getMorphSizeHeight() const { return m_MorphSizeHeight; }$/;"	f	class:easypr::CPlateLocate
getMorphSizeWidth	include/easypr/core/plate_detect.h	/^  inline int getMorphSizeWidth() const {$/;"	f	class:easypr::CPlateDetect
getMorphSizeWidth	include/easypr/core/plate_locate.h	/^  inline int getMorphSizeWidth() const { return m_MorphSizeWidth; }$/;"	f	class:easypr::CPlateLocate
getName	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR XMLNode::getName() const { if (!d) return NULL; return d->lpszName;   }$/;"	f	class:XMLNode
getNearestIndex	src/core/chars_segment.cpp	/^int getNearestIndex(Point center, const vector<Point>& groundCenters) {$/;"	f	namespace:easypr
getNext	thirdparty/mser/mser2.cpp	/^      int getNext() const { return (val & NEXT_MASK); }$/;"	f	struct:cv::MSER_Impl2::Pixel
getNextChar	thirdparty/xmlParser/xmlParser.cpp	/^static inline XMLCHAR getNextChar(XML *pXML)$/;"	f	file:
getNodes	thirdparty/svm/precomp.hpp	/^        virtual const std::vector<Node>& getNodes() const { return nodes; }$/;"	f	class:cv::ml::DTreesImpl
getNumRejected	thirdparty/textDetect/erfilter.cpp	/^    int ERFilterNM::getNumRejected()$/;"	f	class:cv::text::ERFilterNM
getOneError	test/result.hpp	/^      inline float getOneError() const { return m_1error; }$/;"	f	class:easypr::demo::Result
getOstuLevel	include/easypr/core/character.hpp	/^    inline double getOstuLevel() const { return m_ostuLevel; }$/;"	f	class:easypr::CCharacter
getOstuLevel	include/easypr/core/plate.hpp	/^    inline double getOstuLevel() const { return m_ostuLevel; }$/;"	f	class:easypr::CPlate
getPDDebug	include/easypr/core/plate_detect.h	/^  inline bool getPDDebug() { return m_plateLocate->getDebug(); }$/;"	f	class:easypr::CPlateDetect
getParam1b	include/easypr/core/params.h	/^    inline bool getParam1b() const { return m_param1b; }$/;"	f	class:easypr::CParams
getParam1b	test/config.hpp	/^      inline std::vector<bool>& getParam1b()  { return m_param1b; }$/;"	f	class:easypr::demo::Config
getParam1b	test/result.hpp	/^        inline bool getParam1b() const { return m_param1b; }$/;"	f	class:easypr::demo::Result::Params
getParam1f	include/easypr/core/params.h	/^    inline float getParam1f() const { return m_param1f; }$/;"	f	class:easypr::CParams
getParam1f	test/config.hpp	/^      inline std::vector<float>& getParam1f()  { return m_param1f; }$/;"	f	class:easypr::demo::Config
getParam1f	test/result.hpp	/^        inline float getParam1f() const { return m_param1f; }$/;"	f	class:easypr::demo::Result::Params
getParam1i	include/easypr/core/params.h	/^    inline int getParam1i() const { return m_param1i; }$/;"	f	class:easypr::CParams
getParam1i	test/config.hpp	/^      inline std::vector<int>& getParam1i()  { return m_param1i; }$/;"	f	class:easypr::demo::Config
getParam1i	test/result.hpp	/^        inline int getParam1i() const { return m_param1i; }$/;"	f	class:easypr::demo::Result::Params
getParam2b	include/easypr/core/params.h	/^    inline bool getParam2b() const { return m_param2b; }$/;"	f	class:easypr::CParams
getParam2b	test/config.hpp	/^      inline std::vector<bool>& getParam2b()  { return m_param2b; }$/;"	f	class:easypr::demo::Config
getParam2b	test/result.hpp	/^        inline bool getParam2b() const { return m_param2b; }$/;"	f	class:easypr::demo::Result::Params
getParam2f	include/easypr/core/params.h	/^    inline float getParam2f() const { return m_param2f; }$/;"	f	class:easypr::CParams
getParam2f	test/config.hpp	/^      inline std::vector<float>& getParam2f()  { return m_param2f; }$/;"	f	class:easypr::demo::Config
getParam2f	test/result.hpp	/^        inline float getParam2f() const { return m_param2f; }$/;"	f	class:easypr::demo::Result::Params
getParam2i	include/easypr/core/params.h	/^    inline int getParam2i() const { return m_param2i; }$/;"	f	class:easypr::CParams
getParam2i	test/config.hpp	/^      inline std::vector<int>& getParam2i()  { return m_param2i; }$/;"	f	class:easypr::demo::Config
getParam2i	test/result.hpp	/^        inline int getParam2i() const { return m_param2i; }$/;"	f	class:easypr::demo::Result::Params
getParam3b	include/easypr/core/params.h	/^    inline bool getParam3b() const { return m_param3b; }$/;"	f	class:easypr::CParams
getParam3b	test/config.hpp	/^      inline std::vector<bool>& getParam3b()  { return m_param3b; }$/;"	f	class:easypr::demo::Config
getParam3b	test/result.hpp	/^        inline bool getParam3b() const { return m_param3b; }$/;"	f	class:easypr::demo::Result::Params
getParam3f	include/easypr/core/params.h	/^    inline float getParam3f() const { return m_param3f; }$/;"	f	class:easypr::CParams
getParam3f	test/config.hpp	/^      inline std::vector<float>& getParam3f()  { return m_param3f; }$/;"	f	class:easypr::demo::Config
getParam3f	test/result.hpp	/^        inline float getParam3f() const { return m_param3f; }$/;"	f	class:easypr::demo::Result::Params
getParam3i	include/easypr/core/params.h	/^    inline int getParam3i() const { return m_param3i; }$/;"	f	class:easypr::CParams
getParam3i	test/config.hpp	/^      inline std::vector<int>& getParam3i()  { return m_param3i; }$/;"	f	class:easypr::demo::Config
getParam3i	test/result.hpp	/^        inline int getParam3i() const { return m_param3i; }$/;"	f	class:easypr::demo::Result::Params
getParams	test/result.hpp	/^      inline Params& getParams()  { return m_params; }$/;"	f	class:easypr::demo::Result
getParentNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode      XMLNode::getParentNode    (     ) const { if ((!d)||(!d->pParent     )) return emptyXMLNode;      return XMLNode(d->pParent); }$/;"	f	class:XMLNode
getPass2Only	thirdparty/mser/mser2.cpp	/^    bool getPass2Only() const { return params.pass2Only; }$/;"	f	class:cv::MSER_Impl2
getPicturesCount	test/result.hpp	/^      inline int getPicturesCount() const { return m_picturesCount; }$/;"	f	class:easypr::demo::Result
getPlateColor	include/easypr/core/chars_recognise.h	/^  inline std::string getPlateColor(Color in) const {$/;"	f	class:easypr::CCharsRecognise
getPlateColor	include/easypr/core/chars_recognise.h	/^  inline std::string getPlateColor(cv::Mat input) const {$/;"	f	class:easypr::CCharsRecognise
getPlateColor	include/easypr/core/plate.hpp	/^    inline Color getPlateColor() const { return m_plateColor; }$/;"	f	class:easypr::CPlate
getPlateDistVec	include/easypr/core/plate.hpp	/^    inline Vec2i getPlateDistVec() const { return m_distVec; }$/;"	f	class:easypr::CPlate
getPlateLeftPoint	include/easypr/core/plate.hpp	/^    inline Point getPlateLeftPoint() const { return m_leftPoint; }$/;"	f	class:easypr::CPlate
getPlateLine	include/easypr/core/plate.hpp	/^    inline Vec4f getPlateLine() const { return m_line; }$/;"	f	class:easypr::CPlate
getPlateLocateType	include/easypr/core/plate.hpp	/^    inline LocateType getPlateLocateType() const { return m_locateType; }$/;"	f	class:easypr::CPlate
getPlateMat	include/easypr/core/plate.hpp	/^    inline Mat getPlateMat() const { return m_plateMat; }$/;"	f	class:easypr::CPlate
getPlateMaxCharRect	include/easypr/core/plate.hpp	/^    inline Rect getPlateMaxCharRect() const { return m_maxCharRect; }$/;"	f	class:easypr::CPlate
getPlateMergeCharRect	include/easypr/core/plate.hpp	/^    inline Rect getPlateMergeCharRect() const { return m_mergeCharRect; }$/;"	f	class:easypr::CPlate
getPlatePos	include/easypr/core/plate.hpp	/^    inline RotatedRect getPlatePos() const { return m_platePos; }$/;"	f	class:easypr::CPlate
getPlateRightPoint	include/easypr/core/plate.hpp	/^    inline Point getPlateRightPoint() const { return m_rightPoint; }$/;"	f	class:easypr::CPlate
getPlateScale	include/easypr/core/plate.hpp	/^    inline float getPlateScale() const { return m_scale; }$/;"	f	class:easypr::CPlate
getPlateScore	include/easypr/core/plate.hpp	/^    inline double getPlateScore() const { return m_score; }$/;"	f	class:easypr::CPlate
getPlateStr	include/easypr/core/plate.hpp	/^    inline String getPlateStr() const { return m_plateStr; }$/;"	f	class:easypr::CPlate
getPlateType	src/core/core_func.cpp	/^  Color getPlateType(const Mat &src, const bool adaptive_minsv) {$/;"	f	namespace:easypr
getPlatesCount	test/result.hpp	/^      inline int getPlatesCount() const { return m_platesCount; }$/;"	f	class:easypr::demo::Result
getRegressionAccuracy	thirdparty/svm/precomp.hpp	/^        inline float getRegressionAccuracy() const { return regressionAccuracy; }$/;"	f	struct:cv::ml::TreeParams
getResultShow	include/easypr/core/plate_recognize.h	/^    inline bool getResultShow() const { return m_showResult; }$/;"	f	class:easypr::CPlateRecognize
getRoots	thirdparty/svm/precomp.hpp	/^        virtual const std::vector<int>& getRoots() const { return roots; }$/;"	f	class:cv::ml::DTreesImpl
getSIFTFeatures	src/core/feature.cpp	/^void getSIFTFeatures(const Mat& image, Mat& features) {$/;"	f	namespace:easypr
getSVCount	thirdparty/svm/corrected_svm.cpp	/^    int getSVCount(int i) const$/;"	f	class:cv::ml::SVMImpl
getSafeRect	src/core/core_func.cpp	/^  Rect getSafeRect(Point2f center, float width, float height, Mat image) {$/;"	f	namespace:easypr
getSeconds	test/result.hpp	/^      inline float getSeconds() const { return m_seconds; }$/;"	f	class:easypr::demo::Result
getSplits	thirdparty/svm/precomp.hpp	/^        virtual const std::vector<Split>& getSplits() const { return splits; }$/;"	f	class:cv::ml::DTreesImpl
getSubsetSize	thirdparty/svm/precomp.hpp	/^        int getSubsetSize(int vi) const { return (getCatCount(vi) + 31)\/32; }$/;"	f	class:cv::ml::DTreesImpl
getSubsets	thirdparty/svm/precomp.hpp	/^        virtual const std::vector<int>& getSubsets() const { return subsets; }$/;"	f	class:cv::ml::DTreesImpl
getSupportVectors	thirdparty/svm/corrected_svm.cpp	/^    Mat getSupportVectors() const$/;"	f	class:cv::ml::SVMImpl
getSyntheticImage	src/train/ann_train.cpp	/^cv::Mat getSyntheticImage(const Mat& image) {$/;"	f	namespace:easypr
getText	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR      XMLNode::getText          (int i) const { if ((!d)||(i>=d->nText     )) return NULL;              return d->pText[i];      }$/;"	f	class:XMLNode
getTimestamp	src/util/util.cpp	/^long Utils::getTimestamp() {$/;"	f	class:easypr::Utils
getType	thirdparty/svm/corrected_svm.cpp	/^    int getType() const$/;"	f	class:cv::ml::SVMKernelImpl
getVarCount	thirdparty/svm/corrected_svm.cpp	/^    int getVarCount() const$/;"	f	class:cv::ml::SVMImpl
getVarCount	thirdparty/svm/precomp.hpp	/^        int getVarCount() const { return varType.empty() ? 0 : (int)(varType.size() - 1); }$/;"	f	class:cv::ml::DTreesImpl
getVerifyAspect	include/easypr/core/plate_detect.h	/^  inline float getVerifyAspect() const {$/;"	f	class:easypr::CPlateDetect
getVerifyAspect	include/easypr/core/plate_locate.h	/^  inline float getVerifyAspect() const { return m_aspect; }$/;"	f	class:easypr::CPlateLocate
getVerifyError	include/easypr/core/plate_detect.h	/^  inline float getVerifyError() const {$/;"	f	class:easypr::CPlateDetect
getVerifyError	include/easypr/core/plate_locate.h	/^  inline float getVerifyError() const { return m_error; }$/;"	f	class:easypr::CPlateLocate
getVersion	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR XMLNode::getVersion() { return _CXML("v2.44"); }$/;"	f	class:XMLNode
getWhitePercent	include/easypr/core/chars_recognise.h	/^  inline float getWhitePercent() const {$/;"	f	class:easypr::CCharsRecognise
getWhitePercent	include/easypr/core/chars_segment.h	/^  inline float getWhitePercent() const { return m_WhitePercent; }$/;"	f	class:easypr::CCharsSegment
getZeroError	test/result.hpp	/^      inline float getZeroError() const { return m_0error; }$/;"	f	class:easypr::demo::Result
get_C	thirdparty/svm/corrected_svm.cpp	640;"	d	file:
get_C	thirdparty/svm/corrected_svm.cpp	641;"	d	file:
get_default_name	include/easypr/util/program_options.h	/^  inline static const char* get_default_name() { return "EmptySubroutine"; }$/;"	f	class:program_options::Subroutine
get_description	include/easypr/util/program_options.h	/^  inline const char* get_description() const { return description_; }$/;"	f	class:program_options::Subroutine
get_first_line	include/easypr/util/program_options.h	/^  inline const char* get_first_line() const { return first_line_; }$/;"	f	class:program_options::Subroutine
get_gradient_magnitude	thirdparty/textDetect/erfilter.cpp	/^    void get_gradient_magnitude(Mat& _grey_img, Mat& _gradient_magnitude)$/;"	f	namespace:cv::text
get_last_slash	src/util/util.cpp	/^std::size_t Utils::get_last_slash(const std::string &path) {$/;"	f	class:easypr::Utils
get_name	include/easypr/util/program_options.h	/^  inline std::string get_name() const { return name_; }$/;"	f	class:program_options::Subroutine
get_plate_color	include/easypr/api.hpp	/^static Color get_plate_color(const char* image) {$/;"	f	namespace:easypr::api
get_row	thirdparty/svm/corrected_svm.cpp	/^        Qfloat* get_row( int i, float* dst )$/;"	f	class:cv::ml::SVMImpl::Solver
get_row_base	thirdparty/svm/corrected_svm.cpp	/^        Qfloat* get_row_base( int i, bool* _existed )$/;"	f	class:cv::ml::SVMImpl::Solver
get_row_func	thirdparty/svm/corrected_svm.cpp	/^        GetRow get_row_func;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
get_row_one_class	thirdparty/svm/corrected_svm.cpp	/^        Qfloat* get_row_one_class( int, Qfloat* row, Qfloat*, bool )$/;"	f	class:cv::ml::SVMImpl::Solver
get_row_svc	thirdparty/svm/corrected_svm.cpp	/^        Qfloat* get_row_svc( int i, Qfloat* row, Qfloat*, bool existed )$/;"	f	class:cv::ml::SVMImpl::Solver
get_row_svr	thirdparty/svm/corrected_svm.cpp	/^        Qfloat* get_row_svr( int i, Qfloat* row, Qfloat* dst, bool )$/;"	f	class:cv::ml::SVMImpl::Solver
get_subroutine	include/easypr/util/program_options.h	/^  inline Subroutine* get_subroutine() {$/;"	f	class:program_options::Generator
get_subroutine_list	src/util/program_options.cpp	/^std::map<std::string, std::string> Generator::get_subroutine_list() {$/;"	f	class:program_options::Generator
get_subroutine_name	include/easypr/util/program_options.h	/^  inline std::string get_subroutine_name() const { return subroutine_name_; }$/;"	f	class:program_options::Parser
get_usage	include/easypr/util/program_options.h	/^  inline const Usages& get_usage() const { return usages_; }$/;"	f	class:program_options::Subroutine
gradient_mean	thirdparty/textDetect/erfilter.cpp	/^      double gradient_mean;  \/\/\/< mean gradient magnitude of the whole region$/;"	m	struct:cv::text::ERFeatures	file:
gradient_std	thirdparty/textDetect/erfilter.cpp	/^      double gradient_std;  \/\/\/< gradient magnitude standard deviation of the whole region$/;"	m	struct:cv::text::ERFeatures	file:
gray_level	thirdparty/mser/mser2.cpp	/^      int gray_level;$/;"	m	struct:cv::MSER_Impl2::ConnectedComp	file:
gridSearchTest	test/accuracy.hpp	/^    int gridSearchTest(const char* test_path) {$/;"	f	namespace:easypr::demo
group_boost	thirdparty/textDetect/erfilter.cpp	/^      Ptr<Boost> group_boost;$/;"	m	class:cv::text::MaxMeaningfulClustering	file:
growHistory	thirdparty/mser/mser2.cpp	/^      void growHistory(CompHistory*& hptr, WParams& wp, int new_gray_level, bool final, bool force = false)$/;"	f	struct:cv::MSER_Impl2::ConnectedComp
guessCharEncoding	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode::XMLCharEncoding XMLNode::guessCharEncoding(void *buf,int l, char useXMLEncodingAttribute)$/;"	f	class:XMLNode
guessWideCharChars	thirdparty/xmlParser/xmlParser.cpp	/^static char guessWideCharChars=1, dropWhiteSpace=1, removeCommentsInMiddleOfText=1;$/;"	v	file:
guo_hall_thinning	thirdparty/textDetect/erfilter.cpp	/^    bool guo_hall_thinning(const Mat1b & img, Mat& skeleton)$/;"	f	namespace:cv::text
h_max	thirdparty/textDetect/erfilter.cpp	/^      int h_max;$/;"	m	struct:cv::text::line_estimates	file:
has	src/util/program_options.cpp	/^bool Parser::has(const char* key) {$/;"	f	class:program_options::Parser
has_and	include/easypr/util/program_options.h	/^  DEPRECATED(bool has_and(int n, ...)) {$/;"	f	class:program_options::Parser
has_and	src/util/program_options.cpp	/^bool Parser::has_and(std::initializer_list<const char*> options) {$/;"	f	class:program_options::Parser
has_or	include/easypr/util/program_options.h	/^  DEPRECATED(bool has_or(int n, ...)) {$/;"	f	class:program_options::Parser
has_or	src/util/program_options.cpp	/^bool Parser::has_or(std::initializer_list<const char*> options) {$/;"	f	class:program_options::Parser
has_others_scope_	include/easypr/util/switch.hpp	/^  bool has_others_scope_;$/;"	m	class:program_options::Switch
haveCommonRegion	thirdparty/textDetect/erfilter.cpp	/^    bool haveCommonRegion(region_sequence &sequence1, region_sequence &sequence2)$/;"	f	namespace:cv::text
haveCommonRegion	thirdparty/textDetect/erfilter.cpp	/^    bool haveCommonRegion(region_triplet &t1, region_triplet &t2)$/;"	f	namespace:cv::text
head	thirdparty/mser/mser2.cpp	/^      PPixel head;$/;"	m	struct:cv::MSER_Impl2::CompHistory	file:
head	thirdparty/mser/mser2.cpp	/^      PPixel head;$/;"	m	struct:cv::MSER_Impl2::ConnectedComp	file:
heapbuf	thirdparty/mser/mser2.cpp	/^    vector<Pixel*> heapbuf;$/;"	m	class:cv::MSER_Impl2	file:
histbuf	thirdparty/mser/mser2.cpp	/^    vector<CompHistory> histbuf;$/;"	m	class:cv::MSER_Impl2	file:
histc	thirdparty/LBP/helper.cpp	/^Mat libfacerec::histc(InputArray _src, int minVal, int maxVal, bool normed) {$/;"	f	class:libfacerec
histc_	thirdparty/LBP/helper.cpp	/^histc_(const Mat& src, int minVal=0, int maxVal=255, bool normed=false) {$/;"	f	namespace:libfacerec
histeq	src/core/core_func.cpp	/^  Mat histeq(Mat in) {$/;"	f	namespace:easypr
history	thirdparty/mser/mser2.cpp	/^      CompHistory* history;$/;"	m	struct:cv::MSER_Impl2::ConnectedComp	file:
hole_area_ratio	thirdparty/textDetect/erfilter.hpp	/^    float hole_area_ratio;$/;"	m	struct:cv::text::ERStat
hu_moments	thirdparty/textDetect/erfilter.cpp	/^      double hu_moments[7];$/;"	m	struct:cv::text::ERFeatures	file:
identify	src/core/chars_identify.cpp	/^int CharsIdentify::identify(std::vector<cv::Mat> inputs, std::vector<std::pair<std::string, std::string>>& outputs,$/;"	f	class:easypr::CharsIdentify
identify	src/core/chars_identify.cpp	/^std::pair<std::string, std::string> CharsIdentify::identify(cv::Mat input, bool isChinese, bool isAlphabet) {$/;"	f	class:easypr::CharsIdentify
identify	src/train/ann_train.cpp	/^std::pair<std::string, std::string> AnnTrain::identify(cv::Mat input) {$/;"	f	class:easypr::AnnTrain
identifyChinese	src/core/chars_identify.cpp	/^std::pair<std::string, std::string> CharsIdentify::identifyChinese(cv::Mat input, float& out, bool& isChinese) {$/;"	f	class:easypr::CharsIdentify
identifyChinese	src/train/ann_train.cpp	/^std::pair<std::string, std::string> AnnTrain::identifyChinese(cv::Mat input) {$/;"	f	class:easypr::AnnTrain
identifyChineseGray	src/core/chars_identify.cpp	/^std::pair<std::string, std::string> CharsIdentify::identifyChineseGray(cv::Mat input, float& out, bool& isChinese) {$/;"	f	class:easypr::CharsIdentify
identifyGrayChinese	src/train/annCh_train.cpp	/^std::pair<std::string, std::string> AnnChTrain::identifyGrayChinese(cv::Mat input) {$/;"	f	class:easypr::AnnChTrain
idx	thirdparty/svm/corrected_svm.cpp	/^            int idx;$/;"	m	struct:cv::ml::SVMImpl::Solver::KernelRow	file:
imsize	thirdparty/textDetect/erfilter.cpp	/^      Size imsize;$/;"	m	class:cv::text::MaxMeaningfulClustering	file:
imwrite	src/util/util.cpp	/^bool Utils::imwrite(const std::string &file, const cv::Mat &image) {$/;"	f	class:easypr::Utils
indexClear	thirdparty/xmlParser/xmlParser.cpp	/^int XMLNode::indexClear(XMLCSTR lpszValue) const$/;"	f	class:XMLNode
indexText	thirdparty/xmlParser/xmlParser.cpp	/^int XMLNode::indexText(XMLCSTR lpszValue) const$/;"	f	class:XMLNode
info_arch	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_language_dialect_default	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
init	src/util/program_options.cpp	/^bool Parser::init(const int argc, const char** argv) {$/;"	f	class:program_options::Parser
init	thirdparty/mser/mser2.cpp	/^      void init(int gray)$/;"	f	struct:cv::MSER_Impl2::ConnectedComp
init	thirdparty/textDetect/erfilter.cpp	/^      void init(const int_fast32_t size)$/;"	f	class:cv::text::union_find
init	thirdparty/textDetect/erfilter.cpp	/^      void init(index const size)$/;"	f	class:cv::text::auto_array_ptr
init	thirdparty/textDetect/erfilter.cpp	/^      void init(index const size, value const val)$/;"	f	class:cv::text::auto_array_ptr
initialized	thirdparty/textDetect/erfilter.cpp	/^      bool   initialized;$/;"	m	class:cv::text::Minibox	file:
instance	src/core/chars_identify.cpp	/^CharsIdentify* CharsIdentify::instance() {$/;"	f	class:easypr::CharsIdentify
instance	src/core/params.cpp	/^  CParams* CParams::instance() {$/;"	f	class:easypr::CParams
instance	src/core/plate_judge.cpp	/^  PlateJudge* PlateJudge::instance() {$/;"	f	class:easypr::PlateJudge
instance_	include/easypr/core/chars_identify.h	/^  static CharsIdentify* instance_;$/;"	m	class:easypr::CharsIdentify
instance_	include/easypr/core/params.h	/^    static CParams* instance_;$/;"	m	class:easypr::CParams
instance_	include/easypr/core/plate_judge.h	/^  static PlateJudge* instance_;$/;"	m	class:easypr::PlateJudge
instance_	src/core/chars_identify.cpp	/^CharsIdentify* CharsIdentify::instance_ = nullptr;$/;"	m	class:easypr::CharsIdentify	file:
instance_	src/core/params.cpp	/^  CParams* CParams::instance_ = nullptr;$/;"	m	class:easypr::CParams	file:
instance_	src/core/plate_judge.cpp	/^  PlateJudge* PlateJudge::instance_ = nullptr;$/;"	m	class:easypr::PlateJudge	file:
int_fast32_t	thirdparty/textDetect/erfilter.cpp	/^typedef int int_fast32_t;$/;"	t	file:
intensity_mean	thirdparty/textDetect/erfilter.cpp	/^      float intensity_mean;  \/\/\/< mean intensity of the whole region$/;"	m	struct:cv::text::ERFeatures	file:
intensity_std	thirdparty/textDetect/erfilter.cpp	/^      float intensity_std;  \/\/\/< intensity standard deviation of the whole region$/;"	m	struct:cv::text::ERFeatures	file:
interRect	src/core/core_func.cpp	/^  Rect interRect(const Rect &a, const Rect &b) {$/;"	f	namespace:easypr
inversed	thirdparty/svm/precomp.hpp	/^            bool inversed;$/;"	m	struct:cv::ml::DTreesImpl::WSplit
isAttributeSet	thirdparty/xmlParser/xmlParser.cpp	/^char XMLNode::isAttributeSet(XMLCSTR lpszAttrib) const$/;"	f	class:XMLNode
isCharacter	src/core/chars_identify.cpp	/^bool CharsIdentify::isCharacter(cv::Mat input, std::string& label, float& maxVal, bool isChinese) {$/;"	f	class:easypr::CharsIdentify
isClassifier	thirdparty/svm/corrected_svm.cpp	/^    bool isClassifier() const$/;"	f	class:cv::ml::SVMImpl
isClassifier	thirdparty/svm/precomp.hpp	/^        bool isClassifier() const { return _isClassifier; }$/;"	f	class:cv::ml::DTreesImpl
isDeclaration	thirdparty/xmlParser/xmlParser.cpp	/^char         XMLNode::isDeclaration    (     ) const { if (!d) return 0;             return d->isDeclaration; }$/;"	f	class:XMLNode
isDeclaration	thirdparty/xmlParser/xmlParser.h	/^          char                   isDeclaration;   \/\/ Whether node is an XML declaration - '<?xml ?>'$/;"	m	struct:XMLNode::XMLNodeDataTag
isEmpty	thirdparty/xmlParser/xmlParser.cpp	/^char         XMLNode::isEmpty          (     ) const { return (d==NULL); }$/;"	f	class:XMLNode
isPrepared	include/easypr/train/svm_train.h	/^  bool isPrepared = true;$/;"	m	class:easypr::SvmTrain
isSymmetric	thirdparty/LBP/helper.cpp	/^bool libfacerec::isSymmetric(InputArray src, double eps) {$/;"	f	class:libfacerec
isSymmetric_	thirdparty/LBP/helper.cpp	/^isSymmetric_(InputArray src) {$/;"	f	namespace:libfacerec
isSymmetric_	thirdparty/LBP/helper.cpp	/^isSymmetric_(InputArray src, double eps) {$/;"	f	namespace:libfacerec
isTrained	thirdparty/svm/corrected_svm.cpp	/^    bool isTrained() const$/;"	f	class:cv::ml::SVMImpl
isTrained	thirdparty/svm/precomp.hpp	/^        bool isTrained() const { return !roots.empty(); }$/;"	f	class:cv::ml::DTreesImpl
isValidPair	thirdparty/textDetect/erfilter.cpp	/^    bool isValidPair(Mat &grey, Mat &lab, Mat &mask, vector<Mat> &channels, vector< vector<ERStat> >& regions, Vec2i idx1, Vec2i idx2)$/;"	f	namespace:cv::text
isValidSequence	thirdparty/textDetect/erfilter.cpp	/^    bool isValidSequence(region_sequence &sequence1, region_sequence &sequence2)$/;"	f	namespace:cv::text
isValidTriplet	thirdparty/textDetect/erfilter.cpp	/^    bool isValidTriplet(vector< vector<ERStat> >& regions, region_pair pair1, region_pair pair2, region_triplet &triplet)$/;"	f	namespace:cv::text
isVisited	thirdparty/mser/mser2.cpp	/^      bool isVisited() const { return (val & ~NEXT_MASK) != 0; }$/;"	f	struct:cv::MSER_Impl2::Pixel
is_free	thirdparty/svm/corrected_svm.cpp	637;"	d	file:
is_free	thirdparty/svm/corrected_svm.cpp	638;"	d	file:
is_inactive	thirdparty/textDetect/erfilter.cpp	/^      bool is_inactive(int_fast32_t idx) const$/;"	f	class:cv::text::doubly_linked_list
is_lower_bound	thirdparty/svm/corrected_svm.cpp	634;"	d	file:
is_lower_bound	thirdparty/svm/corrected_svm.cpp	635;"	d	file:
is_upper_bound	thirdparty/svm/corrected_svm.cpp	631;"	d	file:
is_upper_bound	thirdparty/svm/corrected_svm.cpp	632;"	d	file:
isdeflection	src/core/plate_locate.cpp	/^bool CPlateLocate::isdeflection(const Mat &in, const double angle,$/;"	f	class:easypr::CPlateLocate
judegMDOratio2	src/core/core_func.cpp	/^  bool judegMDOratio2(const Mat &image, const Rect &rect, std::vector<Point> &contour, Mat &result, const float thresh,$/;"	f	namespace:easypr
judgeChinese	src/core/chars_segment.cpp	/^void CCharsSegment::judgeChinese(Mat in, Mat& out, Color plateType) {$/;"	f	class:easypr::CCharsSegment
judgeChineseGray	src/core/chars_segment.cpp	/^void CCharsSegment::judgeChineseGray(Mat in, Mat& out, Color plateType) {$/;"	f	class:easypr::CCharsSegment
kAnnInput	include/easypr/config.h	/^static const int   kAnnInput = kCharacterInput;$/;"	m	namespace:easypr
kCharHiddenNeurans	include/easypr/config.h	/^  static const int kCharHiddenNeurans = 64;$/;"	m	namespace:easypr
kCharLBPGridX	include/easypr/config.h	/^  static const int kCharLBPGridX = 4;$/;"	m	namespace:easypr
kCharLBPGridY	include/easypr/config.h	/^  static const int kCharLBPGridY = 4;$/;"	m	namespace:easypr
kCharLBPPatterns	include/easypr/config.h	/^  static const int kCharLBPPatterns = 16;$/;"	m	namespace:easypr
kCharacterInput	include/easypr/config.h	/^static const int   kCharacterInput  = 120;$/;"	m	namespace:easypr
kCharacterSize	include/easypr/config.h	/^static const int   kCharacterSize = 10;$/;"	m	namespace:easypr
kCharactersNumber	include/easypr/config.h	/^static const int kCharactersNumber = 34;$/;"	m	namespace:easypr
kChars	include/easypr/config.h	/^static const char *kChars[] = {$/;"	m	namespace:easypr
kCharsCountInOnePlate	include/easypr/config.h	/^  static const int kCharsCountInOnePlate = 7;$/;"	m	namespace:easypr
kCharsTotalNumber	include/easypr/config.h	/^static const int kCharsTotalNumber = 65;$/;"	m	namespace:easypr
kChineseAnnPath	include/easypr/config.h	/^static const char* kChineseAnnPath = "model\/ann_chinese.xml";$/;"	m	namespace:easypr
kChineseInput	include/easypr/config.h	/^static const int   kChineseInput    = 440;$/;"	m	namespace:easypr
kChineseMappingPath	include/easypr/config.h	/^static const char* kChineseMappingPath = "model\/province_mapping";$/;"	m	namespace:easypr
kChineseNumber	include/easypr/config.h	/^static const int kChineseNumber = 31;$/;"	m	namespace:easypr
kChineseSize	include/easypr/config.h	/^static const int   kChineseSize = 20;$/;"	m	namespace:easypr
kConfig	configure.py	/^kConfig = {$/;"	v
kDebug	include/easypr/config.h	/^static bool kDebug = false;$/;"	m	namespace:easypr
kDefault	include/easypr/util/program_options.h	/^  enum Field { kShort, kLong, kDefault, kDescription };$/;"	e	enum:program_options::Row::Field
kDefaultAnnPath	include/easypr/config.h	/^static const char* kDefaultAnnPath = "model\/ann.xml";$/;"	m	namespace:easypr
kDefaultSvmPath	include/easypr/config.h	/^static const char* kDefaultSvmPath = "model\/svm_hist.xml";$/;"	m	namespace:easypr
kDelimiter	include/easypr/util/program_options.h	/^  const char kDelimiter = ',';$/;"	m	class:program_options::Generator
kDescription	include/easypr/util/program_options.h	/^  enum Field { kShort, kLong, kDefault, kDescription };$/;"	e	enum:program_options::Row::Field
kForward	include/easypr/config.h	/^  kForward = 1, \/\/ correspond to "has plate"$/;"	e	enum:easypr::__anon10
kGrayAnnPath	include/easypr/config.h	/^static const char* kGrayAnnPath = "model\/annCh.xml";$/;"	m	namespace:easypr
kGrayCharHeight	include/easypr/config.h	/^static const int kGrayCharHeight = 32;$/;"	m	namespace:easypr
kGrayCharWidth	include/easypr/config.h	/^static const int kGrayCharWidth = 20;$/;"	m	namespace:easypr
kHistSvmPath	include/easypr/config.h	/^static const char* kHistSvmPath = "model\/svm_hist.xml";$/;"	m	namespace:easypr
kInverse	include/easypr/config.h	/^  kInverse = 0  \/\/ correspond to "no plate"$/;"	e	enum:easypr::__anon10
kLBPSvmPath	include/easypr/config.h	/^static const char* kLBPSvmPath = "model\/svm_lbp.xml";$/;"	m	namespace:easypr
kLong	include/easypr/util/program_options.h	/^  enum Field { kShort, kLong, kDefault, kDescription };$/;"	e	enum:program_options::Row::Field
kNeurons	include/easypr/config.h	/^static const int   kNeurons       = 40;$/;"	m	namespace:easypr
kOpenCVConfig	configure.py	/^kOpenCVConfig = "OpenCVConfig-version.cmake"$/;"	v
kPatterns	configure.py	/^kPatterns = {$/;"	v
kPlateMaxSymbolCount	include/easypr/config.h	/^  static const float kPlateMaxSymbolCount = 7.5f;$/;"	m	namespace:easypr
kPlateResizeHeight	include/easypr/config.h	/^static const int   kPlateResizeHeight = 36;$/;"	m	namespace:easypr
kPlateResizeWidth	include/easypr/config.h	/^static const int   kPlateResizeWidth = 136;$/;"	m	namespace:easypr
kPredictSize	include/easypr/config.h	/^static const int   kPredictSize = kCharacterSize;$/;"	m	namespace:easypr
kProjectDir	configure.py	/^kProjectDir = "vcprojs"$/;"	v
kProjectTemplates	configure.py	/^kProjectTemplates = ["libeasypr.vcxproj.template", "demo.vcxproj.template"]$/;"	v
kProjects	configure.py	/^kProjects = ["libeasypr.vcxproj", "demo.vcxproj"]$/;"	v
kReplacements	configure.py	/^kReplacements = {$/;"	v
kShort	include/easypr/util/program_options.h	/^  enum Field { kShort, kLong, kDefault, kDescription };$/;"	e	enum:program_options::Row::Field
kShowWindowHeight	include/easypr/config.h	/^static const int   kShowWindowHeight = 800;$/;"	m	namespace:easypr
kShowWindowWidth	include/easypr/config.h	/^static const int   kShowWindowWidth = 1000;$/;"	m	namespace:easypr
kSvmPercentage	include/easypr/config.h	/^static const float kSvmPercentage   = 0.7f;$/;"	m	namespace:easypr
kSymbolIndex	include/easypr/config.h	/^  static const int kSymbolIndex = 2;$/;"	m	namespace:easypr
kSymbolsCountInChinesePlate	include/easypr/config.h	/^  static const int kSymbolsCountInChinesePlate = 6;$/;"	m	namespace:easypr
kernel	thirdparty/svm/corrected_svm.cpp	/^        Ptr<SVM::Kernel> kernel;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
kernel	thirdparty/svm/corrected_svm.cpp	/^    Ptr<Kernel> kernel;$/;"	m	class:cv::ml::SVMImpl	file:
kernelType	thirdparty/svm/corrected_svm.cpp	/^    int         kernelType;$/;"	m	struct:cv::ml::SvmParams	file:
kv_	include/easypr/core/chars_identify.h	/^  std::shared_ptr<Kv> kv_;$/;"	m	class:easypr::CharsIdentify
kv_	include/easypr/train/annCh_train.h	/^  std::shared_ptr<Kv> kv_;$/;"	m	class:easypr::AnnChTrain
kv_	include/easypr/train/ann_train.h	/^  std::shared_ptr<Kv> kv_;$/;"	m	class:easypr::AnnTrain
l	thirdparty/xmlParser/xmlParser.cpp	/^typedef struct { XMLCSTR s; int l; XMLCHAR c;} XMLCharacterEntity;$/;"	m	struct:__anon3	file:
label	include/easypr/train/svm_train.h	/^    SvmLabel label;$/;"	m	struct:easypr::SvmTrain::__anon11
left	thirdparty/svm/precomp.hpp	/^            int left;$/;"	m	struct:cv::ml::DTreesImpl::WNode
lengthXMLString	thirdparty/xmlParser/xmlParser.cpp	/^int ToXMLStringTool::lengthXMLString(XMLCSTR source)$/;"	f	class:ToXMLStringTool
level	thirdparty/textDetect/erfilter.hpp	/^    int level;$/;"	m	struct:cv::text::ERStat
levenshtein_distance	include/easypr/util/util.h	/^  static unsigned int levenshtein_distance(const T &s1, const T &s2) {$/;"	f	class:easypr::Utils
libfacerec	thirdparty/LBP/helper.cpp	/^namespace libfacerec {$/;"	n	file:
libfacerec	thirdparty/LBP/helper.hpp	/^namespace libfacerec {$/;"	n
libfacerec	thirdparty/LBP/lbp.cpp	/^namespace libfacerec {$/;"	n	file:
libfacerec	thirdparty/LBP/lbp.hpp	/^namespace libfacerec {$/;"	n
line_estimates	thirdparty/textDetect/erfilter.cpp	/^    struct line_estimates$/;"	s	namespace:cv::text	file:
linkage_output	thirdparty/textDetect/erfilter.cpp	/^      linkage_output(double * const _Z)$/;"	f	class:cv::text::linkage_output
linkage_output	thirdparty/textDetect/erfilter.cpp	/^    class linkage_output {$/;"	c	namespace:cv::text	file:
linkage_vector	thirdparty/textDetect/erfilter.cpp	/^    static int linkage_vector(double *X, int N, int dim, double * Z, unsigned char method, unsigned char metric)$/;"	f	namespace:cv::text
load	src/util/kv.cpp	/^void Kv::load(const std::string &file) {$/;"	f	class:easypr::Kv
loadClassifierNM1	thirdparty/textDetect/erfilter.cpp	/^    Ptr<ERFilter::Callback> loadClassifierNM1(const String& filename)$/;"	f	namespace:cv::text
loadClassifierNM2	thirdparty/textDetect/erfilter.cpp	/^    Ptr<ERFilter::Callback> loadClassifierNM2(const String& filename)$/;"	f	namespace:cv::text
loadDummyClassifier	thirdparty/textDetect/erfilter.cpp	/^    Ptr<ERFilter::Callback> loadDummyClassifier()$/;"	f	namespace:cv::text
local_ip	include/easypr/network/server_socket.hpp	/^	char local_ip[16];$/;"	m	struct:socket_config
local_maxima	thirdparty/textDetect/erfilter.hpp	/^    bool local_maxima;$/;"	m	struct:cv::text::ERStat
log_gamma	thirdparty/textDetect/erfilter.cpp	1397;"	d	file:
log_gamma_lanczos	thirdparty/textDetect/erfilter.cpp	/^    static double log_gamma_lanczos(double x)$/;"	f	namespace:cv::text
log_gamma_windschitl	thirdparty/textDetect/erfilter.cpp	/^    static double log_gamma_windschitl(double x)$/;"	f	namespace:cv::text
lpEndTag	thirdparty/xmlParser/xmlParser.cpp	/^    XMLCSTR                lpEndTag;$/;"	m	struct:XML	file:
lpNewElement	thirdparty/xmlParser/xmlParser.cpp	/^    XMLCSTR                lpNewElement;$/;"	m	struct:XML	file:
lpXML	thirdparty/xmlParser/xmlParser.cpp	/^    XMLCSTR                lpXML;$/;"	m	struct:XML	file:
lpszClose	thirdparty/xmlParser/xmlParser.cpp	/^typedef struct { XMLCSTR lpszOpen; int openTagLen; XMLCSTR lpszClose;} ALLXMLClearTag;$/;"	m	struct:__anon2	file:
lpszCloseTag	thirdparty/xmlParser/xmlParser.h	/^    XMLCSTR lpszValue; XMLCSTR lpszOpenTag; XMLCSTR lpszCloseTag;$/;"	m	struct:XMLClear
lpszName	thirdparty/xmlParser/xmlParser.h	/^          XMLCSTR                lpszName;        \/\/ Element name (=NULL if root)$/;"	m	struct:XMLNode::XMLNodeDataTag
lpszName	thirdparty/xmlParser/xmlParser.h	/^    XMLCSTR lpszName; XMLCSTR lpszValue;$/;"	m	struct:XMLAttribute
lpszOpen	thirdparty/xmlParser/xmlParser.cpp	/^typedef struct { XMLCSTR lpszOpen; int openTagLen; XMLCSTR lpszClose;} ALLXMLClearTag;$/;"	m	struct:__anon2	file:
lpszOpenTag	thirdparty/xmlParser/xmlParser.h	/^    XMLCSTR lpszValue; XMLCSTR lpszOpenTag; XMLCSTR lpszCloseTag;$/;"	m	struct:XMLClear
lpszText	thirdparty/xmlParser/xmlParser.cpp	/^    XMLCSTR                lpszText;$/;"	m	struct:XML	file:
lpszValue	thirdparty/xmlParser/xmlParser.h	/^    XMLCSTR lpszName; XMLCSTR lpszValue;$/;"	m	struct:XMLAttribute
lpszValue	thirdparty/xmlParser/xmlParser.h	/^    XMLCSTR lpszValue; XMLCSTR lpszOpenTag; XMLCSTR lpszCloseTag;$/;"	m	struct:XMLClear
lru_cache	thirdparty/svm/corrected_svm.cpp	/^        vector<KernelRow> lru_cache;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
lru_cache_data	thirdparty/svm/corrected_svm.cpp	/^        Mat lru_cache_data;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
lru_first	thirdparty/svm/corrected_svm.cpp	/^        int lru_first;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
lru_last	thirdparty/svm/corrected_svm.cpp	/^        int lru_last;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
m_0error	test/result.hpp	/^      float m_0error;$/;"	m	class:easypr::demo::Result
m_1error	test/result.hpp	/^      float m_1error;$/;"	m	class:easypr::demo::Result
m_BluePercent	include/easypr/core/chars_segment.h	/^  float m_BluePercent;$/;"	m	class:easypr::CCharsSegment
m_ColorThreshold	include/easypr/core/chars_segment.h	/^  int m_ColorThreshold;$/;"	m	class:easypr::CCharsSegment
m_GaussianBlurSize	include/easypr/core/plate_locate.h	/^  int m_GaussianBlurSize;$/;"	m	class:easypr::CPlateLocate
m_LiuDingSize	include/easypr/core/chars_segment.h	/^  int m_LiuDingSize;$/;"	m	class:easypr::CCharsSegment
m_MorphSizeHeight	include/easypr/core/plate_locate.h	/^  int m_MorphSizeHeight;$/;"	m	class:easypr::CPlateLocate
m_MorphSizeWidth	include/easypr/core/plate_locate.h	/^  int m_MorphSizeWidth;$/;"	m	class:easypr::CPlateLocate
m_WhitePercent	include/easypr/core/chars_segment.h	/^  float m_WhitePercent;$/;"	m	class:easypr::CCharsSegment
m_angle	include/easypr/core/plate_locate.h	/^  int m_angle;$/;"	m	class:easypr::CPlateLocate
m_aspect	include/easypr/core/plate_locate.h	/^  float m_aspect;$/;"	m	class:easypr::CPlateLocate
m_avgSeconds	test/result.hpp	/^      float m_avgSeconds;$/;"	m	class:easypr::demo::Result
m_center	include/easypr/core/character.hpp	/^    Point m_center;$/;"	m	class:easypr::CCharacter
m_charCount	include/easypr/core/plate.hpp	/^    int m_charCount;$/;"	m	class:easypr::CPlate
m_characterGrayMat	include/easypr/core/character.hpp	/^    Mat m_characterGrayMat;$/;"	m	class:easypr::CCharacter
m_characterMat	include/easypr/core/character.hpp	/^    Mat m_characterMat;$/;"	m	class:easypr::CCharacter
m_characterPos	include/easypr/core/character.hpp	/^    Rect m_characterPos;$/;"	m	class:easypr::CCharacter
m_characterStr	include/easypr/core/character.hpp	/^    String m_characterStr;$/;"	m	class:easypr::CCharacter
m_charsSegment	include/easypr/core/chars_recognise.h	/^  CCharsSegment* m_charsSegment;$/;"	m	class:easypr::CCharsRecognise
m_chineseKey	include/easypr/core/plate.hpp	/^    String m_chineseKey;$/;"	m	class:easypr::CPlate
m_chineseMat	include/easypr/core/plate.hpp	/^    Mat m_chineseMat;$/;"	m	class:easypr::CPlate
m_chinesePrecise	test/result.hpp	/^      float m_chinesePrecise;$/;"	m	class:easypr::demo::Result
m_debug	include/easypr/core/chars_segment.h	/^  int m_debug;$/;"	m	class:easypr::CCharsSegment
m_debug	include/easypr/core/plate_locate.h	/^  bool m_debug;$/;"	m	class:easypr::CPlateLocate
m_detectFscore	test/result.hpp	/^      float m_detectFscore;$/;"	m	class:easypr::demo::Result
m_detectPrecise	test/result.hpp	/^      float m_detectPrecise;$/;"	m	class:easypr::demo::Result
m_detectRate	test/result.hpp	/^      float m_detectRate;$/;"	m	class:easypr::demo::Result
m_detectRecall	test/result.hpp	/^      float m_detectRecall;$/;"	m	class:easypr::demo::Result
m_distVec	include/easypr/core/plate.hpp	/^    Vec2i m_distVec;$/;"	m	class:easypr::CPlate
m_error	include/easypr/core/plate_locate.h	/^  float m_error;$/;"	m	class:easypr::CPlateLocate
m_index	include/easypr/core/character.hpp	/^    int m_index;$/;"	m	class:easypr::CCharacter
m_isChinese	include/easypr/core/character.hpp	/^    bool m_isChinese;$/;"	m	class:easypr::CCharacter
m_isUpdate	include/easypr/core/params.h	/^    bool m_isUpdate;$/;"	m	class:easypr::CParams
m_leftPoint	include/easypr/core/plate.hpp	/^    Point m_leftPoint;$/;"	m	class:easypr::CPlate
m_line	include/easypr/core/plate.hpp	/^    Vec4f m_line;$/;"	m	class:easypr::CPlate
m_locateType	include/easypr/core/plate.hpp	/^    LocateType m_locateType;$/;"	m	class:easypr::CPlate
m_maxCharRect	include/easypr/core/plate.hpp	/^    Rect m_maxCharRect;$/;"	m	class:easypr::CPlate
m_maxPlates	include/easypr/core/plate_detect.h	/^  int m_maxPlates;$/;"	m	class:easypr::CPlateDetect
m_mergeCharRect	include/easypr/core/plate.hpp	/^    Rect m_mergeCharRect;$/;"	m	class:easypr::CPlate
m_mserCharVec	include/easypr/core/plate.hpp	/^    std::vector<CCharacter> m_mserCharVec;$/;"	m	class:easypr::CPlate
m_number_for_count	include/easypr/train/annCh_train.h	/^  int m_number_for_count;$/;"	m	class:easypr::AnnChTrain
m_ostuCharVec	include/easypr/core/plate.hpp	/^    std::vector<CCharacter> m_ostuCharVec;$/;"	m	class:easypr::CPlate
m_ostuLevel	include/easypr/core/character.hpp	/^    double m_ostuLevel;$/;"	m	class:easypr::CCharacter
m_ostuLevel	include/easypr/core/plate.hpp	/^    double m_ostuLevel;$/;"	m	class:easypr::CPlate
m_param1b	include/easypr/core/params.h	/^    bool m_param1b;$/;"	m	class:easypr::CParams
m_param1b	test/config.hpp	/^      std::vector<bool> m_param1b;$/;"	m	class:easypr::demo::Config
m_param1b	test/result.hpp	/^        bool m_param1b;$/;"	m	class:easypr::demo::Result::Params
m_param1f	include/easypr/core/params.h	/^    float m_param1f;$/;"	m	class:easypr::CParams
m_param1f	test/config.hpp	/^      std::vector<float> m_param1f;$/;"	m	class:easypr::demo::Config
m_param1f	test/result.hpp	/^        float m_param1f;$/;"	m	class:easypr::demo::Result::Params
m_param1i	include/easypr/core/params.h	/^    int m_param1i;$/;"	m	class:easypr::CParams
m_param1i	test/config.hpp	/^      std::vector<int> m_param1i;$/;"	m	class:easypr::demo::Config
m_param1i	test/result.hpp	/^        int m_param1i;$/;"	m	class:easypr::demo::Result::Params
m_param2b	include/easypr/core/params.h	/^    bool m_param2b;$/;"	m	class:easypr::CParams
m_param2b	test/config.hpp	/^      std::vector<bool> m_param2b;$/;"	m	class:easypr::demo::Config
m_param2b	test/result.hpp	/^        bool m_param2b;$/;"	m	class:easypr::demo::Result::Params
m_param2f	include/easypr/core/params.h	/^    float m_param2f;$/;"	m	class:easypr::CParams
m_param2f	test/config.hpp	/^      std::vector<float> m_param2f;$/;"	m	class:easypr::demo::Config
m_param2f	test/result.hpp	/^        float m_param2f;$/;"	m	class:easypr::demo::Result::Params
m_param2i	include/easypr/core/params.h	/^    int m_param2i;$/;"	m	class:easypr::CParams
m_param2i	test/config.hpp	/^      std::vector<int> m_param2i;$/;"	m	class:easypr::demo::Config
m_param2i	test/result.hpp	/^        int m_param2i;$/;"	m	class:easypr::demo::Result::Params
m_param3b	include/easypr/core/params.h	/^    bool m_param3b;$/;"	m	class:easypr::CParams
m_param3b	test/config.hpp	/^      std::vector<bool> m_param3b;$/;"	m	class:easypr::demo::Config
m_param3b	test/result.hpp	/^        bool m_param3b;$/;"	m	class:easypr::demo::Result::Params
m_param3f	include/easypr/core/params.h	/^    float m_param3f;$/;"	m	class:easypr::CParams
m_param3f	test/config.hpp	/^      std::vector<float> m_param3f;$/;"	m	class:easypr::demo::Config
m_param3f	test/result.hpp	/^        float m_param3f;$/;"	m	class:easypr::demo::Result::Params
m_param3i	include/easypr/core/params.h	/^    int m_param3i;$/;"	m	class:easypr::CParams
m_param3i	test/config.hpp	/^      std::vector<int> m_param3i;$/;"	m	class:easypr::demo::Config
m_param3i	test/result.hpp	/^        int m_param3i;$/;"	m	class:easypr::demo::Result::Params
m_params	test/result.hpp	/^      Params m_params;$/;"	m	class:easypr::demo::Result
m_pathSvm	include/easypr/core/plate_detect.h	/^  static std::string m_pathSvm;$/;"	m	class:easypr::CPlateDetect
m_picturesCount	test/result.hpp	/^      int m_picturesCount;$/;"	m	class:easypr::demo::Result
m_plateColor	include/easypr/core/plate.hpp	/^    Color m_plateColor;$/;"	m	class:easypr::CPlate
m_plateLocate	include/easypr/core/plate_detect.h	/^  CPlateLocate* m_plateLocate;$/;"	m	class:easypr::CPlateDetect
m_plateMat	include/easypr/core/plate.hpp	/^    Mat m_plateMat;$/;"	m	class:easypr::CPlate
m_platePos	include/easypr/core/plate.hpp	/^    RotatedRect m_platePos;$/;"	m	class:easypr::CPlate
m_plateStr	include/easypr/core/plate.hpp	/^    String m_plateStr;$/;"	m	class:easypr::CPlate
m_platesCount	test/result.hpp	/^      int m_platesCount;$/;"	m	class:easypr::demo::Result
m_reutCharVec	include/easypr/core/plate.hpp	/^    std::vector<CCharacter> m_reutCharVec;$/;"	m	class:easypr::CPlate
m_rightPoint	include/easypr/core/plate.hpp	/^    Point m_rightPoint;$/;"	m	class:easypr::CPlate
m_scale	include/easypr/core/plate.hpp	/^    float m_scale;$/;"	m	class:easypr::CPlate
m_score	include/easypr/core/character.hpp	/^    double m_score;$/;"	m	class:easypr::CCharacter
m_score	include/easypr/core/plate.hpp	/^    double m_score;$/;"	m	class:easypr::CPlate
m_seconds	test/result.hpp	/^      float m_seconds;$/;"	m	class:easypr::demo::Result
m_showDetect	include/easypr/core/plate_detect.h	/^  bool m_showDetect;$/;"	m	class:easypr::CPlateDetect
m_showResult	include/easypr/core/plate_recognize.h	/^    bool m_showResult;$/;"	m	class:easypr::CPlateRecognize
m_slwdCharVec	include/easypr/core/plate.hpp	/^    std::vector<CCharacter> m_slwdCharVec;$/;"	m	class:easypr::CPlate
m_theMatWidth	include/easypr/core/chars_segment.h	/^  int m_theMatWidth;$/;"	m	class:easypr::CCharsSegment
m_type	include/easypr/core/plate_detect.h	/^  int m_type;$/;"	m	class:easypr::CPlateDetect
m_verifyMax	include/easypr/core/plate_locate.h	/^  int m_verifyMax;$/;"	m	class:easypr::CPlateLocate
m_verifyMin	include/easypr/core/plate_locate.h	/^  int m_verifyMin;$/;"	m	class:easypr::CPlateLocate
main	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	test/main.cpp	/^int main(int argc, const char* argv[]) {$/;"	f
main	test/main2.cpp	/^int main(int argc, const char* argv[]) {$/;"	f
make_parser	src/util/program_options.cpp	/^Parser* Generator::make_parser() {$/;"	f	class:program_options::Generator
make_template	include/easypr/util/program_options.h	/^  inline Generator& make_template(const char* template_str,$/;"	f	class:program_options::Generator
make_usage	src/util/program_options.cpp	/^Generator& Generator::make_usage(const char* first_line) {$/;"	f	class:program_options::Generator
mat_set_invoke	src/core/core_func.cpp	/^  static void mat_set_invoke(Mat &mat, int row, int col, const Scalar &value) {$/;"	f	namespace:easypr
mat_valid_position	src/core/core_func.cpp	/^  bool mat_valid_position(const Mat &mat, int row, int col) {$/;"	f	namespace:easypr
max	src/util/util.cpp	14;"	d	file:
max	thirdparty/svm/precomp.hpp	67;"	d
maxArea	thirdparty/mser/mser2.cpp	/^      int maxArea;$/;"	m	struct:cv::MSER_Impl2::Params	file:
maxArea	thirdparty/textDetect/erfilter.cpp	/^      float maxArea;$/;"	m	class:cv::text::ERFilterNM	file:
maxCategories	thirdparty/svm/precomp.hpp	/^        int   maxCategories;$/;"	m	struct:cv::ml::TreeParams
maxDepth	thirdparty/svm/precomp.hpp	/^        int   maxDepth;$/;"	m	struct:cv::ml::TreeParams
maxEvolution	thirdparty/mser/mser2.cpp	/^      int maxEvolution;$/;"	m	struct:cv::MSER_Impl2::Params	file:
maxSubsetSize	thirdparty/svm/precomp.hpp	/^            int maxSubsetSize;$/;"	m	struct:cv::ml::DTreesImpl::WorkData
maxVariation	thirdparty/mser/mser2.cpp	/^      double maxVariation;$/;"	m	struct:cv::MSER_Impl2::Params	file:
max_cache_size	thirdparty/svm/corrected_svm.cpp	/^        int max_cache_size;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
max_in_branch	thirdparty/textDetect/erfilter.cpp	/^      vector<int> max_in_branch; \/\/ otherwise which merges are the max_meaningful in this branch$/;"	m	struct:cv::text::HCluster	file:
max_iter	thirdparty/svm/corrected_svm.cpp	/^        int max_iter;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
max_meaningful	thirdparty/textDetect/erfilter.cpp	/^      bool max_meaningful;    \/\/ is this merge max meaningul ?$/;"	m	struct:cv::text::HCluster	file:
max_probability_ancestor	thirdparty/textDetect/erfilter.hpp	/^    ERStat* max_probability_ancestor;$/;"	m	struct:cv::text::ERStat
maxlr	thirdparty/svm/precomp.hpp	/^            double maxlr;$/;"	m	struct:cv::ml::DTreesImpl::WNode
maybeAddTxT	thirdparty/xmlParser/xmlParser.cpp	/^char XMLNode::maybeAddTxT(void *pa, XMLCSTR tokenPStr)$/;"	f	class:XMLNode
med_crossings	thirdparty/textDetect/erfilter.hpp	/^    float med_crossings;       \/\/!< median of the crossings at three different height levels$/;"	m	struct:cv::text::ERStat
members	thirdparty/textDetect/erfilter.cpp	/^      int_fast32_t * members;$/;"	m	class:cv::text::dissimilarity	file:
merge	thirdparty/mser/mser2.cpp	/^      void merge(ConnectedComp* comp1, ConnectedComp* comp2,$/;"	f	struct:cv::MSER_Impl2::ConnectedComp
mergeCharToGroup	src/core/core_func.cpp	/^  void mergeCharToGroup(std::vector<CCharacter> vecRect,$/;"	f	namespace:easypr
mergeRect	src/core/core_func.cpp	/^  Rect mergeRect(const Rect &a, const Rect &b) {$/;"	f	namespace:easypr
mergeRect	thirdparty/mser/mser2.cpp	/^  Rect mergeRect(const Rect& a, const Rect& b) {$/;"	f	namespace:cv
method_	thirdparty/textDetect/erfilter.cpp	/^      unsigned char method_;$/;"	m	class:cv::text::MaxMeaningfulClustering	file:
method_codes	thirdparty/textDetect/erfilter.cpp	/^    enum method_codes$/;"	g	namespace:cv::text	file:
metric_	thirdparty/textDetect/erfilter.cpp	/^      unsigned char metric_;$/;"	m	class:cv::text::MaxMeaningfulClustering	file:
min	include/easypr/util/util.h	/^  static T min(const T &v1, const T &v2) {$/;"	f	class:easypr::Utils
min	src/util/util.cpp	10;"	d	file:
min	thirdparty/svm/precomp.hpp	66;"	d
minArea	thirdparty/mser/mser2.cpp	/^      int minArea;$/;"	m	struct:cv::MSER_Impl2::Params	file:
minArea	thirdparty/textDetect/erfilter.cpp	/^      float minArea;$/;"	m	class:cv::text::ERFilterNM	file:
minDiversity	thirdparty/mser/mser2.cpp	/^      double minDiversity;$/;"	m	struct:cv::MSER_Impl2::Params	file:
minMargin	thirdparty/mser/mser2.cpp	/^      double minMargin;$/;"	m	struct:cv::MSER_Impl2::Params	file:
minProbability	thirdparty/textDetect/erfilter.cpp	/^      double minProbability;$/;"	m	class:cv::text::MaxMeaningfulClustering	file:
minProbability	thirdparty/textDetect/erfilter.cpp	/^      float minProbability;$/;"	m	class:cv::text::ERFilterNM	file:
minProbabilityDiff	thirdparty/textDetect/erfilter.cpp	/^      float minProbabilityDiff;$/;"	m	class:cv::text::ERFilterNM	file:
minSampleCount	thirdparty/svm/precomp.hpp	/^        int   minSampleCount;$/;"	m	struct:cv::ml::TreeParams
min_nfa_in_branch	thirdparty/textDetect/erfilter.cpp	/^      int min_nfa_in_branch;  \/\/ min nfa detected within the chilhood$/;"	m	struct:cv::text::HCluster	file:
min_probability_ancestor	thirdparty/textDetect/erfilter.hpp	/^    ERStat* min_probability_ancestor;$/;"	m	struct:cv::text::ERStat
missingSubst	thirdparty/svm/precomp.hpp	/^        vector<float> missingSubst;$/;"	m	class:cv::ml::DTreesImpl
mkdir	src/util/util.cpp	/^bool Utils::mkdir(const std::string folder) {$/;"	f	class:easypr::Utils
ml	thirdparty/svm/corrected_svm.cpp	/^namespace cv { namespace ml {$/;"	n	namespace:cv	file:
ml	thirdparty/svm/precomp.hpp	/^namespace ml$/;"	n	namespace:cv
mmin	thirdparty/xmlParser/xmlParser.cpp	/^inline int mmin( const int t1, const int t2 ) { return t1 < t2 ? t1 : t2; }$/;"	f
mserCharMatch	src/core/core_func.cpp	/^  void mserCharMatch(const Mat &src, std::vector<Mat> &match, std::vector<CPlate> &out_plateVec_blue,$/;"	f	namespace:easypr
mserSearch	src/core/plate_locate.cpp	/^int CPlateLocate::mserSearch(const Mat &src,  vector<Mat> &out,$/;"	f	class:easypr::CPlateLocate
msers	thirdparty/mser/mser2.cpp	/^      vector<vector<Point> >* msers;$/;"	m	struct:cv::MSER_Impl2::WParams	file:
multicast_addr	include/easypr/network/server_socket.hpp	/^	char multicast_addr[16];$/;"	m	struct:socket_config
multicast_addr	src/network/server_socket.cpp	/^struct sockaddr_in multicast_addr;$/;"	v	typeref:struct:sockaddr_in
multicast_port	include/easypr/network/server_socket.hpp	/^	unsigned short multicast_port;$/;"	m	struct:socket_config
myFree	thirdparty/xmlParser/xmlParser.cpp	/^static inline void myFree(void *p) { if (p) free(p); }$/;"	f	file:
myIsTextWideChar	thirdparty/xmlParser/xmlParser.cpp	/^    char myIsTextWideChar(const void *b, int len) \/\/ inspired by the Wine API: RtlIsTextUnicode$/;"	f
myIsTextWideChar	thirdparty/xmlParser/xmlParser.cpp	/^    char myIsTextWideChar(const void *b,int l) { return (char)IsTextUnicode((CONST LPVOID)b,l,NULL); }$/;"	f
myIsTextWideChar	thirdparty/xmlParser/xmlParser.cpp	/^char myIsTextWideChar(const void *b, int len) { return FALSE; }$/;"	f
myMultiByteToWideChar	thirdparty/xmlParser/xmlParser.cpp	/^        wchar_t *myMultiByteToWideChar(const char *s, XMLNode::XMLCharEncoding ce)$/;"	f
myRealloc	thirdparty/xmlParser/xmlParser.cpp	/^static inline void *myRealloc(void *p, int newsize, int memInc, int sizeofElem)$/;"	f	file:
myTagCompare	thirdparty/xmlParser/xmlParser.cpp	/^char myTagCompare(XMLCSTR cclose, XMLCSTR copen)$/;"	f
myWideCharToMultiByte	thirdparty/xmlParser/xmlParser.cpp	/^        char *myWideCharToMultiByte(const wchar_t *s) { return NULL; }$/;"	f
myWideCharToMultiByte	thirdparty/xmlParser/xmlParser.cpp	/^        char *myWideCharToMultiByte(const wchar_t *s)$/;"	f
nAttribute	thirdparty/xmlParser/xmlParser.cpp	/^int XMLNode::nAttribute()  const { if (!d) return 0;    return d->nAttribute; }$/;"	f	class:XMLNode
nAttribute	thirdparty/xmlParser/xmlParser.h	/^                                 nAttribute;      \/\/ Number of attributes$/;"	m	struct:XMLNode::XMLNodeDataTag
nChild	thirdparty/xmlParser/xmlParser.h	/^          int                    nChild,          \/\/ Number of child nodes$/;"	m	struct:XMLNode::XMLNodeDataTag
nChildNode	thirdparty/xmlParser/xmlParser.cpp	/^int XMLNode::nChildNode()  const { if (!d) return 0;    return d->nChild;     }$/;"	f	class:XMLNode
nChildNode	thirdparty/xmlParser/xmlParser.cpp	/^int XMLNode::nChildNode(XMLCSTR name) const$/;"	f	class:XMLNode
nClear	thirdparty/xmlParser/xmlParser.cpp	/^int XMLNode::nClear()      const { if (!d) return 0;    return d->nClear;     }$/;"	f	class:XMLNode
nClear	thirdparty/xmlParser/xmlParser.h	/^                                 nClear,          \/\/ Number of Clear fields (comments)$/;"	m	struct:XMLNode::XMLNodeDataTag
nColumn	thirdparty/xmlParser/xmlParser.h	/^    int  nLine,nColumn;$/;"	m	struct:XMLResults
nElement	thirdparty/xmlParser/xmlParser.cpp	/^int XMLNode::nElement()    const { if (!d) return 0;    return d->nAttribute+d->nChild+d->nText+d->nClear; }$/;"	f	class:XMLNode
nFirst	thirdparty/xmlParser/xmlParser.cpp	/^    int                    nFirst;$/;"	m	struct:XML	file:
nIndex	thirdparty/xmlParser/xmlParser.cpp	/^    int                    nIndex,nIndexMissigEndTag;$/;"	m	struct:XML	file:
nIndexMissigEndTag	thirdparty/xmlParser/xmlParser.cpp	/^    int                    nIndex,nIndexMissigEndTag;$/;"	m	struct:XML	file:
nLine	thirdparty/xmlParser/xmlParser.h	/^    int  nLine,nColumn;$/;"	m	struct:XMLResults
nText	thirdparty/xmlParser/xmlParser.cpp	/^int XMLNode::nText()       const { if (!d) return 0;    return d->nText;      }$/;"	f	class:XMLNode
nText	thirdparty/xmlParser/xmlParser.h	/^                                 nText,           \/\/ Number of text fields$/;"	m	struct:XMLNode::XMLNodeDataTag
nactiveVars	thirdparty/svm/precomp.hpp	/^        int nactiveVars;$/;"	m	struct:cv::ml::RTreeParams
name_	include/easypr/util/program_options.h	/^  std::string name_;$/;"	m	class:program_options::Subroutine
nature_sort_file	test/accuracy.hpp	/^    bool nature_sort_file(const std::string& f1, const std::string& f2) {$/;"	f	namespace:easypr::demo
next	thirdparty/svm/corrected_svm.cpp	/^            int next;$/;"	m	struct:cv::ml::SVMImpl::Solver::KernelRow	file:
next	thirdparty/svm/precomp.hpp	/^            int next;$/;"	m	struct:cv::ml::DTreesImpl::WSplit
next	thirdparty/textDetect/erfilter.hpp	/^    ERStat* next;$/;"	m	struct:cv::text::ERStat
next_	thirdparty/mser/mser2.cpp	/^      CompHistory* next_;$/;"	m	struct:cv::MSER_Impl2::CompHistory	file:
nextparent	thirdparty/textDetect/erfilter.cpp	/^      int_fast32_t nextparent;$/;"	m	class:cv::text::union_find	file:
nfa	thirdparty/textDetect/erfilter.cpp	/^      int nfa;                \/\/ the number of false alarms for this merge$/;"	m	struct:cv::text::HCluster	file:
nfa	thirdparty/textDetect/erfilter.cpp	/^    int MaxMeaningfulClustering::nfa(float sigma, int k, int N)$/;"	f	class:cv::text::MaxMeaningfulClustering
node	thirdparty/textDetect/erfilter.cpp	/^    struct node {$/;"	s	namespace:cv::text	file:
node1	thirdparty/textDetect/erfilter.cpp	/^      int node1;$/;"	m	struct:cv::text::HCluster	file:
node1	thirdparty/textDetect/erfilter.cpp	/^      int_fast32_t node1, node2;$/;"	m	struct:cv::text::node	file:
node2	thirdparty/textDetect/erfilter.cpp	/^      int node2;$/;"	m	struct:cv::text::HCluster	file:
node2	thirdparty/textDetect/erfilter.cpp	/^      int_fast32_t node1, node2;$/;"	m	struct:cv::text::node	file:
node_risk	thirdparty/svm/precomp.hpp	/^            double node_risk, tree_risk, tree_error;$/;"	m	struct:cv::ml::DTreesImpl::WNode
nodes	thirdparty/svm/precomp.hpp	/^        vector<Node> nodes;$/;"	m	class:cv::ml::DTreesImpl
nonMaxSuppression	thirdparty/textDetect/erfilter.cpp	/^      bool  nonMaxSuppression;$/;"	m	class:cv::text::ERFilterNM	file:
nu	thirdparty/svm/corrected_svm.cpp	/^    double      nu;$/;"	m	struct:cv::ml::SvmParams	file:
num_accepted_regions	thirdparty/textDetect/erfilter.cpp	/^      int num_accepted_regions;$/;"	m	class:cv::text::ERFilterNM	file:
num_elem	thirdparty/textDetect/erfilter.cpp	/^      int num_elem;           \/\/ number of elements$/;"	m	struct:cv::text::HCluster	file:
num_inflexion_points	thirdparty/textDetect/erfilter.hpp	/^    float num_inflexion_points;$/;"	m	struct:cv::text::ERStat
num_rejected_regions	thirdparty/textDetect/erfilter.cpp	/^      int num_rejected_regions;$/;"	m	class:cv::text::ERFilterNM	file:
obj	thirdparty/svm/corrected_svm.cpp	/^            double obj;$/;"	m	struct:cv::ml::SVMImpl::Solver::SolutionInfo	file:
ofs	thirdparty/svm/corrected_svm.cpp	/^        int ofs;$/;"	m	struct:cv::ml::SVMImpl::DecisionFunc	file:
olbp	thirdparty/LBP/lbp.cpp	/^Mat libfacerec::olbp(InputArray src) {$/;"	f	class:libfacerec
olbp	thirdparty/LBP/lbp.cpp	/^void libfacerec::olbp(InputArray src, OutputArray dst) {$/;"	f	class:libfacerec
olbp_	thirdparty/LBP/lbp.cpp	/^    void olbp_(InputArray _src, OutputArray _dst) {$/;"	f	namespace:libfacerec
olong	include/easypr/util/program_options.h	/^  inline std::string olong() const { return option_long; }$/;"	f	class:program_options::Row
olong	include/easypr/util/program_options.h	/^  inline void olong(const std::string& olong) { option_long = olong; }$/;"	f	class:program_options::Row
openFileHelper	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::openFileHelper(XMLCSTR filename, XMLCSTR tag)$/;"	f	class:XMLNode
openTagLen	thirdparty/xmlParser/xmlParser.cpp	/^typedef struct { XMLCSTR lpszOpen; int openTagLen; XMLCSTR lpszClose;} ALLXMLClearTag;$/;"	m	struct:__anon2	file:
operator ()	include/easypr/util/program_options.h	/^  inline Generator& operator()(const char* option, const char* default_value,$/;"	f	class:program_options::Generator
operator ()	include/easypr/util/program_options.h	/^  inline Generator& operator()(const char* option, const char* description) {$/;"	f	class:program_options::Generator
operator ()	include/easypr/util/program_options.h	/^  inline Subroutine& operator()(const char* name) {$/;"	f	class:program_options::Generator
operator ()	thirdparty/svm/corrected_svm.cpp	/^        void operator()( const Range& range ) const$/;"	f	struct:cv::ml::SVMImpl::PredictBody
operator ()	thirdparty/svm/precomp.hpp	/^        bool operator ()(const _Tp* a, const _Tp* b) const { return *a < *b; }$/;"	f	struct:cv::ml::cmp_lt_ptr
operator ()	thirdparty/svm/precomp.hpp	/^        bool operator ()(int a, int b) const { return arr[a] < arr[b]; }$/;"	f	struct:cv::ml::cmp_lt_idx
operator ()	thirdparty/textDetect/erfilter.cpp	/^      inline double operator () (const int_fast32_t i, const int_fast32_t j) const$/;"	f	class:cv::text::dissimilarity
operator ()	thirdparty/textDetect/erfilter.cpp	/^    void MaxMeaningfulClustering::operator()(double *data, unsigned int num, int dim, unsigned char method,$/;"	f	class:cv::text::MaxMeaningfulClustering
operator <	include/easypr/core/character.hpp	/^    bool operator < (const CCharacter& other) const$/;"	f	class:easypr::CCharacter
operator <	include/easypr/core/character.hpp	/^    bool operator < (const CCharacter& other)$/;"	f	class:easypr::CCharacter
operator <	include/easypr/core/plate.hpp	/^    bool operator < (const CPlate& plate) const { return (m_score < plate.m_score); }$/;"	f	class:easypr::CPlate
operator <	include/easypr/core/plate.hpp	/^    bool operator < (const CPlate& plate) { return (m_score < plate.m_score); }$/;"	f	class:easypr::CPlate
operator <	thirdparty/textDetect/erfilter.cpp	/^      inline friend bool operator< (const node a, const node b)$/;"	f	struct:cv::text::node
operator <<	src/util/program_options.cpp	/^std::ostream& operator<<(std::ostream& out, Generator& generator) {$/;"	f	namespace:program_options
operator <<	src/util/program_options.cpp	/^std::ostream& operator<<(std::ostream& out, Subroutine& subroutine) {$/;"	f	namespace:program_options
operator <<	test/result.hpp	/^        friend std::ostream& operator << (std::ostream& os, const Params& obj)$/;"	f	class:easypr::demo::Result::Params
operator <<	test/result.hpp	/^      friend std::ostream& operator<<(std::ostream& os, const Result& obj)$/;"	f	class:easypr::demo::Result
operator =	include/easypr/core/plate.hpp	/^    CPlate& operator=(const CPlate& other) {$/;"	f	class:easypr::CPlate
operator =	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode& XMLNode::operator=( const XMLNode& A )$/;"	f	class:XMLNode
operator ==	thirdparty/textDetect/erfilter.cpp	/^      bool operator==(const line_estimates& e) const$/;"	f	struct:cv::text::line_estimates
operator ==	thirdparty/textDetect/erfilter.cpp	/^      bool operator==(const region_pair& p1) const$/;"	f	struct:cv::text::region_pair
operator ==	thirdparty/textDetect/erfilter.cpp	/^      bool operator==(const region_triplet& t1) const$/;"	f	struct:cv::text::region_triplet
operator []	thirdparty/textDetect/erfilter.cpp	/^      node * operator[] (const int_fast32_t idx) const { return Z + idx; }$/;"	f	class:cv::text::cluster_result
operator type *	thirdparty/textDetect/erfilter.cpp	/^      inline operator type *() const { return ptr; }$/;"	f	class:cv::text::auto_array_ptr
optimize_linear_svm	thirdparty/svm/corrected_svm.cpp	/^    void optimize_linear_svm()$/;"	f	class:cv::ml::SVMImpl
option_long	include/easypr/util/program_options.h	/^  std::string option_long;$/;"	m	class:program_options::Row
option_short	include/easypr/util/program_options.h	/^  std::string option_short;$/;"	m	class:program_options::Row
ord_responses	thirdparty/svm/precomp.hpp	/^            vector<double> ord_responses;$/;"	m	struct:cv::ml::DTreesImpl::WorkData
order_	include/easypr/util/program_options.h	/^  Row::Order order_;$/;"	m	class:program_options::Subroutine
oshort	include/easypr/util/program_options.h	/^  inline std::string oshort() const { return option_short; }$/;"	f	class:program_options::Row
oshort	include/easypr/util/program_options.h	/^  inline void oshort(const std::string& oshort) { option_short = oshort; }$/;"	f	class:program_options::Row
others	include/easypr/util/switch.hpp	/^  inline void others(const Scope& callback) {$/;"	f	class:program_options::Switch
others_	include/easypr/util/switch.hpp	/^  Scope others_;$/;"	m	class:program_options::Switch
p	thirdparty/mser/mser2.cpp	/^      Params p;$/;"	m	struct:cv::MSER_Impl2::WParams	file:
p	thirdparty/svm/corrected_svm.cpp	/^    double      p;$/;"	m	struct:cv::ml::SvmParams	file:
pAttribute	thirdparty/xmlParser/xmlParser.h	/^          XMLAttribute           *pAttribute;     \/\/ Array of attributes$/;"	m	struct:XMLNode::XMLNodeDataTag
pChild	thirdparty/xmlParser/xmlParser.h	/^          XMLNode                *pChild;         \/\/ Array of child nodes$/;"	m	struct:XMLNode::XMLNodeDataTag
pClear	thirdparty/xmlParser/xmlParser.h	/^          XMLClear               *pClear;         \/\/ Array of clear fields$/;"	m	struct:XMLNode::XMLNodeDataTag
pClr	thirdparty/xmlParser/xmlParser.cpp	/^    ALLXMLClearTag *pClr;$/;"	m	struct:__anon4	file:
pOrder	thirdparty/xmlParser/xmlParser.h	/^          int                    *pOrder;         \/\/ order of the child_nodes,text_fields,clear_fields$/;"	m	struct:XMLNode::XMLNodeDataTag
pParent	thirdparty/xmlParser/xmlParser.h	/^          struct XMLNodeDataTag  *pParent;        \/\/ Pointer to parent element (=NULL if root)$/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:struct:XMLNode::XMLNodeDataTag::XMLNodeDataTag
pStr	thirdparty/xmlParser/xmlParser.cpp	/^    XMLCSTR     pStr;$/;"	m	struct:__anon4	file:
pText	thirdparty/xmlParser/xmlParser.h	/^          XMLCSTR                *pText;          \/\/ Array of text fields$/;"	m	struct:XMLNode::XMLNodeDataTag
parallel_for	thirdparty/svm/precomp.hpp	/^		void parallel_for(const BlockedRange& range, const Body& body)$/;"	f	namespace:cv
parallel_reduce	thirdparty/svm/precomp.hpp	/^		void parallel_reduce(const BlockedRange& range, Body& body)$/;"	f	namespace:cv
params	thirdparty/mser/mser2.cpp	/^    Params params;$/;"	m	class:cv::MSER_Impl2	file:
params	thirdparty/svm/corrected_svm.cpp	/^        SvmParams params;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
params	thirdparty/svm/corrected_svm.cpp	/^    SvmParams params;$/;"	m	class:cv::ml::SVMImpl	file:
params	thirdparty/svm/corrected_svm.cpp	/^    SvmParams params;$/;"	m	class:cv::ml::SVMKernelImpl	file:
params	thirdparty/svm/precomp.hpp	/^        TreeParams params;$/;"	m	class:cv::ml::DTreesImpl
parent	thirdparty/svm/precomp.hpp	/^            int parent;$/;"	m	struct:cv::ml::DTreesImpl::WNode
parent	thirdparty/textDetect/erfilter.cpp	/^      auto_array_ptr<int_fast32_t> parent;$/;"	m	class:cv::text::union_find	file:
parent	thirdparty/textDetect/erfilter.hpp	/^    ERStat* parent;$/;"	m	struct:cv::text::ERStat
parent_	thirdparty/mser/mser2.cpp	/^      CompHistory* parent_;$/;"	m	struct:cv::MSER_Impl2::CompHistory	file:
parse	src/util/program_options.cpp	/^Parser::ParseResult* Parser::parse(const char* command_line) {$/;"	f	class:program_options::Parser
parse	src/util/program_options.cpp	/^Parser::ParseResult* Parser::parse(const int argc, const char** argv) {$/;"	f	class:program_options::Parser
parseClearTag	thirdparty/xmlParser/xmlParser.cpp	/^char XMLNode::parseClearTag(void *px, void *_pClear)$/;"	f	class:XMLNode
parseFile	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::parseFile(XMLCSTR filename, XMLCSTR tag, XMLResults *pResults)$/;"	f	class:XMLNode
parseString	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode XMLNode::parseString(XMLCSTR lpszXML, XMLCSTR tag, XMLResults *pResults)$/;"	f	class:XMLNode
parser_	include/easypr/util/program_options.h	/^  Parser* parser_;$/;"	m	class:program_options::Generator
pass	thirdparty/mser/mser2.cpp	/^    void pass(const Mat& img, vector<vector<Point> >& msers, vector<Rect>& bboxvec,$/;"	f	class:cv::MSER_Impl2
pass2Only	thirdparty/mser/mser2.cpp	/^      bool pass2Only;$/;"	m	struct:cv::MSER_Impl2::Params	file:
perimeter	thirdparty/textDetect/erfilter.hpp	/^    int perimeter;$/;"	m	struct:cv::text::ERStat
pix0	thirdparty/mser/mser2.cpp	/^      Pixel* pix0;$/;"	m	struct:cv::MSER_Impl2::WParams	file:
pixbuf	thirdparty/mser/mser2.cpp	/^    vector<Pixel> pixbuf;$/;"	m	class:cv::MSER_Impl2	file:
pixel	thirdparty/textDetect/erfilter.hpp	/^    int pixel;$/;"	m	struct:cv::text::ERStat
pixels	thirdparty/textDetect/erfilter.hpp	/^    std::vector<int> *pixels;$/;"	m	struct:cv::text::ERStat
plateColorJudge	src/core/core_func.cpp	/^  bool plateColorJudge(const Mat &src, const Color r, const bool adaptive_minsv,$/;"	f	namespace:easypr
plateColorLocate	src/core/plate_locate.cpp	/^int CPlateLocate::plateColorLocate(Mat src, vector<CPlate> &candPlates,$/;"	f	class:easypr::CPlateLocate
plateDetect	src/core/plate_detect.cpp	/^  int CPlateDetect::plateDetect(Mat src, std::vector<CPlate> &resultVec, int img_index) {$/;"	f	class:easypr::CPlateDetect
plateDetect	src/core/plate_detect.cpp	/^  int CPlateDetect::plateDetect(Mat src, std::vector<CPlate> &resultVec, int type,$/;"	f	class:easypr::CPlateDetect
plateJudge	src/core/plate_judge.cpp	/^  int PlateJudge::plateJudge(const Mat& plateMat) {$/;"	f	class:easypr::PlateJudge
plateJudge	src/core/plate_judge.cpp	/^  int PlateJudge::plateJudge(const std::vector<CPlate> &inVec,$/;"	f	class:easypr::PlateJudge
plateJudge	src/core/plate_judge.cpp	/^  int PlateJudge::plateJudge(const std::vector<Mat> &inVec,$/;"	f	class:easypr::PlateJudge
plateJudgeUsingNMS	src/core/plate_judge.cpp	/^  int PlateJudge::plateJudgeUsingNMS(const std::vector<CPlate> &inVec, std::vector<CPlate> &resultVec, int maxPlates) {$/;"	f	class:easypr::PlateJudge
plateLocate	src/core/plate_locate.cpp	/^int CPlateLocate::plateLocate(Mat src, vector<CPlate> &resultVec, int index) {$/;"	f	class:easypr::CPlateLocate
plateLocate	src/core/plate_locate.cpp	/^int CPlateLocate::plateLocate(Mat src, vector<Mat> &resultVec, int index) {$/;"	f	class:easypr::CPlateLocate
plateMserLocate	src/core/plate_locate.cpp	/^int CPlateLocate::plateMserLocate(Mat src, vector<CPlate> &candPlates, int img_index) {$/;"	f	class:easypr::CPlateLocate
plateRecognize	src/core/plate_recognize.cpp	/^int CPlateRecognize::plateRecognize(const Mat& src, std::vector<CPlate> &plateVecOut, int img_index) {$/;"	f	class:easypr::CPlateRecognize
plateRecognize	src/core/plate_recognize.cpp	/^int CPlateRecognize::plateRecognize(const Mat& src, std::vector<std::string> &licenseVec) {$/;"	f	class:easypr::CPlateRecognize
plateSetScore	src/core/plate_judge.cpp	/^  int PlateJudge::plateSetScore(CPlate& plate) {$/;"	f	class:easypr::PlateJudge
plateSobelLocate	src/core/plate_locate.cpp	/^int CPlateLocate::plateSobelLocate(Mat src, vector<CPlate> &candPlates,$/;"	f	class:easypr::CPlateLocate
plate_judge	include/easypr/api.hpp	/^static bool plate_judge(const char* image, const char* model) {$/;"	f	namespace:easypr::api
plate_locate	include/easypr/api.hpp	/^static void plate_locate(const char* image, const bool life_mode = true) {$/;"	f	namespace:easypr::api
plate_recognize	include/easypr/api.hpp	/^static std::vector<std::string> plate_recognize(const char* image,$/;"	f	namespace:easypr::api
plates_folder_	include/easypr/train/svm_train.h	/^  const char* plates_folder_;$/;"	m	class:easypr::SvmTrain
points	thirdparty/textDetect/erfilter.cpp	/^      vector<vector<float> > points; \/\/ nD points in this cluster$/;"	m	struct:cv::text::HCluster	file:
pos	thirdparty/textDetect/erfilter.cpp	/^      int_fast32_t pos;$/;"	m	class:cv::text::cluster_result	file:
pos	thirdparty/textDetect/erfilter.cpp	/^      int_fast32_t pos;$/;"	m	class:cv::text::linkage_output	file:
positionOfChildNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLElementPosition XMLNode::positionOfChildNode(XMLCSTR name, int count) const$/;"	f	class:XMLNode
positionOfChildNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLElementPosition XMLNode::positionOfChildNode(XMLNode x)  const$/;"	f	class:XMLNode
positionOfChildNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLElementPosition XMLNode::positionOfChildNode(int i) const { if (i>=d->nChild) i=d->nChild-1; return findPosition(d,i,eNodeChild); }$/;"	f	class:XMLNode
positionOfClear	thirdparty/xmlParser/xmlParser.cpp	/^XMLElementPosition XMLNode::positionOfClear    (int i) const { if (i>=d->nClear) i=d->nClear-1; return findPosition(d,i,eNodeClear); }$/;"	f	class:XMLNode
positionOfClear	thirdparty/xmlParser/xmlParser.cpp	/^XMLElementPosition XMLNode::positionOfClear(XMLCSTR lpszValue) const { return positionOfClear(indexClear(lpszValue)); }$/;"	f	class:XMLNode
positionOfClear	thirdparty/xmlParser/xmlParser.cpp	/^XMLElementPosition XMLNode::positionOfClear(XMLClear *a) const { if (a) return positionOfClear(a->lpszValue); return positionOfClear(); }$/;"	f	class:XMLNode
positionOfText	thirdparty/xmlParser/xmlParser.cpp	/^XMLElementPosition XMLNode::positionOfText     (int i) const { if (i>=d->nText ) i=d->nText-1;  return findPosition(d,i,eNodeText ); }$/;"	f	class:XMLNode
positionOfText	thirdparty/xmlParser/xmlParser.cpp	/^XMLElementPosition XMLNode::positionOfText (XMLCSTR lpszValue) const { return positionOfText (indexText (lpszValue)); }$/;"	f	class:XMLNode
postprocess	thirdparty/textDetect/erfilter.cpp	/^      void postprocess(cluster_result & Z2) const$/;"	f	class:cv::text::dissimilarity
postprocessarg	thirdparty/textDetect/erfilter.cpp	/^      double postprocessarg;$/;"	m	class:cv::text::dissimilarity	file:
postprocessfn	thirdparty/textDetect/erfilter.cpp	/^      void (cluster_result::*postprocessfn) (const double) const;$/;"	m	class:cv::text::dissimilarity	file:
pr_	include/easypr/util/program_options.h	/^  ParseResult* pr_;$/;"	m	class:program_options::Parser
precomputed	thirdparty/textDetect/erfilter.cpp	/^      auto_array_ptr<double> precomputed;$/;"	m	class:cv::text::dissimilarity	file:
pred	thirdparty/textDetect/erfilter.cpp	/^      auto_array_ptr<int_fast32_t> pred;$/;"	m	class:cv::text::doubly_linked_list	file:
predict	thirdparty/svm/corrected_svm.cpp	/^    float predict( InputArray _samples, OutputArray _results, int flags ) const$/;"	f	class:cv::ml::SVMImpl
prepare	src/train/svm_train.cpp	/^void SvmTrain::prepare() {$/;"	f	class:easypr::SvmTrain
preprocess1	thirdparty/mser/mser2.cpp	/^    void preprocess1(const Mat& img, int* level_size)$/;"	f	class:cv::MSER_Impl2
preprocess2	thirdparty/mser/mser2.cpp	/^    void preprocess2(const Mat& img, int* level_size)$/;"	f	class:cv::MSER_Impl2
preprocessChar	src/core/chars_segment.cpp	/^Mat CCharsSegment::preprocessChar(Mat in) {$/;"	f	class:easypr::CCharsSegment
preprocessChar	src/core/core_func.cpp	/^  Mat preprocessChar(Mat in, int char_size) {$/;"	f	namespace:easypr
preprocessCharMat	src/core/chars_segment.cpp	/^Mat preprocessCharMat(Mat in, int char_size) {$/;"	f	namespace:easypr
prev	thirdparty/svm/corrected_svm.cpp	/^            int prev;$/;"	m	struct:cv::ml::SVMImpl::Solver::KernelRow	file:
prev	thirdparty/textDetect/erfilter.hpp	/^    ERStat* prev;$/;"	m	struct:cv::text::ERStat
print_file_lines	include/easypr/util/util.h	/^  static void print_file_lines(const std::string &file) {$/;"	f	class:easypr::Utils
print_str_lines	include/easypr/util/util.h	/^  static void print_str_lines(const char** lines) {$/;"	f	class:easypr::Utils
print_str_lines	include/easypr/util/util.h	/^  static void print_str_lines(const std::initializer_list<const char*> &lines) {$/;"	f	class:easypr::Utils
print_with_row	src/util/program_options.cpp	/^void Subroutine::print_with_row(std::ostream& out) {$/;"	f	class:program_options::Subroutine
print_with_template	src/util/program_options.cpp	/^void Subroutine::print_with_template(std::ostream& out) {$/;"	f	class:program_options::Subroutine
priors	thirdparty/svm/precomp.hpp	/^        Mat priors;$/;"	m	struct:cv::ml::TreeParams
probability	thirdparty/textDetect/erfilter.cpp	/^      double probability;      \/\/the probability of this group of being a text group$/;"	m	struct:cv::text::HCluster	file:
probability	thirdparty/textDetect/erfilter.cpp	/^    double MaxMeaningfulClustering::probability(vector<int> &cluster)$/;"	f	class:cv::text::MaxMeaningfulClustering
probability	thirdparty/textDetect/erfilter.hpp	/^    double probability;$/;"	m	struct:cv::text::ERStat
program_options	include/easypr/util/program_options.h	/^namespace program_options {$/;"	n
program_options	include/easypr/util/switch.hpp	/^namespace program_options {$/;"	n
program_options	src/util/program_options.cpp	/^namespace program_options {$/;"	n	file:
projectSegment	src/core/chars_segment.cpp	/^int CCharsSegment::projectSegment(const Mat& input, Color color, vector<int>& out_indexs) {$/;"	f	class:easypr::CCharsSegment
ptr	thirdparty/textDetect/erfilter.cpp	/^      type * ptr;$/;"	m	class:cv::text::auto_array_ptr	file:
qnxnto	build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
quality	thirdparty/svm/precomp.hpp	/^            float quality;$/;"	m	struct:cv::ml::DTreesImpl::WSplit
r	thirdparty/svm/corrected_svm.cpp	/^            double r;   \/\/ for Solver_NU$/;"	m	struct:cv::ml::SVMImpl::Solver::SolutionInfo	file:
raw_moments	thirdparty/textDetect/erfilter.hpp	/^    double raw_moments[2];     \/\/!< order 1 raw moments to derive the centroid$/;"	m	struct:cv::text::ERStat
reFoundAndCombineRect	src/core/core_func.cpp	/^  void reFoundAndCombineRect(std::vector<CCharacter> &mserCharacter, float min_thresh, float max_thresh,$/;"	f	namespace:easypr
read	thirdparty/svm/corrected_svm.cpp	/^    void read( const FileNode& fn )$/;"	f	class:cv::ml::SVMImpl
readFileNodeList	thirdparty/LBP/helper.hpp	/^  inline void readFileNodeList(const FileNode& fn, vector<_Tp>& result) {$/;"	f	namespace:libfacerec
readTermCrit	thirdparty/svm/precomp.hpp	/^    static inline TermCriteria readTermCrit(const FileNode& fn)$/;"	f	namespace:cv::ml
readVectorOrMat	thirdparty/svm/precomp.hpp	/^    static inline void readVectorOrMat(const FileNode & node, std::vector<T> & v)$/;"	f	namespace:cv::ml
read_params	thirdparty/svm/corrected_svm.cpp	/^    void read_params( const FileNode& fn )$/;"	f	class:cv::ml::SVMImpl
realMSER	thirdparty/mser/mser2.cpp	/^      bool realMSER;$/;"	m	struct:cv::MSER_Impl2::Params	file:
receive_worker	src/network/server_socket.cpp	/^static pthread_t receive_worker;$/;"	v	file:
receive_worker_start	src/network/server_socket.cpp	/^int receive_worker_start()$/;"	f
receive_worker_thread	src/network/server_socket.cpp	/^void *receive_worker_thread(void*)$/;"	f
reconstruct_gradient	thirdparty/svm/corrected_svm.cpp	647;"	d	file:
reconstruct_gradient	thirdparty/svm/corrected_svm.cpp	648;"	d	file:
rect	thirdparty/mser/mser2.cpp	/^      Rect rect;$/;"	m	struct:cv::MSER_Impl2::CompHistory	file:
rect	thirdparty/mser/mser2.cpp	/^      Rect rect;$/;"	m	struct:cv::MSER_Impl2::ConnectedComp	file:
rect	thirdparty/textDetect/erfilter.cpp	/^      Rect  rect;$/;"	m	struct:cv::text::ERFeatures	file:
rect	thirdparty/textDetect/erfilter.hpp	/^    Rect rect;$/;"	m	struct:cv::text::ERStat
rectEnlarge	src/core/core_func.cpp	/^  Rect rectEnlarge(const Rect &src, const int mat_width, const int mat_height) {$/;"	f	namespace:easypr
rectFit	src/core/core_func.cpp	/^  Rect rectFit(const Rect &src, const int mat_width, const int mat_height) {$/;"	f	namespace:easypr
ref_count	thirdparty/xmlParser/xmlParser.h	/^          int                    ref_count;       \/\/ for garbage collection (smart pointers)$/;"	m	struct:XMLNode::XMLNodeDataTag
reflections	include/easypr/util/switch.hpp	/^  inline Reflections reflections() const { return reflections_; }$/;"	f	class:program_options::Switch
reflections_	include/easypr/util/switch.hpp	/^  Reflections reflections_;$/;"	m	class:program_options::Switch
region_mask	thirdparty/textDetect/erfilter.cpp	/^      Mat region_mask;$/;"	m	class:cv::text::ERFilterNM	file:
region_pair	thirdparty/textDetect/erfilter.cpp	/^      region_pair(Vec2i _a, Vec2i _b) : a(_a), b(_b) {}$/;"	f	struct:cv::text::region_pair
region_pair	thirdparty/textDetect/erfilter.cpp	/^    struct region_pair$/;"	s	namespace:cv::text	file:
region_sequence	thirdparty/textDetect/erfilter.cpp	/^      region_sequence() {}$/;"	f	struct:cv::text::region_sequence
region_sequence	thirdparty/textDetect/erfilter.cpp	/^      region_sequence(region_triplet t)$/;"	f	struct:cv::text::region_sequence
region_sequence	thirdparty/textDetect/erfilter.cpp	/^    struct region_sequence$/;"	s	namespace:cv::text	file:
region_triplet	thirdparty/textDetect/erfilter.cpp	/^      region_triplet(Vec2i _a, Vec2i _b, Vec2i _c) : a(_a), b(_b), c(_c) {}$/;"	f	struct:cv::text::region_triplet
region_triplet	thirdparty/textDetect/erfilter.cpp	/^    struct region_triplet$/;"	s	namespace:cv::text	file:
regions	thirdparty/textDetect/erfilter.cpp	/^      vector<ERFeatures> &regions;$/;"	m	class:cv::text::MaxMeaningfulClustering	file:
regions	thirdparty/textDetect/erfilter.cpp	/^      vector<ERStat> *regions;$/;"	m	class:cv::text::ERFilterNM	file:
regressionAccuracy	thirdparty/svm/precomp.hpp	/^        float regressionAccuracy;$/;"	m	struct:cv::ml::TreeParams
remove	src/util/kv.cpp	/^void Kv::remove(const std::string &key) {$/;"	f	class:easypr::Kv
remove	thirdparty/textDetect/erfilter.cpp	/^      void remove(const int_fast32_t idx)$/;"	f	class:cv::text::doubly_linked_list
removeCommentsInMiddleOfText	thirdparty/xmlParser/xmlParser.cpp	/^static char guessWideCharChars=1, dropWhiteSpace=1, removeCommentsInMiddleOfText=1;$/;"	v	file:
removeOrderElement	thirdparty/xmlParser/xmlParser.cpp	/^int XMLNode::removeOrderElement(XMLNodeData *d, XMLElementType t, int index)$/;"	f	class:XMLNode
removeOutliers	src/core/core_func.cpp	/^  void removeOutliers(std::vector<CCharacter> &charGroup, double thresh, Mat result) {$/;"	f	namespace:easypr
removeRightOutliers	src/core/core_func.cpp	/^  void removeRightOutliers(std::vector<CCharacter> &charGroup, std::vector<CCharacter> &out_charGroup, double thresh1,$/;"	f	namespace:easypr
remove_dups	thirdparty/LBP/helper.hpp	/^inline vector<_Tp> remove_dups(const vector<_Tp>& src) {$/;"	f
require_value	include/easypr/util/program_options.h	/^  bool require_value;$/;"	m	class:program_options::Row
required	include/easypr/util/program_options.h	/^  inline bool required() const { return require_value; }$/;"	f	class:program_options::Row
required	include/easypr/util/program_options.h	/^  inline void required(bool required) { require_value = required; }$/;"	f	class:program_options::Row
results	thirdparty/svm/corrected_svm.cpp	/^        Mat* results;$/;"	m	struct:cv::ml::SVMImpl::PredictBody	file:
returnDFVal	thirdparty/svm/corrected_svm.cpp	/^        bool returnDFVal;$/;"	m	struct:cv::ml::SVMImpl::PredictBody	file:
rho	thirdparty/svm/corrected_svm.cpp	/^            double rho;$/;"	m	struct:cv::ml::SVMImpl::Solver::SolutionInfo	file:
rho	thirdparty/svm/corrected_svm.cpp	/^        double rho;$/;"	m	struct:cv::ml::SVMImpl::DecisionFunc	file:
right	thirdparty/svm/precomp.hpp	/^            int right;$/;"	m	struct:cv::ml::DTreesImpl::WNode
roots	thirdparty/svm/precomp.hpp	/^        vector<int> roots;$/;"	m	class:cv::ml::DTreesImpl
rotateImg	src/train/create_data.cpp	/^  Mat rotateImg(Mat source, float angle, int bk){$/;"	f	namespace:easypr
rotatedRectangle	src/core/core_func.cpp	/^  void rotatedRectangle(InputOutputArray image, RotatedRect rrect, const Scalar &color, int thickness, int lineType,$/;"	f	namespace:easypr
rotation	src/core/plate_locate.cpp	/^bool CPlateLocate::rotation(Mat &in, Mat &out, const Size rect_size,$/;"	f	class:easypr::CPlateLocate
run	thirdparty/textDetect/erfilter.cpp	/^    void ERFilterNM::run(InputArray image, vector<ERStat>& _regions)$/;"	f	class:cv::text::ERFilterNM
s	thirdparty/xmlParser/xmlParser.cpp	/^typedef struct { XMLCSTR s; int l; XMLCHAR c;} XMLCharacterEntity;$/;"	m	struct:__anon3	file:
sample_count	thirdparty/svm/corrected_svm.cpp	/^        int sample_count;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
sample_count	thirdparty/svm/precomp.hpp	/^            int sample_count;$/;"	m	struct:cv::ml::DTreesImpl::WNode
sample_weights	thirdparty/svm/precomp.hpp	/^            vector<double> sample_weights;$/;"	m	struct:cv::ml::DTreesImpl::WorkData
samples	thirdparty/svm/corrected_svm.cpp	/^        Mat samples;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
samples	thirdparty/svm/corrected_svm.cpp	/^        const Mat* samples;$/;"	m	struct:cv::ml::SVMImpl::PredictBody	file:
scaleBackRRect	src/core/core_func.cpp	/^  RotatedRect scaleBackRRect(const RotatedRect &rr, const float scale_ratio) {$/;"	f	namespace:easypr
scaleImage	src/core/core_func.cpp	/^  Mat scaleImage(const Mat &image, const Size &maxSize, double &scale_ratio) {$/;"	f	namespace:easypr
sdata	src/network/networkConfig.cpp	/^struct senddata sdata;$/;"	v	typeref:struct:senddata
sdata	src/train/ann_train.cpp	/^cv::Ptr<cv::ml::TrainData> AnnTrain::sdata(size_t number_for_count) {$/;"	f	class:easypr::AnnTrain
searchWeakSeed	src/core/core_func.cpp	/^  void searchWeakSeed(const std::vector<CCharacter> &charVec, std::vector<CCharacter> &mserCharacter, double thresh1,$/;"	f	namespace:easypr
select	include/easypr/util/switch.hpp	/^Switch<Ty> select(const Ty& expression) {$/;"	f	namespace:program_options
select_working_set	thirdparty/svm/corrected_svm.cpp	/^        bool select_working_set( int& out_i, int& out_j )$/;"	f	class:cv::ml::SVMImpl::Solver
select_working_set_func	thirdparty/svm/corrected_svm.cpp	/^        SelectWorkingSet select_working_set_func;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
select_working_set_nu_svm	thirdparty/svm/corrected_svm.cpp	/^        bool select_working_set_nu_svm( int& out_i, int& out_j )$/;"	f	class:cv::ml::SVMImpl::Solver
senddata	include/easypr/network/networkConfig.hpp	/^struct senddata {$/;"	s
server_addr	src/network/server_socket.cpp	/^struct sockaddr_in server_addr;$/;"	v	typeref:struct:sockaddr_in
server_port	include/easypr/network/server_socket.hpp	/^	unsigned short server_port;$/;"	m	struct:socket_config
server_socket_init	src/network/server_socket.cpp	/^int server_socket_init(struct socket_config config)$/;"	f
setAvgSeconds	test/result.hpp	/^      inline void setAvgSeconds(float param) { m_avgSeconds = param; }$/;"	f	class:easypr::demo::Result
setBluePercent	include/easypr/core/chars_recognise.h	/^  inline void setBluePercent(float param) {$/;"	f	class:easypr::CCharsRecognise
setBluePercent	include/easypr/core/chars_segment.h	/^  inline void setBluePercent(float param) { m_BluePercent = param; }$/;"	f	class:easypr::CCharsSegment
setCVFolds	thirdparty/svm/precomp.hpp	/^        inline void setCVFolds(int val)$/;"	f	struct:cv::ml::TreeParams
setCallback	thirdparty/textDetect/erfilter.cpp	/^    void ERFilterNM::setCallback(const Ptr<ERFilter::Callback>& cb)$/;"	f	class:cv::text::ERFilterNM
setCenterPoint	include/easypr/core/character.hpp	/^    inline void setCenterPoint(Point param) { m_center = param; }$/;"	f	class:easypr::CCharacter
setCharacterGrayMat	include/easypr/core/character.hpp	/^    inline void setCharacterGrayMat(Mat param) { m_characterGrayMat = param; }$/;"	f	class:easypr::CCharacter
setCharacterMat	include/easypr/core/character.hpp	/^    inline void setCharacterMat(Mat param) { m_characterMat = param; }$/;"	f	class:easypr::CCharacter
setCharacterPos	include/easypr/core/character.hpp	/^    inline void setCharacterPos(Rect param) { m_characterPos = param; }$/;"	f	class:easypr::CCharacter
setCharacterScore	include/easypr/core/character.hpp	/^    inline void setCharacterScore(double param) { m_score = param; }$/;"	f	class:easypr::CCharacter
setCharacterStr	include/easypr/core/character.hpp	/^    inline void setCharacterStr(String param) { m_characterStr = param; }$/;"	f	class:easypr::CCharacter
setChineseKey	include/easypr/core/plate.hpp	/^    inline void setChineseKey(String param) { m_chineseKey = param; }$/;"	f	class:easypr::CPlate
setChineseMat	include/easypr/core/plate.hpp	/^    inline void setChineseMat(Mat param) { m_chineseMat = param; }$/;"	f	class:easypr::CPlate
setChinesePreciese	test/result.hpp	/^      inline void setChinesePreciese(float param) { m_chinesePrecise = param; }$/;"	f	class:easypr::demo::Result
setColorThreshold	include/easypr/core/chars_recognise.h	/^  inline void setColorThreshold(int param) {$/;"	f	class:easypr::CCharsRecognise
setColorThreshold	include/easypr/core/chars_segment.h	/^  inline void setColorThreshold(int param) { m_ColorThreshold = param; }$/;"	f	class:easypr::CCharsSegment
setCustomKernel	thirdparty/svm/corrected_svm.cpp	/^    void setCustomKernel(const Ptr<Kernel> &_kernel)$/;"	f	class:cv::ml::SVMImpl
setDebug	include/easypr/core/chars_segment.h	/^  inline void setDebug(int param) { m_debug = param; }$/;"	f	class:easypr::CCharsSegment
setDebug	include/easypr/core/plate_locate.h	/^  inline void setDebug(bool param) { m_debug = param; }$/;"	f	class:easypr::CPlateLocate
setDebug	include/easypr/core/plate_recognize.h	/^    inline void setDebug(bool param) { setResultShow(param); }$/;"	f	class:easypr::CPlateRecognize
setDelta	thirdparty/mser/mser2.cpp	/^    void setDelta(int delta) { params.delta = delta; }$/;"	f	class:cv::MSER_Impl2
setDetectFscore	test/result.hpp	/^      inline void setDetectFscore(float param) { m_detectFscore = param; }$/;"	f	class:easypr::demo::Result
setDetectPrecise	test/result.hpp	/^      inline void setDetectPrecise(float param) { m_detectPrecise = param; }$/;"	f	class:easypr::demo::Result
setDetectRate	test/result.hpp	/^      inline void setDetectRate(float param) { m_detectRate = param; }$/;"	f	class:easypr::demo::Result
setDetectRecall	test/result.hpp	/^      inline void setDetectRecall(float param) { m_detectRecall = param; }$/;"	f	class:easypr::demo::Result
setDetectShow	include/easypr/core/plate_detect.h	/^  inline void setDetectShow(bool param) { m_showDetect = param; }$/;"	f	class:easypr::CPlateDetect
setDetectShow	include/easypr/core/plate_recognize.h	/^    inline void setDetectShow(bool param) { CPlateDetect::setDetectShow(param); }$/;"	f	class:easypr::CPlateRecognize
setDetectType	include/easypr/core/plate_detect.h	/^  inline void setDetectType(int param) { m_type = param; }$/;"	f	class:easypr::CPlateDetect
setDetectType	include/easypr/core/plate_recognize.h	/^    inline void setDetectType(int param) { CPlateDetect::setDetectType(param); }$/;"	f	class:easypr::CPlateRecognize
setDir	thirdparty/mser/mser2.cpp	/^      void setDir(int dir) { val = (val & NEXT_MASK) | (dir << DIR_SHIFT); }$/;"	f	struct:cv::MSER_Impl2::Pixel
setGaussianBlurSize	include/easypr/core/plate_detect.h	/^  inline void setGaussianBlurSize(int param) {$/;"	f	class:easypr::CPlateDetect
setGaussianBlurSize	include/easypr/core/plate_locate.h	/^  inline void setGaussianBlurSize(int param) { m_GaussianBlurSize = param; }$/;"	f	class:easypr::CPlateLocate
setGlobalOptions	thirdparty/xmlParser/xmlParser.cpp	/^char XMLNode::setGlobalOptions(XMLCharEncoding _characterEncoding, char _guessWideCharChars,$/;"	f	class:XMLNode
setIndex	include/easypr/core/character.hpp	/^    inline void setIndex(int param) { m_index = param; }$/;"	f	class:easypr::CCharacter
setIsChinese	include/easypr/core/character.hpp	/^    inline void setIsChinese(bool param) { m_isChinese = param; }$/;"	f	class:easypr::CCharacter
setIsUpdate	include/easypr/core/params.h	/^    inline void setIsUpdate(bool param) { m_isUpdate = param; }$/;"	f	class:easypr::CParams
setJudgeAngle	include/easypr/core/plate_detect.h	/^  inline void setJudgeAngle(int param) { m_plateLocate->setJudgeAngle(param); }$/;"	f	class:easypr::CPlateDetect
setJudgeAngle	include/easypr/core/plate_locate.h	/^  inline void setJudgeAngle(int param) { m_angle = param; }$/;"	f	class:easypr::CPlateLocate
setKernel	thirdparty/svm/corrected_svm.cpp	/^    void setKernel(int kernelType)$/;"	f	class:cv::ml::SVMImpl
setLifemode	include/easypr/core/plate_recognize.h	/^    inline void setLifemode(bool param) { CPlateDetect::setPDLifemode(param); }$/;"	f	class:easypr::CPlateRecognize
setLifemode	src/core/plate_locate.cpp	/^void CPlateLocate::setLifemode(bool param) {$/;"	f	class:easypr::CPlateLocate
setLiuDingSize	include/easypr/core/chars_recognise.h	/^  inline void setLiuDingSize(int param) {$/;"	f	class:easypr::CCharsRecognise
setLiuDingSize	include/easypr/core/chars_segment.h	/^  inline void setLiuDingSize(int param) { m_LiuDingSize = param; }$/;"	f	class:easypr::CCharsSegment
setMaxArea	thirdparty/mser/mser2.cpp	/^    void setMaxArea(int maxArea) { params.maxArea = maxArea; }$/;"	f	class:cv::MSER_Impl2
setMaxArea	thirdparty/textDetect/erfilter.cpp	/^    void ERFilterNM::setMaxArea(float _maxArea)$/;"	f	class:cv::text::ERFilterNM
setMaxCategories	thirdparty/svm/precomp.hpp	/^        inline void setMaxCategories(int val)$/;"	f	struct:cv::ml::TreeParams
setMaxDepth	thirdparty/svm/precomp.hpp	/^        inline void setMaxDepth(int val)$/;"	f	struct:cv::ml::TreeParams
setMaxPlates	include/easypr/core/plate_detect.h	/^  inline void setMaxPlates(int param) { m_maxPlates = param; }$/;"	f	class:easypr::CPlateDetect
setMinArea	thirdparty/mser/mser2.cpp	/^    void setMinArea(int minArea) { params.minArea = minArea; }$/;"	f	class:cv::MSER_Impl2
setMinArea	thirdparty/textDetect/erfilter.cpp	/^    void ERFilterNM::setMinArea(float _minArea)$/;"	f	class:cv::text::ERFilterNM
setMinProbability	thirdparty/textDetect/erfilter.cpp	/^    void ERFilterNM::setMinProbability(float _minProbability)$/;"	f	class:cv::text::ERFilterNM
setMinProbabilityDiff	thirdparty/textDetect/erfilter.cpp	/^    void ERFilterNM::setMinProbabilityDiff(float _minProbabilityDiff)$/;"	f	class:cv::text::ERFilterNM
setMinSampleCount	thirdparty/svm/precomp.hpp	/^        inline void setMinSampleCount(int val)$/;"	f	struct:cv::ml::TreeParams
setMorphSizeHeight	include/easypr/core/plate_detect.h	/^  inline void setMorphSizeHeight(int param) {$/;"	f	class:easypr::CPlateDetect
setMorphSizeHeight	include/easypr/core/plate_locate.h	/^  inline void setMorphSizeHeight(int param) { m_MorphSizeHeight = param; }$/;"	f	class:easypr::CPlateLocate
setMorphSizeWidth	include/easypr/core/plate_detect.h	/^  inline void setMorphSizeWidth(int param) {$/;"	f	class:easypr::CPlateDetect
setMorphSizeWidth	include/easypr/core/plate_locate.h	/^  inline void setMorphSizeWidth(int param) { m_MorphSizeWidth = param; }$/;"	f	class:easypr::CPlateLocate
setMserCharacter	include/easypr/core/plate.hpp	/^    inline void setMserCharacter(const std::vector<CCharacter>& param) { m_mserCharVec = param; }$/;"	f	class:easypr::CPlate
setNext	thirdparty/mser/mser2.cpp	/^      void setNext(int next) { val = (val & ~NEXT_MASK) | next; }$/;"	f	struct:cv::MSER_Impl2::Pixel
setNonMaxSuppression	thirdparty/textDetect/erfilter.cpp	/^    void ERFilterNM::setNonMaxSuppression(bool _nonMaxSuppression)$/;"	f	class:cv::text::ERFilterNM
setNumberForCount	include/easypr/train/annCh_train.h	/^  inline void setNumberForCount(int n) {$/;"	f	class:easypr::AnnChTrain
setOneError	test/result.hpp	/^      inline void setOneError(float param) { m_1error = param; }$/;"	f	class:easypr::demo::Result
setOstuLevel	include/easypr/core/character.hpp	/^    inline void setOstuLevel(double param) { m_ostuLevel = param; }$/;"	f	class:easypr::CCharacter
setOstuLevel	include/easypr/core/plate.hpp	/^    inline void setOstuLevel(double param) { m_ostuLevel = param; }$/;"	f	class:easypr::CPlate
setPDDebug	include/easypr/core/plate_detect.h	/^  inline void setPDDebug(bool param) { $/;"	f	class:easypr::CPlateDetect
setPDLifemode	include/easypr/core/plate_detect.h	/^  inline void setPDLifemode(bool param) { m_plateLocate->setLifemode(param); }$/;"	f	class:easypr::CPlateDetect
setParam1b	include/easypr/core/params.h	/^    inline void setParam1b(bool param) { m_param1b = param; }$/;"	f	class:easypr::CParams
setParam1b	test/config.hpp	/^      inline void setParam1b(bool* param, int size) { m_param1b.assign(param, param + size); }$/;"	f	class:easypr::demo::Config
setParam1b	test/result.hpp	/^        inline void setParam1b(bool param) { m_param1b = param; }$/;"	f	class:easypr::demo::Result::Params
setParam1f	include/easypr/core/params.h	/^    inline void setParam1f(float param) { m_param1f = param; }$/;"	f	class:easypr::CParams
setParam1f	test/config.hpp	/^      inline void setParam1f(float* param, int size) { m_param1f.assign(param, param + size); }$/;"	f	class:easypr::demo::Config
setParam1f	test/result.hpp	/^        inline void setParam1f(float param) { m_param1f = param; }$/;"	f	class:easypr::demo::Result::Params
setParam1i	include/easypr/core/params.h	/^    inline void setParam1i(int param) { m_param1i = param; }$/;"	f	class:easypr::CParams
setParam1i	test/config.hpp	/^      inline void setParam1i(int* param, int size) { m_param1i.assign(param, param + size); }$/;"	f	class:easypr::demo::Config
setParam1i	test/result.hpp	/^        inline void setParam1i(int param) { m_param1i = param; }$/;"	f	class:easypr::demo::Result::Params
setParam2b	include/easypr/core/params.h	/^    inline void setParam2b(bool param) { m_param2b = param; }$/;"	f	class:easypr::CParams
setParam2b	test/config.hpp	/^      inline void setParam2b(bool* param, int size) { m_param2b.assign(param, param + size); }$/;"	f	class:easypr::demo::Config
setParam2b	test/result.hpp	/^        inline void setParam2b(bool param) { m_param2b = param; }$/;"	f	class:easypr::demo::Result::Params
setParam2f	include/easypr/core/params.h	/^    inline void setParam2f(float param) { m_param2f = param; }$/;"	f	class:easypr::CParams
setParam2f	test/config.hpp	/^      inline void setParam2f(float* param, int size) { m_param2f.assign(param, param + size); }$/;"	f	class:easypr::demo::Config
setParam2f	test/result.hpp	/^        inline void setParam2f(float param) { m_param2f = param; }$/;"	f	class:easypr::demo::Result::Params
setParam2i	include/easypr/core/params.h	/^    inline void setParam2i(int param) { m_param2i = param; }$/;"	f	class:easypr::CParams
setParam2i	test/config.hpp	/^      inline void setParam2i(int* param, int size) { m_param2i.assign(param, param + size); }$/;"	f	class:easypr::demo::Config
setParam2i	test/result.hpp	/^        inline void setParam2i(int param) { m_param2i = param; }$/;"	f	class:easypr::demo::Result::Params
setParam3b	include/easypr/core/params.h	/^    inline void setParam3b(bool param) { m_param3b = param; }$/;"	f	class:easypr::CParams
setParam3b	test/config.hpp	/^      inline void setParam3b(bool* param, int size) { m_param3b.assign(param, param + size); }$/;"	f	class:easypr::demo::Config
setParam3b	test/result.hpp	/^        inline void setParam3b(bool param) { m_param3b = param; }$/;"	f	class:easypr::demo::Result::Params
setParam3f	include/easypr/core/params.h	/^    inline void setParam3f(float param) { m_param3f = param; }$/;"	f	class:easypr::CParams
setParam3f	test/config.hpp	/^      inline void setParam3f(float* param, int size) { m_param3f.assign(param, param + size); }$/;"	f	class:easypr::demo::Config
setParam3f	test/result.hpp	/^        inline void setParam3f(float param) { m_param3f = param; }$/;"	f	class:easypr::demo::Result::Params
setParam3i	include/easypr/core/params.h	/^    inline void setParam3i(int param) { m_param3i = param; }$/;"	f	class:easypr::CParams
setParam3i	test/config.hpp	/^      inline void setParam3i(int* param, int size) { m_param3i.assign(param, param + size); }$/;"	f	class:easypr::demo::Config
setParam3i	test/result.hpp	/^        inline void setParam3i(int param) { m_param3i = param; }$/;"	f	class:easypr::demo::Result::Params
setParams	test/result.hpp	/^      inline void setParams(Params param) { m_params = param; }$/;"	f	class:easypr::demo::Result
setParams	thirdparty/svm/corrected_svm.cpp	/^    void setParams( const SvmParams& _params)$/;"	f	class:cv::ml::SVMImpl
setPass2Only	thirdparty/mser/mser2.cpp	/^    void setPass2Only(bool f) { params.pass2Only = f; }$/;"	f	class:cv::MSER_Impl2
setPicturesCount	test/result.hpp	/^      inline void setPicturesCount(int param) { m_picturesCount = param; }$/;"	f	class:easypr::demo::Result
setPlatDistVec	include/easypr/core/plate.hpp	/^    inline void setPlatDistVec(Vec2i param) { m_distVec = param; }$/;"	f	class:easypr::CPlate
setPlateColor	include/easypr/core/plate.hpp	/^    inline void setPlateColor(Color param) { m_plateColor = param; }$/;"	f	class:easypr::CPlate
setPlateLeftPoint	include/easypr/core/plate.hpp	/^    inline void setPlateLeftPoint(Point param) { m_leftPoint = param; }$/;"	f	class:easypr::CPlate
setPlateLine	include/easypr/core/plate.hpp	/^    inline void setPlateLine(Vec4f param) { m_line = param; }$/;"	f	class:easypr::CPlate
setPlateLocateType	include/easypr/core/plate.hpp	/^    inline void setPlateLocateType(LocateType param) { m_locateType = param; }$/;"	f	class:easypr::CPlate
setPlateMat	include/easypr/core/plate.hpp	/^    inline void setPlateMat(Mat param) { m_plateMat = param; }$/;"	f	class:easypr::CPlate
setPlateMaxCharRect	include/easypr/core/plate.hpp	/^    inline void setPlateMaxCharRect(Rect param) { m_maxCharRect = param; }$/;"	f	class:easypr::CPlate
setPlateMergeCharRect	include/easypr/core/plate.hpp	/^    inline void setPlateMergeCharRect(Rect param) { m_mergeCharRect = param; }$/;"	f	class:easypr::CPlate
setPlatePos	include/easypr/core/plate.hpp	/^    inline void setPlatePos(RotatedRect param) { m_platePos = param; }$/;"	f	class:easypr::CPlate
setPlateRightPoint	include/easypr/core/plate.hpp	/^    inline void setPlateRightPoint(Point param) { m_rightPoint = param; }$/;"	f	class:easypr::CPlate
setPlateScale	include/easypr/core/plate.hpp	/^    inline void setPlateScale(float param) { m_scale = param; }$/;"	f	class:easypr::CPlate
setPlateScore	include/easypr/core/plate.hpp	/^    inline void setPlateScore(double param) { m_score = param; }$/;"	f	class:easypr::CPlate
setPlateStr	include/easypr/core/plate.hpp	/^    inline void setPlateStr(String param) { m_plateStr = param; }$/;"	f	class:easypr::CPlate
setPlatesCount	test/result.hpp	/^      inline void setPlatesCount(int param) { m_platesCount = param; }$/;"	f	class:easypr::demo::Result
setPoint	src/core/core_func.cpp	/^  void setPoint(Mat &mat, int row, int col, const Scalar &value) {$/;"	f	namespace:easypr
setRangeVector	thirdparty/svm/precomp.hpp	/^    static inline void setRangeVector(std::vector<int>& vec, int n)$/;"	f	namespace:cv::ml
setRegressionAccuracy	thirdparty/svm/precomp.hpp	/^        inline void setRegressionAccuracy(float val)$/;"	f	struct:cv::ml::TreeParams
setResultShow	include/easypr/core/plate_recognize.h	/^    inline void setResultShow(bool param) { m_showResult = param; }$/;"	f	class:easypr::CPlateRecognize
setReutCharacter	include/easypr/core/plate.hpp	/^    inline void setReutCharacter(const std::vector<CCharacter>& param) { m_reutCharVec = param; }$/;"	f	class:easypr::CPlate
setSeconds	test/result.hpp	/^      inline void setSeconds(float param) { m_seconds = param; }$/;"	f	class:easypr::demo::Result
setThresholdDelta	thirdparty/textDetect/erfilter.cpp	/^    void ERFilterNM::setThresholdDelta(int _thresholdDelta)$/;"	f	class:cv::text::ERFilterNM
setVerifyAspect	include/easypr/core/plate_detect.h	/^  inline void setVerifyAspect(float param) {$/;"	f	class:easypr::CPlateDetect
setVerifyAspect	include/easypr/core/plate_locate.h	/^  inline void setVerifyAspect(float param) { m_aspect = param; }$/;"	f	class:easypr::CPlateLocate
setVerifyError	include/easypr/core/plate_detect.h	/^  inline void setVerifyError(float param) {$/;"	f	class:easypr::CPlateDetect
setVerifyError	include/easypr/core/plate_locate.h	/^  inline void setVerifyError(float param) { m_error = param; }$/;"	f	class:easypr::CPlateLocate
setVerifyMax	include/easypr/core/plate_detect.h	/^  inline void setVerifyMax(int param) { m_plateLocate->setVerifyMax(param); }$/;"	f	class:easypr::CPlateDetect
setVerifyMax	include/easypr/core/plate_locate.h	/^  inline void setVerifyMax(int param) { m_verifyMax = param; }$/;"	f	class:easypr::CPlateLocate
setVerifyMin	include/easypr/core/plate_detect.h	/^  inline void setVerifyMin(int param) { m_plateLocate->setVerifyMin(param); }$/;"	f	class:easypr::CPlateDetect
setVerifyMin	include/easypr/core/plate_locate.h	/^  inline void setVerifyMin(int param) { m_verifyMin = param; }$/;"	f	class:easypr::CPlateLocate
setWhitePercent	include/easypr/core/chars_recognise.h	/^  inline void setWhitePercent(float param) {$/;"	f	class:easypr::CCharsRecognise
setWhitePercent	include/easypr/core/chars_segment.h	/^  inline void setWhitePercent(float param) { m_WhitePercent = param; }$/;"	f	class:easypr::CCharsSegment
setZeroError	test/result.hpp	/^      inline void setZeroError(float param) { m_0error = param; }$/;"	f	class:easypr::demo::Result
set_addition	src/util/program_options.cpp	/^void Parser::set_addition() {$/;"	f	class:program_options::Parser
set_cityblock	thirdparty/textDetect/erfilter.cpp	/^      void set_cityblock()$/;"	f	class:cv::text::dissimilarity	file:
set_description	include/easypr/util/program_options.h	/^  inline void set_description(const char* desc) { description_ = desc; }$/;"	f	class:program_options::Subroutine
set_euclidean	thirdparty/textDetect/erfilter.cpp	/^      void set_euclidean()$/;"	f	class:cv::text::dissimilarity	file:
set_first_line	include/easypr/util/program_options.h	/^  inline void set_first_line(const char* line) { first_line_ = line; }$/;"	f	class:program_options::Subroutine
set_template	include/easypr/util/program_options.h	/^  inline void set_template(const char* tstr, const Row::Order& order) {$/;"	f	class:program_options::Subroutine
set_usage_subroutines	include/easypr/util/program_options.h	/^  inline void set_usage_subroutines($/;"	f	class:program_options::Parser
seuclidean	thirdparty/textDetect/erfilter.cpp	/^      double seuclidean(const int_fast32_t i, const int_fast32_t j) const$/;"	f	class:cv::text::dissimilarity	file:
showDectectResults	src/core/core_func.cpp	/^  void showDectectResults(const Mat &img, const vector<CPlate> &plateVec, size_t num) {$/;"	f	namespace:easypr
showHistogram	src/core/core_func.cpp	/^  Mat showHistogram(const Mat &hist) {$/;"	f	namespace:easypr
showResult	src/core/core_func.cpp	/^  Mat showResult(const Mat &result, int img_index) {$/;"	f	namespace:easypr
sidx	thirdparty/svm/precomp.hpp	/^            vector<int> sidx;$/;"	m	struct:cv::ml::DTreesImpl::WorkData
similyThresh	thirdparty/mser/mser2.cpp	/^      float similyThresh;$/;"	m	struct:cv::MSER_Impl2::WParams	file:
size	include/easypr/util/program_options.h	/^  inline size_t size() { return usages_.size(); }$/;"	f	class:program_options::Subroutine
size	thirdparty/mser/mser2.cpp	/^      int size;$/;"	m	struct:cv::MSER_Impl2::CompHistory	file:
size	thirdparty/mser/mser2.cpp	/^      int size;$/;"	m	struct:cv::MSER_Impl2::ConnectedComp	file:
size_	thirdparty/textDetect/erfilter.cpp	1969;"	d	file:
slideChineseGrayWindow	src/core/chars_segment.cpp	/^bool slideChineseGrayWindow(const Mat& image, Rect& mr, Mat& newRoi, Color plateType, float slideLengthRatio) {$/;"	f	namespace:easypr
slideChineseWindow	src/core/chars_segment.cpp	/^bool slideChineseWindow(Mat& image, Rect mr, Mat& newRoi, Color plateType, float slideLengthRatio, bool useAdapThreshold) {$/;"	f	namespace:easypr
slideWindowSearch	src/core/core_func.cpp	/^  void slideWindowSearch(const Mat &image, std::vector<CCharacter> &slideCharacter, const Vec4f &line,$/;"	f	namespace:easypr
sobelFrtSearch	src/core/plate_locate.cpp	/^int CPlateLocate::sobelFrtSearch(const Mat &src,$/;"	f	class:easypr::CPlateLocate
sobelOper	src/core/plate_locate.cpp	/^int CPlateLocate::sobelOper(const Mat &in, Mat &out, int blurSize, int morphW,$/;"	f	class:easypr::CPlateLocate
sobelOperT	src/core/plate_locate.cpp	/^int CPlateLocate::sobelOperT(const Mat &in, Mat &out, int blurSize, int morphW,$/;"	f	class:easypr::CPlateLocate
sobelSecSearch	src/core/plate_locate.cpp	/^int CPlateLocate::sobelSecSearch(Mat &bound, Point2f refpoint,$/;"	f	class:easypr::CPlateLocate
sobelSecSearchPart	src/core/plate_locate.cpp	/^int CPlateLocate::sobelSecSearchPart(Mat &bound, Point2f refpoint,$/;"	f	class:easypr::CPlateLocate
sock	src/network/server_socket.cpp	/^static int sock;$/;"	v	file:
socket_config	include/easypr/network/server_socket.hpp	/^struct socket_config {$/;"	s
solve_c_svc	thirdparty/svm/corrected_svm.cpp	/^        static bool solve_c_svc( const Mat& _samples, const vector<schar>& _y,$/;"	f	class:cv::ml::SVMImpl::Solver
solve_eps_svr	thirdparty/svm/corrected_svm.cpp	/^        static bool solve_eps_svr( const Mat& _samples, const vector<float>& _yf,$/;"	f	class:cv::ml::SVMImpl::Solver
solve_generic	thirdparty/svm/corrected_svm.cpp	/^        bool solve_generic( SolutionInfo& si )$/;"	f	class:cv::ml::SVMImpl::Solver
solve_nu_svc	thirdparty/svm/corrected_svm.cpp	/^        static bool solve_nu_svc( const Mat& _samples, const vector<schar>& _y,$/;"	f	class:cv::ml::SVMImpl::Solver
solve_nu_svr	thirdparty/svm/corrected_svm.cpp	/^        static bool solve_nu_svr( const Mat& _samples, const vector<float>& _yf,$/;"	f	class:cv::ml::SVMImpl::Solver
solve_one_class	thirdparty/svm/corrected_svm.cpp	/^        static bool solve_one_class( const Mat& _samples, double nu,$/;"	f	class:cv::ml::SVMImpl::Solver
sortMatrixColumnsByIndices	thirdparty/LBP/helper.cpp	/^Mat libfacerec::sortMatrixColumnsByIndices(InputArray src, InputArray indices) {$/;"	f	class:libfacerec
sortMatrixColumnsByIndices	thirdparty/LBP/helper.cpp	/^void libfacerec::sortMatrixColumnsByIndices(InputArray _src, InputArray _indices, OutputArray _dst) {$/;"	f	class:libfacerec
sortMatrixRowsByIndices	thirdparty/LBP/helper.cpp	/^Mat libfacerec::sortMatrixRowsByIndices(InputArray src, InputArray indices) {$/;"	f	class:libfacerec
sortMatrixRowsByIndices	thirdparty/LBP/helper.cpp	/^void libfacerec::sortMatrixRowsByIndices(InputArray _src, InputArray _indices, OutputArray _dst) {$/;"	f	class:libfacerec
sortSamplesByClasses	thirdparty/svm/corrected_svm.cpp	/^static void sortSamplesByClasses( const Mat& _samples, const Mat& _responses,$/;"	f	namespace:cv::ml
sort_couples	thirdparty/textDetect/erfilter.cpp	/^    bool sort_couples(Vec3i i, Vec3i j) { return (i[0]<j[0]); }$/;"	f	namespace:cv::text
spatial_histogram	thirdparty/LBP/lbp.cpp	/^Mat libfacerec::spatial_histogram(InputArray _src, int numPatterns, int grid_x, int grid_y, bool normed) {$/;"	f	class:libfacerec
spatial_ostu	src/core/core_func.cpp	/^  void spatial_ostu(InputArray _src, int grid_x, int grid_y, Color type) {$/;"	f	namespace:easypr
split	thirdparty/svm/precomp.hpp	/^            int split;$/;"	m	struct:cv::ml::DTreesImpl::WNode
splitString	src/util/util.cpp	/^std::vector<std::string> Utils::splitString(const std::string &str,$/;"	f	class:easypr::Utils
splits	thirdparty/svm/precomp.hpp	/^        vector<Split> splits;$/;"	m	class:cv::ml::DTreesImpl
sqeuclidean	thirdparty/textDetect/erfilter.cpp	/^      double sqeuclidean(const int_fast32_t i, const int_fast32_t j) const$/;"	f	class:cv::text::dissimilarity
sqrt	thirdparty/textDetect/erfilter.cpp	/^      void sqrt() const$/;"	f	class:cv::text::cluster_result
sqrt	thirdparty/textDetect/erfilter.cpp	/^      void sqrt(const double) const  \/\/ ignore the argument$/;"	f	class:cv::text::cluster_result
start	thirdparty/textDetect/erfilter.cpp	/^      int_fast32_t start;$/;"	m	class:cv::text::doubly_linked_list	file:
step	thirdparty/mser/mser2.cpp	/^      int step;$/;"	m	struct:cv::MSER_Impl2::WParams	file:
stringDup	thirdparty/xmlParser/xmlParser.cpp	/^XMLSTR stringDup(XMLCSTR lpszData, int cbData)$/;"	f
stroke_mean	thirdparty/textDetect/erfilter.cpp	/^      double stroke_mean;  \/\/\/< mean stroke width approximation of the whole region$/;"	m	struct:cv::text::ERFeatures	file:
stroke_std	thirdparty/textDetect/erfilter.cpp	/^      double stroke_std;  \/\/\/< stroke standard deviation of the whole region$/;"	m	struct:cv::text::ERFeatures	file:
subPath	thirdparty/mser/mser2.cpp	/^      bool subPath;$/;"	m	struct:cv::MSER_Impl2::Params	file:
subroutine_name_	include/easypr/util/program_options.h	/^  std::string subroutine_name_;$/;"	m	class:program_options::Parser
subroutines_	include/easypr/util/program_options.h	/^  SubroutineCollection subroutines_;$/;"	m	class:program_options::Generator
subroutines_	include/easypr/util/program_options.h	/^  const Generator::SubroutineCollection* subroutines_;$/;"	m	class:program_options::Parser
subsetOfs	thirdparty/svm/precomp.hpp	/^            int subsetOfs;$/;"	m	struct:cv::ml::DTreesImpl::WSplit
subsets	thirdparty/svm/precomp.hpp	/^        vector<int> subsets;$/;"	m	class:cv::ml::DTreesImpl
succ	thirdparty/textDetect/erfilter.cpp	/^      auto_array_ptr<int_fast32_t> succ;$/;"	m	class:cv::text::doubly_linked_list	file:
sv	thirdparty/svm/corrected_svm.cpp	/^    Mat sv;$/;"	m	class:cv::ml::SVMImpl	file:
svm	thirdparty/svm/corrected_svm.cpp	/^        const SVMImpl* svm;$/;"	m	struct:cv::ml::SVMImpl::PredictBody	file:
svmCallback	include/easypr/core/feature.h	/^typedef void (*svmCallback)(const cv::Mat& image, cv::Mat& features);$/;"	t	namespace:easypr
svmType	thirdparty/svm/corrected_svm.cpp	/^    int         svmType;$/;"	m	struct:cv::ml::SvmParams	file:
svm_	include/easypr/core/plate_judge.h	/^  cv::Ptr<ml::SVM> svm_;$/;"	m	class:easypr::PlateJudge
svm_	include/easypr/train/svm_train.h	/^  cv::Ptr<cv::ml::SVM> svm_;$/;"	m	class:easypr::SvmTrain
svm_xml_	include/easypr/train/svm_train.h	/^  const char* svm_xml_;$/;"	m	class:easypr::SvmTrain
tail	thirdparty/mser/mser2.cpp	/^      PPixel tail;$/;"	m	struct:cv::MSER_Impl2::ConnectedComp	file:
target_	include/easypr/util/switch.hpp	/^  const Ty& target_;$/;"	m	class:program_options::Switch
tdata	src/train/annCh_train.cpp	/^cv::Ptr<cv::ml::TrainData> AnnChTrain::tdata() {$/;"	f	class:easypr::AnnChTrain
tdata	src/train/ann_train.cpp	/^cv::Ptr<cv::ml::TrainData> AnnTrain::tdata() {$/;"	f	class:easypr::AnnTrain
tdata	src/train/svm_train.cpp	/^cv::Ptr<cv::ml::TrainData> SvmTrain::tdata() {$/;"	f	class:easypr::SvmTrain
tegra	thirdparty/svm/precomp.hpp	/^namespace tegra {$/;"	n
template_str_	include/easypr/util/program_options.h	/^  std::string template_str_;$/;"	m	class:program_options::Subroutine
templates_	include/easypr/util/program_options.h	/^  TemplateValues templates_;$/;"	m	class:program_options::Subroutine
tempsrc	thirdparty/mser/mser2.cpp	/^    Mat tempsrc;$/;"	m	class:cv::MSER_Impl2	file:
termCrit	thirdparty/svm/corrected_svm.cpp	/^    TermCriteria termCrit;$/;"	m	struct:cv::ml::SvmParams	file:
termCrit	thirdparty/svm/precomp.hpp	/^        TermCriteria termCrit;$/;"	m	struct:cv::ml::RTreeParams
test	src/train/annCh_train.cpp	/^  void AnnChTrain::test() {$/;"	f	class:easypr::AnnChTrain
test	src/train/ann_train.cpp	/^void AnnTrain::test() {$/;"	f	class:easypr::AnnTrain
test	src/train/svm_train.cpp	/^void SvmTrain::test() {$/;"	f	class:easypr::SvmTrain
testMain	test/main.cpp	/^int testMain() {$/;"	f	namespace:easypr::demo
testMain	test/main2.cpp	/^int testMain() {$/;"	f	namespace:easypr::demo
test_chars_identify	test/chars.hpp	/^int test_chars_identify() {$/;"	f	namespace:easypr::demo
test_chars_recognise	test/chars.hpp	/^int test_chars_recognise() {$/;"	f	namespace:easypr::demo
test_chars_segment	test/chars.hpp	/^int test_chars_segment() {$/;"	f	namespace:easypr::demo
test_file_list_	include/easypr/train/svm_train.h	/^  std::vector<TrainItem> test_file_list_;$/;"	m	class:easypr::SvmTrain
test_plate_detect	test/plate.hpp	/^int test_plate_detect() {$/;"	f	namespace:easypr::demo
test_plate_judge	test/plate.hpp	/^int test_plate_judge() {$/;"	f	namespace:easypr::demo
test_plate_locate	test/plate.hpp	/^int test_plate_locate() {$/;"	f	namespace:easypr::demo
test_plate_recognize	test/plate.hpp	/^int test_plate_recognize() {$/;"	f	namespace:easypr::demo
test_plate_recognize	test/plate.hpp	/^int test_plate_recognize(Mat src) {$/;"	f	namespace:easypr::demo
text	thirdparty/textDetect/erfilter.cpp	/^  namespace text$/;"	n	namespace:cv	file:
text	thirdparty/textDetect/erfilter.hpp	/^namespace text$/;"	n	namespace:cv
text	thirdparty/xmlParser/xmlParser.h	/^    XMLCSTR text;$/;"	m	struct:XMLNodeContents
thresholdDelta	thirdparty/textDetect/erfilter.cpp	/^      int thresholdDelta;$/;"	m	class:cv::text::ERFilterNM	file:
toXML	thirdparty/xmlParser/xmlParser.cpp	/^XMLSTR ToXMLStringTool::toXML(XMLCSTR source)$/;"	f	class:ToXMLStringTool
toXMLUnSafe	thirdparty/xmlParser/xmlParser.cpp	/^XMLSTR ToXMLStringTool::toXMLUnSafe(XMLSTR dest,XMLCSTR source)$/;"	f	class:ToXMLStringTool
to_string	include/easypr/util/program_options.h	/^  inline std::string to_string() {$/;"	f	class:program_options::Generator
to_string	include/easypr/util/program_options.h	/^  inline std::string to_string() {$/;"	f	class:program_options::Subroutine
top1_a0	thirdparty/textDetect/erfilter.cpp	/^      float top1_a0;$/;"	m	struct:cv::text::line_estimates	file:
top1_a1	thirdparty/textDetect/erfilter.cpp	/^      float top1_a1;$/;"	m	struct:cv::text::line_estimates	file:
top2_a0	thirdparty/textDetect/erfilter.cpp	/^      float top2_a0;$/;"	m	struct:cv::text::line_estimates	file:
top2_a1	thirdparty/textDetect/erfilter.cpp	/^      float top2_a1;$/;"	m	struct:cv::text::line_estimates	file:
train	src/train/annCh_train.cpp	/^  void AnnChTrain::train()$/;"	f	class:easypr::AnnChTrain
train	src/train/ann_train.cpp	/^void AnnTrain::train() {$/;"	f	class:easypr::AnnTrain
train	src/train/svm_train.cpp	/^void SvmTrain::train() {$/;"	f	class:easypr::SvmTrain
train	thirdparty/svm/corrected_svm.cpp	/^    bool train( const Ptr<TrainData>& data, int )$/;"	f	class:cv::ml::SVMImpl
trainAuto	thirdparty/svm/corrected_svm.cpp	/^    bool trainAuto( const Ptr<TrainData>& data, int k_fold,$/;"	f	class:cv::ml::SVMImpl
trainChineseMain	test/main.cpp	/^int trainChineseMain() {$/;"	f	namespace:easypr::demo
trainVal	src/train/annCh_train.cpp	/^void AnnChTrain::trainVal(size_t number_for_count) {$/;"	f	class:easypr::AnnChTrain
train_file_list_	include/easypr/train/svm_train.h	/^  std::vector<TrainItem> train_file_list_;$/;"	m	class:easypr::SvmTrain
translateImg	src/train/create_data.cpp	/^  Mat translateImg(Mat img, int offsetx, int offsety, int bk){$/;"	f	namespace:easypr
tree_error	thirdparty/svm/precomp.hpp	/^            double node_risk, tree_risk, tree_error;$/;"	m	struct:cv::ml::DTreesImpl::WNode
tree_risk	thirdparty/svm/precomp.hpp	/^            double node_risk, tree_risk, tree_error;$/;"	m	struct:cv::ml::DTreesImpl::WNode
triplets	thirdparty/textDetect/erfilter.cpp	/^      vector<region_triplet> triplets;$/;"	m	struct:cv::text::region_sequence	file:
truncatePrunedTree	thirdparty/svm/precomp.hpp	/^        bool  truncatePrunedTree;$/;"	m	struct:cv::ml::TreeParams
type	include/easypr/train/annCh_train.h	/^  int type;$/;"	m	class:easypr::AnnChTrain
type	include/easypr/train/ann_train.h	/^  int type;$/;"	m	class:easypr::AnnTrain
uniformResize	src/core/core_func.cpp	/^  Mat uniformResize(const Mat &result, float &scale) {$/;"	f	namespace:easypr
uniformResizePlates	src/core/core_func.cpp	/^  Mat uniformResizePlates (const Mat &result, float &scale) {$/;"	f	namespace:easypr
union_find	thirdparty/textDetect/erfilter.cpp	/^    class union_find {$/;"	c	namespace:cv::text	file:
updateAttribute	thirdparty/xmlParser/xmlParser.cpp	/^XMLAttribute *XMLNode::updateAttribute(XMLAttribute *newAttribute, XMLAttribute *oldAttribute)$/;"	f	class:XMLNode
updateAttribute	thirdparty/xmlParser/xmlParser.cpp	/^XMLAttribute *XMLNode::updateAttribute(XMLCSTR lpszNewValue, XMLCSTR lpszNewName,XMLCSTR lpszOldName)$/;"	f	class:XMLNode
updateAttribute	thirdparty/xmlParser/xmlParser.cpp	/^XMLAttribute *XMLNode::updateAttribute(XMLCSTR lpszNewValue, XMLCSTR lpszNewName,int i)$/;"	f	class:XMLNode
updateAttribute_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLAttribute *XMLNode::updateAttribute_WOSD(XMLAttribute *newAttribute, XMLAttribute *oldAttribute)$/;"	f	class:XMLNode
updateAttribute_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLAttribute *XMLNode::updateAttribute_WOSD(XMLSTR lpszNewValue, XMLSTR lpszNewName,XMLCSTR lpszOldName)$/;"	f	class:XMLNode
updateAttribute_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLAttribute *XMLNode::updateAttribute_WOSD(XMLSTR lpszNewValue, XMLSTR lpszNewName,int i)$/;"	f	class:XMLNode
updateClear	thirdparty/xmlParser/xmlParser.cpp	/^XMLClear     *XMLNode::updateClear(XMLCSTR lpszNewContent, int i)$/;"	f	class:XMLNode
updateClear	thirdparty/xmlParser/xmlParser.cpp	/^XMLClear     *XMLNode::updateClear(XMLCSTR lpszNewValue, XMLCSTR lpszOldValue)$/;"	f	class:XMLNode
updateClear	thirdparty/xmlParser/xmlParser.cpp	/^XMLClear     *XMLNode::updateClear(XMLClear *newP,XMLClear *oldP)$/;"	f	class:XMLNode
updateClear_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLClear *XMLNode::updateClear_WOSD(XMLClear *newP,XMLClear *oldP)$/;"	f	class:XMLNode
updateClear_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLClear *XMLNode::updateClear_WOSD(XMLSTR lpszNewContent, XMLCSTR lpszOldValue)$/;"	f	class:XMLNode
updateClear_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLClear *XMLNode::updateClear_WOSD(XMLSTR lpszNewContent, int i)$/;"	f	class:XMLNode
updateName	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR       XMLNode::updateName(XMLCSTR lpszName)$/;"	f	class:XMLNode
updateName_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR XMLNode::updateName_WOSD(XMLSTR lpszName)$/;"	f	class:XMLNode
updateText	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR       XMLNode::updateText(XMLCSTR lpszNewValue, XMLCSTR lpszOldValue)$/;"	f	class:XMLNode
updateText	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR       XMLNode::updateText(XMLCSTR lpszNewValue, int i)$/;"	f	class:XMLNode
updateText_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR XMLNode::updateText_WOSD(XMLSTR lpszNewValue, XMLCSTR lpszOldValue)$/;"	f	class:XMLNode
updateText_WOSD	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR XMLNode::updateText_WOSD(XMLSTR lpszNewValue, int i)$/;"	f	class:XMLNode
updateTree	thirdparty/mser/mser2.cpp	/^      void updateTree(WParams& wp, CompHistory** _h0, CompHistory** _h1, bool final)$/;"	f	struct:cv::MSER_Impl2::CompHistory
update_alpha_status	thirdparty/svm/corrected_svm.cpp	643;"	d	file:
update_alpha_status	thirdparty/svm/corrected_svm.cpp	644;"	d	file:
upper_bound_n	thirdparty/svm/corrected_svm.cpp	/^            double upper_bound_n;$/;"	m	struct:cv::ml::SVMImpl::Solver::SolutionInfo	file:
upper_bound_p	thirdparty/svm/corrected_svm.cpp	/^            double upper_bound_p;$/;"	m	struct:cv::ml::SVMImpl::Solver::SolutionInfo	file:
usages_	include/easypr/util/program_options.h	/^  Usages usages_;$/;"	m	class:program_options::Subroutine
use1SERule	thirdparty/svm/precomp.hpp	/^        bool  use1SERule;$/;"	m	struct:cv::ml::TreeParams
useOpt	thirdparty/mser/mser2.cpp	/^      bool useOpt;$/;"	m	struct:cv::MSER_Impl2::Params	file:
usePrune	thirdparty/mser/mser2.cpp	/^      bool usePrune;$/;"	m	struct:cv::MSER_Impl2::Params	file:
useSurrogates	thirdparty/svm/precomp.hpp	/^            bool  useSurrogates;$/;"	m	struct:cv::ml::TreeParams
utf8_to_gbk	src/util/util.cpp	/^std::string Utils::utf8_to_gbk(const char* utf8) {$/;"	f	class:easypr::Utils
utils	include/easypr/util/util.h	/^typedef Utils utils;$/;"	t	namespace:easypr
val	include/easypr/util/program_options.h	/^  inline std::string val() const { return value_; }$/;"	f	class:program_options::ParseItem
val	thirdparty/mser/mser2.cpp	/^      int val;$/;"	m	struct:cv::MSER_Impl2::CompHistory	file:
val	thirdparty/mser/mser2.cpp	/^      int val;$/;"	m	struct:cv::MSER_Impl2::Pixel	file:
value	include/easypr/util/program_options.h	/^  inline std::string value() const { return default_value; }$/;"	f	class:program_options::Row
value	include/easypr/util/program_options.h	/^  inline void value(const std::string& value) { default_value = value; }$/;"	f	class:program_options::Row
value	thirdparty/svm/precomp.hpp	/^            double value;$/;"	m	struct:cv::ml::DTreesImpl::WNode
value_	include/easypr/util/program_options.h	/^  std::string value_;$/;"	m	class:program_options::ParseItem
var	thirdparty/mser/mser2.cpp	/^      float var;$/;"	m	struct:cv::MSER_Impl2::CompHistory	file:
varIdx	thirdparty/svm/precomp.hpp	/^            int varIdx;$/;"	m	struct:cv::ml::DTreesImpl::WSplit
varIdx	thirdparty/svm/precomp.hpp	/^        vector<int> varIdx;$/;"	m	class:cv::ml::DTreesImpl
varMapping	thirdparty/svm/precomp.hpp	/^        vector<int> varMapping;$/;"	m	class:cv::ml::DTreesImpl
varType	thirdparty/svm/precomp.hpp	/^        vector<uchar> varType;$/;"	m	class:cv::ml::DTreesImpl
var_count	thirdparty/svm/corrected_svm.cpp	/^        int var_count;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
var_count	thirdparty/svm/corrected_svm.cpp	/^    int var_count;$/;"	m	class:cv::ml::SVMImpl	file:
varlbp	thirdparty/LBP/lbp.cpp	/^Mat libfacerec::varlbp(InputArray src, int radius, int neighbors) {$/;"	f	class:libfacerec
varlbp	thirdparty/LBP/lbp.cpp	/^void libfacerec::varlbp(InputArray src, OutputArray dst, int radius, int neighbors) {$/;"	f	class:libfacerec
varlbp_	thirdparty/LBP/lbp.cpp	/^    inline void varlbp_(InputArray _src, OutputArray _dst, int radius, int neighbors) {$/;"	f	namespace:libfacerec
verifyCharRectSizes	src/core/chars_segment.cpp	/^bool verifyCharRectSizes(Rect r) {$/;"	f	namespace:easypr
verifyCharSizes	src/core/chars_segment.cpp	/^bool CCharsSegment::verifyCharSizes(Mat r) {$/;"	f	class:easypr::CCharsSegment
verifyCharSizes	src/core/core_func.cpp	/^  bool verifyCharSizes(Rect r) {$/;"	f	namespace:easypr
verifyPlateSize	src/core/core_func.cpp	/^  bool verifyPlateSize(Rect mr) {$/;"	f	namespace:easypr
verifyRotatedPlateSizes	src/core/core_func.cpp	/^  bool verifyRotatedPlateSizes(RotatedRect mr, bool showDebug) {$/;"	f	namespace:easypr
verifySizes	src/core/plate_locate.cpp	/^bool CPlateLocate::verifySizes(RotatedRect mr) {$/;"	f	class:easypr::CPlateLocate
videoCapture	test/main.cpp	/^int videoCapture()$/;"	f	namespace:easypr::demo
volume	thirdparty/textDetect/erfilter.cpp	/^      long double volume;     \/\/ volume of the bounding sphere (or bounding box)$/;"	m	struct:cv::text::HCluster	file:
volume	thirdparty/textDetect/erfilter.cpp	/^    long double Minibox::volume()$/;"	f	class:cv::text::Minibox
volume_ext	thirdparty/textDetect/erfilter.cpp	/^      long double volume_ext; \/\/ volume of the sphere(or box) + envolvent empty space$/;"	m	struct:cv::text::HCluster	file:
w	thirdparty/svm/precomp.hpp	/^        Ptr<WorkData> w;$/;"	m	class:cv::ml::DTreesImpl
weakCount	thirdparty/svm/precomp.hpp	/^        int weakCount;$/;"	m	struct:cv::ml::BoostTreeParams
weightTrimRate	thirdparty/svm/precomp.hpp	/^        double weightTrimRate;$/;"	m	struct:cv::ml::BoostTreeParams
what	src/util/program_options.cpp	/^const char* ParseError::what() const throw() {$/;"	f	class:program_options::ParseError
wnodes	thirdparty/svm/precomp.hpp	/^            vector<WNode> wnodes;$/;"	m	struct:cv::ml::DTreesImpl::WorkData
write	thirdparty/svm/corrected_svm.cpp	/^    void write( FileStorage& fs ) const$/;"	f	class:cv::ml::SVMImpl
writeFileNodeList	thirdparty/LBP/helper.hpp	/^  inline void writeFileNodeList(FileStorage& fs, const string& name,$/;"	f	namespace:libfacerec
writeTempImage	src/core/core_func.cpp	/^  void writeTempImage(const Mat &outImg, const string path, int index) {$/;"	f	namespace:easypr
writeTermCrit	thirdparty/svm/precomp.hpp	/^    static inline void writeTermCrit(FileStorage& fs, const TermCriteria& termCrit)$/;"	f	namespace:cv::ml
writeToFile	thirdparty/xmlParser/xmlParser.cpp	/^XMLError XMLNode::writeToFile(XMLCSTR filename, const char *encoding, char nFormat) const$/;"	f	class:XMLNode
write_params	thirdparty/svm/corrected_svm.cpp	/^    void write_params( FileStorage& fs ) const$/;"	f	class:cv::ml::SVMImpl
wsplits	thirdparty/svm/precomp.hpp	/^            vector<WSplit> wsplits;$/;"	m	struct:cv::ml::DTreesImpl::WorkData
wsubsets	thirdparty/svm/precomp.hpp	/^            vector<int> wsubsets;$/;"	m	struct:cv::ml::DTreesImpl::WorkData
x_max	thirdparty/textDetect/erfilter.cpp	/^      int x_max;$/;"	m	struct:cv::text::line_estimates	file:
x_min	thirdparty/textDetect/erfilter.cpp	/^      int x_min;$/;"	m	struct:cv::text::line_estimates	file:
xfopen	thirdparty/xmlParser/xmlParser.cpp	/^        static inline FILE *xfopen(XMLCSTR filename,XMLCSTR mode) { return _wfopen(filename,mode); }$/;"	f	file:
xfopen	thirdparty/xmlParser/xmlParser.cpp	/^        static inline FILE *xfopen(XMLCSTR filename,XMLCSTR mode) { return fopen(filename,mode); }$/;"	f	file:
xfopen	thirdparty/xmlParser/xmlParser.cpp	/^        static inline FILE *xfopen(XMLCSTR filename,XMLCSTR mode)$/;"	f	file:
xmltoa	thirdparty/xmlParser/xmlParser.cpp	/^XMLCSTR xmltoa(XMLCSTR t,      XMLCSTR v){ if (t)       return  t; return v; }$/;"	f
xmltob	thirdparty/xmlParser/xmlParser.cpp	/^           char    xmltob(XMLCSTR t,char    v){ if (t) return (char)wcstol(t,NULL,10); return v; }$/;"	f
xmltob	thirdparty/xmlParser/xmlParser.cpp	/^           char    xmltob(XMLCSTR t,char    v){ if (t) return (char)wstol(t,NULL,10); return v; }$/;"	f
xmltob	thirdparty/xmlParser/xmlParser.cpp	/^        char      xmltob(XMLCSTR t,char      v){ if (t&&(*t)) return (char)_wtoi(t); return v; }$/;"	f
xmltob	thirdparty/xmlParser/xmlParser.cpp	/^    char      xmltob(XMLCSTR t,char      v){ if (t&&(*t)) return (char)atoi(t); return v; }$/;"	f
xmltoc	thirdparty/xmlParser/xmlParser.cpp	/^XMLCHAR xmltoc(XMLCSTR t,const XMLCHAR v){ if (t&&(*t)) return *t; return v; }$/;"	f
xmltof	thirdparty/xmlParser/xmlParser.cpp	/^		double  xmltof(XMLCSTR t,double  v){ if (t&&(*t)) swscanf(t, L"%lf", &v); \/*v=_wtof(t);*\/ return v; }$/;"	f
xmltof	thirdparty/xmlParser/xmlParser.cpp	/^        double    xmltof(XMLCSTR t,double    v){ if (t&&(*t)) swscanf(t, L"%lf", &v); \/*v=_wtof(t);*\/ return v; }$/;"	f
xmltof	thirdparty/xmlParser/xmlParser.cpp	/^    double    xmltof(XMLCSTR t,double    v){ if (t&&(*t)) return atof(t); return v; }$/;"	f
xmltoi	thirdparty/xmlParser/xmlParser.cpp	/^           int     xmltoi(XMLCSTR t,int     v){ if (t) return (int)wcstol(t,NULL,10); return v; }$/;"	f
xmltoi	thirdparty/xmlParser/xmlParser.cpp	/^           int     xmltoi(XMLCSTR t,int     v){ if (t) return (int)wstol(t,NULL,10); return v; }$/;"	f
xmltoi	thirdparty/xmlParser/xmlParser.cpp	/^        int       xmltoi(XMLCSTR t,int       v){ if (t&&(*t)) return _wtoi(t); return v; }$/;"	f
xmltoi	thirdparty/xmlParser/xmlParser.cpp	/^    int       xmltoi(XMLCSTR t,int       v){ if (t&&(*t)) return atoi(t); return v; }$/;"	f
xmltol	thirdparty/xmlParser/xmlParser.cpp	/^           long long xmltol(XMLCSTR t,long long v){ if (t) return wcstol(t,NULL,10); return v; }$/;"	f
xmltol	thirdparty/xmlParser/xmlParser.cpp	/^           long long xmltol(XMLCSTR t,long long v){ if (t) return wstol(t,NULL,10); return v; }$/;"	f
xmltol	thirdparty/xmlParser/xmlParser.cpp	/^        long long xmltol(XMLCSTR t,long long v){ if (t&&(*t)) return _wtoi64(t); return v; }$/;"	f
xmltol	thirdparty/xmlParser/xmlParser.cpp	/^       long long xmltol(XMLCSTR t,long long v){ if (t&&(*t)) return _atoi64(t); return v; }$/;"	f
xmltol	thirdparty/xmlParser/xmlParser.cpp	/^       long long xmltol(XMLCSTR t,long long v){ if (t&&(*t)) return atoll(t); return v; }$/;"	f
xstrcpy	thirdparty/xmlParser/xmlParser.cpp	/^        static inline XMLSTR xstrcpy(XMLSTR c1, XMLCSTR c2) { return (XMLSTR)strcpy(c1,c2); }$/;"	f	file:
xstrcpy	thirdparty/xmlParser/xmlParser.cpp	/^        static inline XMLSTR xstrcpy(XMLSTR c1, XMLCSTR c2) { return (XMLSTR)wcscpy(c1,c2); }$/;"	f	file:
xstricmp	thirdparty/xmlParser/xmlParser.cpp	/^            static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return _stricmp(c1,c2); }$/;"	f	file:
xstricmp	thirdparty/xmlParser/xmlParser.cpp	/^            static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return stricmp(c1,c2); }$/;"	f	file:
xstricmp	thirdparty/xmlParser/xmlParser.cpp	/^            static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return wcscasecmp(c1,c2); }$/;"	f	file:
xstricmp	thirdparty/xmlParser/xmlParser.cpp	/^            static inline int xstricmp(XMLCSTR c1, XMLCSTR c2)$/;"	f	file:
xstricmp	thirdparty/xmlParser/xmlParser.cpp	/^           static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return wscasecmp(c1,c2); }$/;"	f	file:
xstricmp	thirdparty/xmlParser/xmlParser.cpp	/^        static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return _wcsicmp(c1,c2); }$/;"	f	file:
xstricmp	thirdparty/xmlParser/xmlParser.cpp	/^        static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return strcasecmp(c1,c2); }$/;"	f	file:
xstrlen	thirdparty/xmlParser/xmlParser.cpp	/^        int xstrlen(XMLCSTR c)   { return wcslen(c); }$/;"	f
xstrlen	thirdparty/xmlParser/xmlParser.cpp	/^        static inline int xstrlen(XMLCSTR c)   { return (int)strlen(c); }$/;"	f	file:
xstrlen	thirdparty/xmlParser/xmlParser.cpp	/^        static inline int xstrlen(XMLCSTR c)   { return (int)wcslen(c); }$/;"	f	file:
xstrlen	thirdparty/xmlParser/xmlParser.cpp	/^        static inline int xstrlen(XMLCSTR c)   { return strlen(c); }$/;"	f	file:
xstrncmp	thirdparty/xmlParser/xmlParser.cpp	/^           static inline int xstrncmp(XMLCSTR c1, XMLCSTR c2, int l) { return wsncmp(c1,c2,l);}$/;"	f	file:
xstrncmp	thirdparty/xmlParser/xmlParser.cpp	/^        static inline int xstrncmp(XMLCSTR c1, XMLCSTR c2, int l) { return strncmp(c1,c2,l);}$/;"	f	file:
xstrncmp	thirdparty/xmlParser/xmlParser.cpp	/^        static inline int xstrncmp(XMLCSTR c1, XMLCSTR c2, int l) { return wcsncmp(c1,c2,l);}$/;"	f	file:
xstrnicmp	thirdparty/xmlParser/xmlParser.cpp	/^            static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return _strnicmp(c1,c2,l);}$/;"	f	file:
xstrnicmp	thirdparty/xmlParser/xmlParser.cpp	/^            static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return strnicmp(c1,c2,l);}$/;"	f	file:
xstrnicmp	thirdparty/xmlParser/xmlParser.cpp	/^            static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return wcsncasecmp(c1,c2,l);}$/;"	f	file:
xstrnicmp	thirdparty/xmlParser/xmlParser.cpp	/^            static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l)$/;"	f	file:
xstrnicmp	thirdparty/xmlParser/xmlParser.cpp	/^           static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return wsncasecmp(c1,c2,l);}$/;"	f	file:
xstrnicmp	thirdparty/xmlParser/xmlParser.cpp	/^        static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return _wcsnicmp(c1,c2,l);}$/;"	f	file:
xstrnicmp	thirdparty/xmlParser/xmlParser.cpp	/^        static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return strncasecmp(c1,c2,l);}$/;"	f	file:
xstrstr	thirdparty/xmlParser/xmlParser.cpp	/^        static inline XMLSTR xstrstr(XMLCSTR c1, XMLCSTR c2) { return (XMLSTR)strstr(c1,c2); }$/;"	f	file:
xstrstr	thirdparty/xmlParser/xmlParser.cpp	/^        static inline XMLSTR xstrstr(XMLCSTR c1, XMLCSTR c2) { return (XMLSTR)wcsstr(c1,c2); }$/;"	f	file:
y_vec	thirdparty/svm/corrected_svm.cpp	/^        vector<schar> y_vec;$/;"	m	class:cv::ml::SVMImpl::Solver	file:
~CCharsRecognise	src/core/chars_recognise.cpp	/^CCharsRecognise::~CCharsRecognise() { SAFE_RELEASE(m_charsSegment); }$/;"	f	class:easypr::CCharsRecognise
~CPlateDetect	src/core/plate_detect.cpp	/^  CPlateDetect::~CPlateDetect() { SAFE_RELEASE(m_plateLocate); }$/;"	f	class:easypr::CPlateDetect
~Callback	thirdparty/textDetect/erfilter.hpp	/^        virtual ~Callback() { }$/;"	f	class:cv::text::ERFilter::Callback
~ERClassifierNM1	thirdparty/textDetect/erfilter.cpp	/^      ~ERClassifierNM1() {}$/;"	f	class:cv::text::ERClassifierNM1
~ERClassifierNM2	thirdparty/textDetect/erfilter.cpp	/^      ~ERClassifierNM2() {}$/;"	f	class:cv::text::ERClassifierNM2
~ERDummyClassifier	thirdparty/textDetect/erfilter.cpp	/^      ~ERDummyClassifier() {}$/;"	f	class:cv::text::ERDummyClassifier
~ERFilterNM	thirdparty/textDetect/erfilter.cpp	/^      ~ERFilterNM() {}$/;"	f	class:cv::text::ERFilterNM
~ERStat	thirdparty/textDetect/erfilter.hpp	/^    ~ERStat() { }$/;"	f	struct:cv::text::ERStat
~Generator	src/util/program_options.cpp	/^Generator::~Generator() {$/;"	f	class:program_options::Generator
~ITrain	src/train/train.cpp	/^ITrain::~ITrain() {}$/;"	f	class:easypr::ITrain
~MSER_Impl2	thirdparty/mser/mser2.cpp	/^    virtual ~MSER_Impl2() {}$/;"	f	class:cv::MSER_Impl2
~ParseError	src/util/program_options.cpp	/^ParseError::~ParseError() throw() {}$/;"	f	class:program_options::ParseError
~Parser	src/util/program_options.cpp	/^Parser::~Parser() { this->cleanup(); }$/;"	f	class:program_options::Parser
~SVMImpl	thirdparty/svm/corrected_svm.cpp	/^    ~SVMImpl()$/;"	f	class:cv::ml::SVMImpl
~ToXMLStringTool	thirdparty/xmlParser/xmlParser.cpp	/^ToXMLStringTool::~ToXMLStringTool(){ freeBuffer(); }$/;"	f	class:ToXMLStringTool
~XMLNode	thirdparty/xmlParser/xmlParser.cpp	/^XMLNode::~XMLNode()$/;"	f	class:XMLNode
~XMLParserBase64Tool	thirdparty/xmlParser/xmlParser.cpp	/^XMLParserBase64Tool::~XMLParserBase64Tool(){ freeBuffer(); }$/;"	f	class:XMLParserBase64Tool
~auto_array_ptr	thirdparty/textDetect/erfilter.cpp	/^      ~auto_array_ptr()$/;"	f	class:cv::text::auto_array_ptr
~dissimilarity	thirdparty/textDetect/erfilter.cpp	/^      ~dissimilarity()$/;"	f	class:cv::text::dissimilarity
